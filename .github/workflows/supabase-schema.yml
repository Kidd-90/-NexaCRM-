name: Supabase Schema Pipeline

on:
  pull_request:
    branches:
      - main
      - develop
      - 'release/**'
    paths:
      - 'supabase/**'
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/supabase-schema.yml'
  push:
    branches:
      - develop
      - 'release/**'
      - main
    paths:
      - 'supabase/**'
      - '.github/workflows/supabase-schema.yml'

concurrency:
  group: supabase-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    if: github.event_name == 'pull_request'
    name: Validate Supabase schema and .NET contracts
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DEV_DB_URL }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore .NET dependencies
        run: dotnet restore

      - name: Check Supabase secret availability
        id: supabase-secrets
        shell: bash
        run: |
          db_url="${SUPABASE_DB_URL:-}"
          if [ -z "$db_url" ]; then
            echo "::warning::SUPABASE_DB_URL secret is not available. Supabase CLI commands will be skipped to avoid falling back to the local Postgres socket."
            echo "run-supabase=false" >> "$GITHUB_OUTPUT"
          elif [[ "$db_url" != *@* ]]; then
            echo "::warning::SUPABASE_DB_URL secret is present but does not include a host segment. Supabase CLI commands will be skipped to prevent the Supabase CLI from dialing the default unix socket."
            echo "run-supabase=false" >> "$GITHUB_OUTPUT"
          else
            echo "run-supabase=true" >> "$GITHUB_OUTPUT"
          fi

          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "::warning::SUPABASE_ACCESS_TOKEN secret is not available. Authenticated Supabase CLI features will require a manual login if executed locally."
            echo "has-access-token=false" >> "$GITHUB_OUTPUT"
          else
            echo "has-access-token=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Supabase schema lint
        if: steps.supabase-secrets.outputs.run-supabase == 'true'
        run: supabase db lint --db-url "$SUPABASE_DB_URL"

      - name: Skip Supabase schema lint (secrets unavailable)
        if: steps.supabase-secrets.outputs.run-supabase != 'true'
        run: echo "Supabase schema lint skipped because SUPABASE_DB_URL was not provided."

      - name: Reset dev database snapshot
        if: steps.supabase-secrets.outputs.run-supabase == 'true'
        run: supabase db reset --db-url "$SUPABASE_DB_URL" --force --non-interactive

      - name: Push schema to dev database
        if: steps.supabase-secrets.outputs.run-supabase == 'true'
        run: supabase db push --db-url "$SUPABASE_DB_URL" --non-interactive

      - name: Build WebClient
        run: dotnet build ./src/NexaCRM.WebClient/NexaCRM.WebClient.csproj --configuration Release

      - name: Run WebClient contract tests
        run: dotnet test ./src/NexaCRM.WebClient/NexaCRM.WebClient.csproj --configuration Release --no-build

  deploy-staging:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    name: Deploy schema to Staging
    runs-on: ubuntu-latest
    environment: supabase-staging
    needs: []
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_STAGING_DB_URL }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Push schema to Staging
        run: supabase db push --db-url "$SUPABASE_DB_URL" --include "functions,policies" --non-interactive

  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Deploy schema to Production
    runs-on: ubuntu-latest
    environment: supabase-production
    needs: []
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_PROD_DB_URL }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Dry-run schema deployment
        run: supabase db push --db-url "$SUPABASE_DB_URL" --dry-run --non-interactive

      - name: Deploy schema to Production
        run: supabase db push --db-url "$SUPABASE_DB_URL" --include "functions,policies" --non-interactive
