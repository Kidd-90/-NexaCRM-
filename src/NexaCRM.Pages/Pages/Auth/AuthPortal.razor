@page "/login"
@page "/register"
@page "/forgot-password"
@layout null
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using NexaCRM.Services.Admin.Interfaces
@using NexaCRM.Services.Admin.Models
@using NexaCRM.UI.Services.Interfaces
@implements IDisposable
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject IOrganizationService OrganizationService
@inject IJSRuntime JSRuntime
@inject ILogger<AuthPortal> Logger

<div class="themed-body">
    <div class="min-h-screen flex items-center justify-center p-4">
        <div class="w-full max-w-6xl flex flex-col md:flex-row themed-surface-card rounded-2xl shadow-xl overflow-hidden">
            <div class="hidden md:flex w-1/2 p-12 flex-col justify-between themed-primary-bg">
                <div>
                    <div class="flex items-center space-x-3">
                        <svg class="w-10 h-10 themed-accent-text" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        <span class="text-2xl font-bold themed-text-primary">@BrandName</span>
                    </div>
                </div>

                <div class="flex flex-col items-center text-center">
                    <img src="https://placehold.co/400x300/4C6EF5/FFFFFF?text=Modern+UI%0AIllustration&font=inter" alt="Modern UI Illustration" class="w-full max-w-sm rounded-lg mb-8" />
                    <h1 class="text-3xl font-bold themed-text-primary mb-3">데이터 기반의 성장</h1>
                    <p class="themed-text-secondary">활동 중심의 CRM으로 팀의 다음 한 걸음을 제안합니다.</p>
                </div>

                <div class="text-center text-sm themed-text-muted">
                    &copy; @DateTime.Now.Year NexaCRM Inc.
                </div>
            </div>

            <div class="w-full md:w-1/2 p-8 sm:p-12 flex flex-col justify-center">
                <div class="w-full max-w-md mx-auto">
                    @if (IsCurrentRoute("register"))
                    {
                        <RegisterForm />
                    }
                    else if (IsCurrentRoute("forgot-password"))
                    {
                        <ForgotPasswordForm />
                    }
                    else
                    {
                        <LoginForm />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private const string BrandName = "NexaCRM";
    private bool isSubmitting;
    private string currentRouteKey = string.Empty;

    private LoginModel loginModel = new();
    private NewUser registerModel = new();
    private ForgotPasswordModel forgotPasswordModel = new();

    private string? loginErrorMessage;
    private string? registerSuccessMessage;
    private string? registerErrorMessage;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateCurrentRoute(NavManager.Uri);
        NavManager.LocationChanged += OnLocationChanged;
    }

    protected override Task OnInitializedAsync() => CheckExistingAuthenticationAsync();

    private void UpdateCurrentRoute(string uri)
    {
        var relativePath = NavManager.ToBaseRelativePath(uri) ?? string.Empty;
        var normalized = relativePath.Split('?', '#')[0].Trim('/');
        currentRouteKey = string.IsNullOrWhiteSpace(normalized) ? "login" : normalized;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateCurrentRoute(e.Location);
        await InvokeAsync(StateHasChanged);
    }

    private bool IsCurrentRoute(string route) => string.Equals(currentRouteKey, route, StringComparison.OrdinalIgnoreCase);

    private async Task CheckExistingAuthenticationAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                Logger.LogInformation("User already authenticated, redirecting from auth portal");
                NavManager.NavigateTo(ResolveTargetUrl(user));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking existing authentication state");
            try
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Error checking authentication: {ex.Message}");
            }
            catch (JSException jsEx)
            {
                Logger.LogDebug(jsEx, "Ignored JSInterop error while logging authentication check failure");
            }
        }
    }

    private async Task HandleLogin()
    {
        if (isSubmitting)
        {
            return;
        }

        loginErrorMessage = null;
        isSubmitting = true;
        try
        {
            Logger.LogInformation("Login invoked for user {User}", string.IsNullOrWhiteSpace(loginModel.Username) ? "<empty>" : loginModel.Username);

            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Attempting Supabase login");
            }
            catch (JSException jsEx)
            {
                Logger.LogDebug(jsEx, "Ignored JSInterop error while logging login attempt");
            }

            var result = await AuthenticationService.SignInAsync(loginModel.Username, loginModel.Password);
            if (!result.Succeeded)
            {
                loginErrorMessage = result.ErrorMessage ?? "로그인 중 오류가 발생했습니다. 다시 시도해주세요.";
                Logger.LogWarning("Login failed for {User} with reason {Reason}", loginModel.Username, result.FailureReason);

                try
                {
                    await JSRuntime.InvokeVoidAsync("console.warn", $"Login failed for {loginModel.Username} with reason {result.FailureReason}.");
                }
                catch (JSException jsEx)
                {
                    Logger.LogDebug(jsEx, "Ignored JSInterop error while logging login failure");
                }

                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var isAuthenticated = user.Identity?.IsAuthenticated ?? false;

            Logger.LogInformation("Login complete - IsAuthenticated={IsAuth}", isAuthenticated);

            if (!isAuthenticated)
            {
                loginErrorMessage = "인증 상태 확인 실패. 다시 시도해주세요.";
                Logger.LogWarning("User not authenticated after login, staying on auth portal");
                return;
            }

            var targetUrl = ResolveTargetUrl(user);
            Logger.LogInformation("Navigating to {Url}", targetUrl);
            NavManager.NavigateTo(targetUrl);
        }
        catch (JSException jsEx)
        {
            Logger.LogWarning(jsEx, "JSInterop error during login (ignored)");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login for user {User}", loginModel.Username);
            loginErrorMessage = "로그인 중 오류가 발생했습니다. 다시 시도해주세요.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleKakaoLogin()
    {
        Logger.LogInformation("Kakao login initiated");
    }

    private void HandleGoogleLogin()
    {
        Logger.LogInformation("Google login initiated");
    }

    private void HandleNaverLogin()
    {
        Logger.LogInformation("Naver login initiated");
    }

    private async Task HandleRegister()
    {
        if (isSubmitting)
        {
            return;
        }

        registerErrorMessage = null;
        registerSuccessMessage = null;
        isSubmitting = true;
        try
        {
            await OrganizationService.RegisterUserAsync(registerModel);
            registerSuccessMessage = "계정이 성공적으로 생성되었습니다. 잠시 후 로그인 페이지로 이동합니다.";
            await Task.Delay(2000);
            NavManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration failed for {Email}", registerModel.Email);
            registerErrorMessage = $"계정 생성에 실패했습니다: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleForgotPassword()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;
        try
        {
            await Task.Delay(1500);
            Logger.LogInformation("Password reset requested for {Email}", forgotPasswordModel.Email);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }

    private static string ResolveTargetUrl(ClaimsPrincipal user)
    {
        if (user.IsInRole("Manager"))
        {
            return "/sales-manager-dashboard";
        }

        if (user.IsInRole("Sales"))
        {
            return "/main-dashboard";
        }

        return "/main-dashboard";
    }

    private RenderFragment LoginForm => @<section>
        <h2 class="text-3xl font-bold themed-text-primary mb-2">로그인</h2>
        <p class="themed-text-secondary mb-6">계정에 접속하여 시작하세요.</p>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="space-y-5">
            <DataAnnotationsValidator />

            <div>
                <label for="username" class="block text-sm font-medium themed-text-secondary mb-1">이메일 주소</label>
                <InputText id="username" class="form-input" @bind-Value="loginModel.Username" autocomplete="username" />
                <ValidationMessage For="@(() => loginModel.Username)" class="validation-message" />
            </div>

            <div>
                <label for="password" class="block text-sm font-medium themed-text-secondary mb-1">비밀번호</label>
                <InputText id="password" type="password" class="form-input" @bind-Value="loginModel.Password" autocomplete="current-password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <InputCheckbox id="remember-me" class="h-4 w-4 form-checkbox rounded" @bind-Value="loginModel.RememberMe" />
                    <label for="remember-me" class="ml-2 block text-sm themed-text-secondary">로그인 유지</label>
                </div>
                <div class="text-sm">
                    <a href="/forgot-password" class="themed-accent-link">비밀번호를 잊으셨나요?</a>
                </div>
            </div>

            <button type="submit" class="w-full flex justify-center items-center py-3 px-4 rounded-lg shadow-sm text-base btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="animate-spin -ml-1 mr-3 h-5 w-5" role="status" aria-hidden="true"></span>
                    <span>로그인 중...</span>
                }
                else
                {
                    <span>로그인</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(loginErrorMessage))
        {
            <div class="status-message status-error mt-4" role="alert">@loginErrorMessage</div>
        }

        <div class="relative my-6">
            <div class="absolute inset-0 flex items-center" aria-hidden="true">
                <div class="w-full border-t border-[var(--border-color)]"></div>
            </div>
            <div class="relative flex justify-center text-sm">
                <span class="px-2 bg-[var(--surface-bg)] themed-text-secondary">또는</span>
            </div>
        </div>

        <div class="space-y-3">
            <button @onclick="HandleKakaoLogin" class="social-btn bg-[#FEE500] text-black hover:bg-[#F7D900]">
                <svg class="w-5 h-5 mr-3" viewBox="0 0 18 18" fill="currentColor"><path d="M9 3.375C4.945 3.375 1.5 6.12 1.5 9.375c0 1.83 1.035 3.555 2.79 4.86l-1.02 2.895 3.105-1.635c.525.09 1.065.135 1.62.135 4.05 0 7.5-2.745 7.5-5.985C16.5 6.12 13.05 3.375 9 3.375Z"></path></svg>
                카카오로 로그인
            </button>
            <button @onclick="HandleGoogleLogin" class="social-btn bg-white text-gray-700 border border-[var(--border-color)] hover:bg-gray-50 dark:bg-[#333] dark:text-white dark:hover:bg-[#444]">
                <svg class="w-5 h-5 mr-3" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488 512"><path fill="currentColor" d="M488 261.8C488 403.3 381.5 512 244 512 109.8 512 0 402.2 0 261.8S109.8 11.6 244 11.6C381.5 11.6 488 120.3 488 261.8zM100.2 261.8c0 106.3 64.2 192.8 143.8 192.8s143.8-86.5 143.8-192.8-64.2-192.8-143.8-192.8S100.2 155.6 100.2 261.8zM422.8 261.8c0-106.3-64.2-192.8-143.8-192.8-5.3 0-10.6.2-15.8.6C302.5 73 386.3 158.5 413.2 261.8c27 103.3 2.1 217.4-82.6 283.1 5.2.4 10.6.6 15.8.6 79.6 0 143.8-86.5 143.8-192.8z"></path></svg>
                Google로 로그인
            </button>
            <button @onclick="HandleNaverLogin" class="social-btn bg-[#03C75A] text-white hover:bg-[#02B350]">
                <svg class="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor"><path d="M16.273 12.845H7.727V24H0V0h7.727v11.155h8.546V0H24v24h-7.727V12.845z"></path></svg>
                네이버로 로그인
            </button>
        </div>

        <p class="mt-8 text-center text-sm themed-text-secondary">
            계정이 없으신가요?
            <a href="/register" class="themed-accent-link">지금 가입하기</a>
        </p>
    </section>;

    private RenderFragment RegisterForm => @<section>
        <h2 class="text-3xl font-bold themed-text-primary mb-2">계정 만들기</h2>
        <p class="themed-text-secondary mb-8">새로운 계정을 만들어 시작하세요.</p>
        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" class="space-y-5">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(registerSuccessMessage))
            {
                <div class="status-message status-success" role="status">@registerSuccessMessage</div>
            }

            @if (!string.IsNullOrEmpty(registerErrorMessage))
            {
                <div class="status-message status-error" role="alert">@registerErrorMessage</div>
            }

            <div>
                <label for="full-name" class="block text-sm font-medium themed-text-secondary mb-1">이름</label>
                <InputText id="full-name" class="form-input" @bind-Value="registerModel.FullName" autocomplete="name" />
                <ValidationMessage For="@(() => registerModel.FullName)" class="validation-message" />
            </div>

            <div>
                <label for="user-id" class="block text-sm font-medium themed-text-secondary mb-1">아이디</label>
                <InputText id="user-id" class="form-input" @bind-Value="registerModel.UserId" autocomplete="username" />
                <ValidationMessage For="@(() => registerModel.UserId)" class="validation-message" />
            </div>

            <div>
                <label for="email-reg" class="block text-sm font-medium themed-text-secondary mb-1">이메일 주소</label>
                <InputText id="email-reg" class="form-input" @bind-Value="registerModel.Email" autocomplete="email" />
                <ValidationMessage For="@(() => registerModel.Email)" class="validation-message" />
            </div>
            <div>
                <label for="password-reg" class="block text-sm font-medium themed-text-secondary mb-1">새 비밀번호</label>
                <InputText id="password-reg" type="password" class="form-input" @bind-Value="registerModel.Password" autocomplete="new-password" />
                <ValidationMessage For="@(() => registerModel.Password)" class="validation-message" />
            </div>
            <div>
                <label for="confirm-password" class="block text-sm font-medium themed-text-secondary mb-1">비밀번호 확인</label>
                <InputText id="confirm-password" type="password" class="form-input" @bind-Value="registerModel.ConfirmPassword" autocomplete="new-password" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="validation-message" />
            </div>

            <div class="flex items-start space-x-2">
                <InputCheckbox id="terms" class="mt-1 form-checkbox" @bind-Value="registerModel.TermsAccepted" />
                <label for="terms" class="text-sm themed-text-secondary">이용 약관에 동의합니다.</label>
            </div>
            <ValidationMessage For="@(() => registerModel.TermsAccepted)" class="validation-message" />

            <button type="submit" class="w-full flex justify-center items-center py-3 px-4 rounded-lg shadow-sm text-base btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="animate-spin -ml-1 mr-3 h-5 w-5" role="status" aria-hidden="true"></span>
                    <span>가입 중...</span>
                }
                else
                {
                    <span>가입하기</span>
                }
            </button>
        </EditForm>
        <p class="mt-8 text-center text-sm themed-text-secondary">
            이미 계정이 있으신가요?
            <a href="/login" class="themed-accent-link">로그인하기</a>
        </p>
    </section>;

    private RenderFragment ForgotPasswordForm => @<section>
        <h2 class="text-3xl font-bold themed-text-primary mb-2">비밀번호 찾기</h2>
        <p class="themed-text-secondary mb-8">이메일 주소를 입력하시면 비밀번호 재설정 링크를 보내드립니다.</p>
        <EditForm Model="@forgotPasswordModel" OnValidSubmit="@HandleForgotPassword" class="space-y-5">
            <DataAnnotationsValidator />
            <div>
                <label for="email-forgot" class="block text-sm font-medium themed-text-secondary mb-1">이메일 주소</label>
                <InputText id="email-forgot" class="form-input" @bind-Value="forgotPasswordModel.Email" />
                <ValidationMessage For="@(() => forgotPasswordModel.Email)" class="validation-message" />
            </div>
            <button type="submit" class="w-full flex justify-center items-center py-3 px-4 rounded-lg shadow-sm text-base btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="animate-spin -ml-1 mr-3 h-5 w-5" role="status" aria-hidden="true"></span>
                    <span>전송 중...</span>
                }
                else
                {
                    <span>재설정 링크 보내기</span>
                }
            </button>
        </EditForm>
        <p class="mt-8 text-center text-sm themed-text-secondary">
            비밀번호가 기억나셨나요?
            <a href="/login" class="themed-accent-link">로그인으로 돌아가기</a>
        </p>
    </section>;

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "이메일 주소를 입력해주세요.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "비밀번호를 입력해주세요.")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private sealed class ForgotPasswordModel
    {
        [Required(ErrorMessage = "가입 시 사용한 이메일 주소를 입력해주세요.")]
        [EmailAddress(ErrorMessage = "올바른 이메일 형식이 아닙니다.")]
        public string Email { get; set; } = string.Empty;
    }
}
