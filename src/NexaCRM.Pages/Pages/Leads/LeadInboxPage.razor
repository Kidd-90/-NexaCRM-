@page "/leads"
@using System.Linq
@using NexaCRM.Service.Models.DB
@using TaskAsync = System.Threading.Tasks.Task
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using NexaCRM.Pages.Components.Shared
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTemplate Title="Î¶¨Îìú Î∞õÏùÄÌé∏ÏßÄÌï®"
              Description="ÏÉàÎ°úÏö¥ Ïû†Ïû¨ Í≥†Í∞ùÏùÑ ÌôïÏù∏ÌïòÍ≥† Í¥ÄÎ¶¨Ìï©ÎãàÎã§">
    
    <HeaderActions>
        <button type="button" class="btn btn-primary" @onclick="CreateNewLead">
            ‚ûï ÏÉà Î¶¨Îìú Ï∂îÍ∞Ä
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="RefreshLeads">
            üîÑ ÏÉàÎ°úÍ≥†Ïπ®
        </button>
    </HeaderActions>

    <ChildContent>
        @if (IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Î°úÎî© Ï§ë...</span>
                </div>
                <p class="mt-2 text-muted">Î¶¨Îìú Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle"></i> @ErrorMessage
            </div>
        }
        else
        {
            <!-- Filters -->
            <div class="card mb-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">ÏÉÅÌÉú</label>
                            <select class="form-select" @bind="FilterStatus">
                                <option value="">Ï†ÑÏ≤¥</option>
                                <option value="New">Ïã†Í∑ú</option>
                                <option value="Contacted">Ï†ëÏ¥âÎê®</option>
                                <option value="Qualified">Í≤ÄÏ¶ùÎê®</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">ÏÜåÏä§</label>
                            <select class="form-select" @bind="FilterSourceId">
                                <option value="0">Ï†ÑÏ≤¥</option>
                                @foreach (var source in LeadSources)
                                {
                                    <option value="@source.Id">@source.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Îã¥ÎãπÏûê</label>
                            <select class="form-select" @bind="FilterAssignedTo">
                                <option value="">Ï†ÑÏ≤¥</option>
                                <option value="me">ÎÇ¥Í∞Ä Îã¥Îãπ</option>
                                <option value="unassigned">ÎØ∏Î∞∞Ï†ï</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Í≤ÄÏÉâ</label>
                            <input type="text" class="form-control" placeholder="Ïù¥Î¶Ñ, Ïù¥Î©îÏùº, ÌöåÏÇ¨Î™Ö..." @bind="SearchTerm" @bind:event="oninput" @onkeyup="OnSearchChanged" />
                        </div>
                    </div>
                    <div class="mt-2">
                        <button type="button" class="btn btn-sm btn-secondary" @onclick="ApplyFilters">
                            <span aria-hidden="true">üîç</span> ÌïÑÌÑ∞ Ï†ÅÏö©
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ClearFilters">
                            <span aria-hidden="true">‚úñÔ∏è</span> ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
                        </button>
                    </div>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <div class="card border-primary">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ï¥ù Î¶¨Îìú</h6>
                            <h3 class="card-title">@FilteredLeads.Count()</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-success">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ïã†Í∑ú</h6>
                            <h3 class="card-title">@FilteredLeads.Count(l => l.Status == LeadStatus.New)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-warning">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ï†ëÏ¥âÎê®</h6>
                            <h3 class="card-title">@FilteredLeads.Count(l => l.Status == LeadStatus.Contacted)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-info">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Í≤ÄÏ¶ùÎê®</h6>
                            <h3 class="card-title">@FilteredLeads.Count(l => l.Status == LeadStatus.Qualified)</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Leads List -->
            @if (!FilteredLeads.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> Ï°∞Í±¥Ïóê ÎßûÎäî Î¶¨ÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Ïù¥Î¶Ñ</th>
                                <th>ÌöåÏÇ¨</th>
                                <th>Ïó∞ÎùΩÏ≤ò</th>
                                <th>ÏÜåÏä§</th>
                                <th>Ï†êÏàò</th>
                                <th>ÏÉÅÌÉú</th>
                                <th>Îã¥ÎãπÏûê</th>
                                <th>ÏÉùÏÑ±Ïùº</th>
                                <th>Ïï°ÏÖò</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var lead in FilteredLeads.Take(50))
                            {
                                <tr class="@GetRowClass(lead)">
                                    <td>
                                        <div class="fw-bold">@lead.FullName</div>
                                        @if (!string.IsNullOrEmpty(lead.Title))
                                        {
                                            <small class="text-muted">@lead.Title</small>
                                        }
                                    </td>
                                    <td>@lead.CompanyName</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(lead.Email))
                                        {
                                            <div><i class="bi bi-envelope"></i> @lead.Email</div>
                                        }
                                        @if (!string.IsNullOrEmpty(lead.Phone))
                                        {
                                            <div><i class="bi bi-telephone"></i> @lead.Phone</div>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(lead.SourceName))
                                        {
                                            <span class="badge bg-secondary">@lead.SourceName</span>
                                        }
                                    </td>
                                    <td>
                                        @if (lead.LeadScore.HasValue)
                                        {
                                            <span class="badge @GetScoreBadgeClass(lead.LeadScore.Value)">
                                                @lead.LeadScore
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(lead.Status)">
                                            @GetStatusLabel(lead.Status)
                                        </span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(lead.AssignedToName))
                                        {
                                            @lead.AssignedToName
                                        }
                                        else
                                        {
                                            <span class="text-muted">ÎØ∏Î∞∞Ï†ï</span>
                                        }
                                    </td>
                                    <td>
                                        <span title="@lead.CreatedAt.ToString("yyyy-MM-dd HH:mm")">
                                            @GetRelativeTime(lead.CreatedAt)
                                        </span>
                                        @if (lead.IsOverdue)
                                        {
                                            <span class="badge bg-danger ms-1">ÏßÄÏó∞</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-primary" @onclick="() => ViewLead(lead.Id)" title="ÏÉÅÏÑ∏Î≥¥Í∏∞">
                                                üëÅÔ∏è
                                            </button>
                                            <button type="button" class="btn btn-outline-success" @onclick="() => ConvertLead(lead.Id)" title="Í≥†Í∞ùÏ†ÑÌôò">
                                                ‚û°Ô∏è
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (FilteredLeads.Count() > 50)
                {
                    <div class="alert alert-info mt-3">
                        Ï≤òÏùå 50Í∞úÎßå ÌëúÏãúÎê©ÎãàÎã§. Ï¥ù @FilteredLeads.Count()Í∞úÏùò Î¶¨ÎìúÍ∞Ä ÏûàÏäµÎãàÎã§.
                    </div>
                }
            }
        }
    </ChildContent>
</PageTemplate>

@code {
    private List<Lead> Leads = new();
    private List<LeadSource> LeadSources = new();
    private bool IsLoading = true;
    private string? ErrorMessage;
    
    // Filters
    private string FilterStatus = "";
    private long FilterSourceId = 0;
    private string FilterAssignedTo = "";
    private string SearchTerm = "";
    private Guid? CurrentUserId;

    private IEnumerable<Lead> FilteredLeads => ApplyClientFilters();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
                if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
                {
                    CurrentUserId = userId;
                }
            }

            // TODO: Replace with actual service calls when implemented
            // var filter = new LeadFilterCriteria();
            // Leads = (await LeadService.GetLeadsAsync(filter)).ToList();
            // LeadSources = (await LeadSourceService.GetLeadSourcesAsync()).ToList();
            
            // Mock data for now
            Leads = GenerateMockLeads();
            LeadSources = GenerateMockSources();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<Lead> ApplyClientFilters()
    {
        var query = Leads.AsEnumerable();

        if (!string.IsNullOrEmpty(FilterStatus) && Enum.TryParse<LeadStatus>(FilterStatus, out var status))
        {
            query = query.Where(l => l.Status == status);
        }

        if (FilterSourceId > 0)
        {
            query = query.Where(l => l.LeadSourceId == FilterSourceId);
        }

        if (FilterAssignedTo == "me" && CurrentUserId.HasValue)
        {
            query = query.Where(l => l.AssignedTo == CurrentUserId.Value);
        }
        else if (FilterAssignedTo == "unassigned")
        {
            query = query.Where(l => !l.AssignedTo.HasValue);
        }

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            var term = SearchTerm.ToLower();
            query = query.Where(l =>
                (l.FirstName?.ToLower().Contains(term) == true) ||
                (l.LastName?.ToLower().Contains(term) == true) ||
                (l.Email?.ToLower().Contains(term) == true) ||
                (l.CompanyName?.ToLower().Contains(term) == true));
        }

        return query.OrderByDescending(l => l.CreatedAt);
    }

    private void ApplyFilters() => StateHasChanged();
    private void ClearFilters()
    {
        FilterStatus = "";
        FilterSourceId = 0;
        FilterAssignedTo = "";
        SearchTerm = "";
        StateHasChanged();
    }

    private async void RefreshLeads() => await LoadData();
    private void CreateNewLead() => NavigationManager.NavigateTo("/leads/new");
    private void ViewLead(long id) => NavigationManager.NavigateTo($"/leads/{id}");
    
    private async void ConvertLead(long id)
    {
        // TODO: Implement conversion logic
        // await LeadService.ConvertLeadToCustomerAsync(id, CurrentUserId.Value);
        await LoadData();
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private string GetRowClass(Lead lead)
    {
        if (lead.IsOverdue) return "table-danger";
        if (lead.Status == LeadStatus.New) return "table-success";
        return "";
    }

    private string GetStatusBadgeClass(LeadStatus status) => status switch
    {
        LeadStatus.New => "bg-success",
        LeadStatus.Contacted => "bg-warning",
        LeadStatus.Qualified => "bg-info",
        LeadStatus.Converted => "bg-primary",
        LeadStatus.Lost => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetStatusLabel(LeadStatus status) => status switch
    {
        LeadStatus.New => "Ïã†Í∑ú",
        LeadStatus.Contacted => "Ï†ëÏ¥âÎê®",
        LeadStatus.Qualified => "Í≤ÄÏ¶ùÎê®",
        LeadStatus.Converted => "Ï†ÑÌôòÎê®",
        LeadStatus.Lost => "Ïã§Ìå®",
        _ => "Ïïå Ïàò ÏóÜÏùå"
    };

    private string GetScoreBadgeClass(int score)
    {
        if (score >= 80) return "bg-success";
        if (score >= 50) return "bg-warning";
        return "bg-danger";
    }

    private string GetRelativeTime(DateTime date)
    {
        var diff = DateTime.UtcNow - date;
        if (diff.TotalDays < 1) return "Ïò§Îäò";
        if (diff.TotalDays < 2) return "Ïñ¥Ï†ú";
        if (diff.TotalDays < 7) return $"{(int)diff.TotalDays}Ïùº Ï†Ñ";
        if (diff.TotalDays < 30) return $"{(int)(diff.TotalDays / 7)}Ï£º Ï†Ñ";
        return date.ToString("yyyy-MM-dd");
    }

    // Mock data generators (remove when real service is implemented)
    private List<Lead> GenerateMockLeads()
    {
        return new List<Lead>
        {
            new Lead { Id = 1, FirstName = "ÍπÄ", LastName = "Ï≤†Ïàò", Email = "kim@example.com", Phone = "010-1234-5678", 
                CompanyName = "ABC Ï£ºÏãùÌöåÏÇ¨", Status = LeadStatus.New, LeadSourceId = 1, SourceName = "ÏõπÏÇ¨Ïù¥Ìä∏", LeadScore = 85, CreatedAt = DateTime.UtcNow.AddDays(-1) },
            new Lead { Id = 2, FirstName = "Ïù¥", LastName = "ÏòÅÌù¨", Email = "lee@example.com", Phone = "010-2345-6789", 
                CompanyName = "XYZ Corp", Status = LeadStatus.Contacted, LeadSourceId = 2, SourceName = "Facebook", LeadScore = 65, CreatedAt = DateTime.UtcNow.AddDays(-3) },
            new Lead { Id = 3, FirstName = "Î∞ï", LastName = "ÎØºÏàò", Email = "park@example.com", Phone = "010-3456-7890", 
                CompanyName = "Tech Innovations", Status = LeadStatus.Qualified, LeadSourceId = 3, SourceName = "Google Ads", LeadScore = 90, CreatedAt = DateTime.UtcNow.AddDays(-5) },
        };
    }

    private List<LeadSource> GenerateMockSources()
    {
        return new List<LeadSource>
        {
            new LeadSource { Id = 1, Name = "ÏõπÏÇ¨Ïù¥Ìä∏", Category = "direct", IsActive = true },
            new LeadSource { Id = 2, Name = "Facebook", Category = "marketing", IsActive = true },
            new LeadSource { Id = 3, Name = "Google Ads", Category = "marketing", IsActive = true },
            new LeadSource { Id = 4, Name = "Ï∂îÏ≤ú", Category = "referral", IsActive = true },
        };
    }
}
