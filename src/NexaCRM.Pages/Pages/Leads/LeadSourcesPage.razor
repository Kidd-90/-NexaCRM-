@page "/leads/sources"
@using System.Linq
@using NexaCRM.Service.Models.DB
@using TaskAsync = System.Threading.Tasks.Task
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using NexaCRM.Pages.Components.Shared
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTemplate Title="Î¶¨Îìú ÏÜåÏä§ Í¥ÄÎ¶¨"
              Description="Î¶¨ÎìúÍ∞Ä Ïú†ÏûÖÎêú Ï∂úÏ≤òÏôÄ Ï±ÑÎÑêÏùÑ Í¥ÄÎ¶¨ÌïòÍ≥† Î∂ÑÏÑùÌï©ÎãàÎã§">
    
    <HeaderActions>
        <button type="button" class="btn btn-primary" @onclick="CreateNewSource">
            ‚ûï ÏÉà ÏÜåÏä§ Ï∂îÍ∞Ä
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="async () => await LoadData()">
            üîÑ ÏÉàÎ°úÍ≥†Ïπ®
        </button>
    </HeaderActions>

    <ChildContent>
        @if (IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Î°úÎî© Ï§ë...</span>
                </div>
                <p class="mt-2 text-muted">ÏÜåÏä§ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle"></i> @ErrorMessage
            </div>
        }
        else
        {
            <!-- Summary Stats -->
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <div class="card border-primary">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ï¥ù ÏÜåÏä§</h6>
                            <h3 class="card-title">@SourceAnalytics.Count</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-success">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ï¥ù Î¶¨Îìú</h6>
                            <h3 class="card-title">@SourceAnalytics.Sum(s => s.TotalLeads)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-info">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">Ï†ÑÌôòÎêú Î¶¨Îìú</h6>
                            <h3 class="card-title">@SourceAnalytics.Sum(s => s.ConvertedLeads)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-warning">
                        <div class="card-body">
                            <h6 class="card-subtitle mb-2 text-muted">ÌèâÍ∑† Ï†ÑÌôòÏú®</h6>
                            <h3 class="card-title">@GetAverageConversionRate().ToString("F1")%</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics by Category -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î¶¨Îìú Î∂ÑÌè¨</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var category in GetLeadsByCategory())
                        {
                            <div class="col-md-3 mb-3">
                                <div class="text-center p-3 border rounded">
                                    <h4 class="text-primary">@category.Value</h4>
                                    <p class="text-muted mb-0">@GetCategoryDisplayName(category.Key)</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Source Analytics Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">ÏÜåÏä§Î≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù</h5>
                </div>
                <div class="card-body">
                    @if (!SourceAnalytics.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> Îì±Î°ùÎêú Î¶¨Îìú ÏÜåÏä§Í∞Ä ÏóÜÏäµÎãàÎã§.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ÏÜåÏä§Î™Ö</th>
                                        <th>Ïπ¥ÌÖåÍ≥†Î¶¨</th>
                                        <th>Ï¥ù Î¶¨Îìú</th>
                                        <th>ÌôúÏÑ± Î¶¨Îìú</th>
                                        <th>Ï†ÑÌôòÎêú Î¶¨Îìú</th>
                                        <th>Ïã§Ìå®</th>
                                        <th>Ï†ÑÌôòÏú®</th>
                                        <th>ÌèâÍ∑† Ï†êÏàò</th>
                                        <th>ÌèâÍ∑† Ï†ÑÌôò Í∏∞Í∞Ñ</th>
                                        <th>Ïï°ÏÖò</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var analytics in SourceAnalytics.OrderByDescending(a => a.TotalLeads))
                                    {
                                        <tr>
                                            <td class="fw-bold">@analytics.SourceName</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(analytics.Category))
                                                {
                                                    <span class="badge @GetCategoryBadgeClass(analytics.Category)">
                                                        @GetCategoryDisplayName(analytics.Category)
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-primary rounded-pill">@analytics.TotalLeads</span>
                                            </td>
                                            <td>@analytics.ActiveLeads</td>
                                            <td>
                                                <span class="text-success fw-bold">@analytics.ConvertedLeads</span>
                                            </td>
                                            <td>
                                                <span class="text-danger">@analytics.LostLeads</span>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="progress flex-grow-1 me-2" style="height: 20px;">
                                                        <div class="progress-bar @GetConversionRateClass(analytics.ConversionRate)" 
                                                             role="progressbar" 
                                                             style="width: @analytics.ConversionRate%"
                                                             aria-valuenow="@analytics.ConversionRate" 
                                                             aria-valuemin="0" 
                                                             aria-valuemax="100">
                                                            @analytics.ConversionRate.ToString("F1")%
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                @if (analytics.AverageLeadScore > 0)
                                                {
                                                    <span class="badge @GetScoreBadgeClass((int)analytics.AverageLeadScore)">
                                                        @analytics.AverageLeadScore.ToString("F0")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (analytics.AverageDaysToConversion > 0)
                                                {
                                                    <span>@(analytics.AverageDaysToConversion)Ïùº</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button type="button" class="btn btn-outline-primary" 
                                                            @onclick="() => ViewSourceLeads(analytics.SourceId)" 
                                                            title="Î¶¨Îìú Î≥¥Í∏∞">
                                                        üë•
                                                    </button>
                                                    <button type="button" class="btn btn-outline-secondary" 
                                                            @onclick="() => EditSource(analytics.SourceId)" 
                                                            title="ÏàòÏ†ï">
                                                        ‚úèÔ∏è
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="table-active fw-bold">
                                        <td colspan="2">Ï¥ùÍ≥Ñ</td>
                                        <td><span class="badge bg-primary rounded-pill">@SourceAnalytics.Sum(a => a.TotalLeads)</span></td>
                                        <td>@SourceAnalytics.Sum(a => a.ActiveLeads)</td>
                                        <td><span class="text-success">@SourceAnalytics.Sum(a => a.ConvertedLeads)</span></td>
                                        <td><span class="text-danger">@SourceAnalytics.Sum(a => a.LostLeads)</span></td>
                                        <td>@GetAverageConversionRate().ToString("F1")%</td>
                                        <td colspan="3"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <!-- Performance Chart Placeholder -->
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="mb-0">ÏãúÍ∞ÑÎ≥Ñ Î¶¨Îìú Ïú†ÏûÖ Ï∂îÏù¥</h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Ï∞®Ìä∏ Í∏∞Îä•ÏùÄ Ï∂îÌõÑ Íµ¨ÌòÑ ÏòàÏ†ïÏûÖÎãàÎã§.
                    </div>
                </div>
            </div>
        }
    </ChildContent>
</PageTemplate>

@code {
    private List<LeadSourceAnalytics> SourceAnalytics = new();
    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async TaskAsync OnInitializedAsync()
    {
        await LoadData();
    }

    private async TaskAsync LoadData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            // TODO: Replace with actual service call when implemented
            // SourceAnalytics = (await LeadSourceService.GetLeadSourceAnalyticsAsync()).ToList();
            
            // Mock data for now
            SourceAnalytics = GenerateMockAnalytics();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void CreateNewSource() => NavigationManager.NavigateTo("/leads/sources/new");
    private void EditSource(long id) => NavigationManager.NavigateTo($"/leads/sources/{id}");
    private void ViewSourceLeads(long sourceId) => NavigationManager.NavigateTo($"/leads?source={sourceId}");

    private decimal GetAverageConversionRate()
    {
        if (!SourceAnalytics.Any()) return 0;
        var totalLeads = SourceAnalytics.Sum(a => a.TotalLeads);
        var totalConverted = SourceAnalytics.Sum(a => a.ConvertedLeads);
        return totalLeads > 0 ? (decimal)totalConverted / totalLeads * 100 : 0;
    }

    private Dictionary<string, int> GetLeadsByCategory()
    {
        return SourceAnalytics
            .GroupBy(a => a.Category ?? "Í∏∞ÌÉÄ")
            .ToDictionary(g => g.Key, g => g.Sum(a => a.TotalLeads));
    }

    private string GetCategoryDisplayName(string category) => category switch
    {
        "marketing" => "ÎßàÏºÄÌåÖ",
        "referral" => "Ï∂îÏ≤ú",
        "direct" => "ÏßÅÏ†ë",
        "partner" => "ÌååÌä∏ÎÑà",
        "event" => "Ïù¥Î≤§Ìä∏",
        "other" => "Í∏∞ÌÉÄ",
        _ => category
    };

    private string GetCategoryBadgeClass(string category) => category switch
    {
        "marketing" => "bg-primary",
        "referral" => "bg-success",
        "direct" => "bg-info",
        "partner" => "bg-warning",
        "event" => "bg-secondary",
        _ => "bg-light text-dark"
    };

    private string GetConversionRateClass(decimal rate)
    {
        if (rate >= 30) return "bg-success";
        if (rate >= 15) return "bg-warning";
        return "bg-danger";
    }

    private string GetScoreBadgeClass(int score)
    {
        if (score >= 80) return "bg-success";
        if (score >= 50) return "bg-warning";
        return "bg-danger";
    }

    // Mock data generator (remove when real service is implemented)
    private List<LeadSourceAnalytics> GenerateMockAnalytics()
    {
        return new List<LeadSourceAnalytics>
        {
            new LeadSourceAnalytics 
            { 
                SourceId = 1, SourceName = "ÏõπÏÇ¨Ïù¥Ìä∏ Ìèº", Category = "direct",
                TotalLeads = 245, ActiveLeads = 45, ConvertedLeads = 98, LostLeads = 102,
                AverageLeadScore = 75, AverageDaysToConversion = 14
            },
            new LeadSourceAnalytics 
            { 
                SourceId = 2, SourceName = "Facebook Í¥ëÍ≥†", Category = "marketing",
                TotalLeads = 180, ActiveLeads = 35, ConvertedLeads = 54, LostLeads = 91,
                AverageLeadScore = 65, AverageDaysToConversion = 21
            },
            new LeadSourceAnalytics 
            { 
                SourceId = 3, SourceName = "Google Ads", Category = "marketing",
                TotalLeads = 320, ActiveLeads = 80, ConvertedLeads = 128, LostLeads = 112,
                AverageLeadScore = 82, AverageDaysToConversion = 10
            },
            new LeadSourceAnalytics 
            { 
                SourceId = 4, SourceName = "Í≥†Í∞ù Ï∂îÏ≤ú", Category = "referral",
                TotalLeads = 95, ActiveLeads = 20, ConvertedLeads = 57, LostLeads = 18,
                AverageLeadScore = 88, AverageDaysToConversion = 7
            },
            new LeadSourceAnalytics 
            { 
                SourceId = 5, SourceName = "Ï†ÑÏãúÌöå", Category = "event",
                TotalLeads = 120, ActiveLeads = 25, ConvertedLeads = 36, LostLeads = 59,
                AverageLeadScore = 70, AverageDaysToConversion = 18
            },
            new LeadSourceAnalytics 
            { 
                SourceId = 6, SourceName = "Ïù¥Î©îÏùº Ï∫†ÌéòÏù∏", Category = "marketing",
                TotalLeads = 210, ActiveLeads = 40, ConvertedLeads = 63, LostLeads = 107,
                AverageLeadScore = 68, AverageDaysToConversion = 16
            },
        };
    }
}
