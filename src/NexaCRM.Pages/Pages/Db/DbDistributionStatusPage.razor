@page "/db/distribution/status"
@using System.Collections.Generic
@using System.Linq
@using Microsoft.Extensions.Localization
@using NexaCRM.Pages.Components.Shared
@using NexaCRM.Pages.Pages.Db.Shared
@using NexaCRM.Services.Admin.Models.Db

@inherits DbCustomerListPageBase

@inject IStringLocalizer<DbStatus> StatusLocalizer

<PageTemplate PageTitle="분배 현황"
              PageDescription="전체 고객 DB 분배 현황과 담당자 배정을 한눈에 확인합니다."
              BodyCssClass="space-y-6"
              DisableCardSurface="true">
    <LeadingVisual>
        <span class="text-3xl" aria-hidden="true">📈</span>
    </LeadingVisual>

    <HeaderActions>
        <button type="button"
                class="inline-flex items-center gap-2 rounded-lg border border-[var(--border-color)] bg-[var(--surface-bg)] px-4 py-2 text-sm font-medium shadow-sm transition hover:bg-[var(--primary-bg)] disabled:opacity-60"
                @onclick="RefreshAsync"
                disabled="@IsLoading">
            <span aria-hidden="true">🔄</span>
            새로고침
        </button>
    </HeaderActions>

    <DescriptionContent>
        <p class="themed-text-secondary text-sm">실제 서비스 연동 전까지는 체험 데이터가 제공되며, 회수 및 재분배 액션은 즉시 반영됩니다.</p>
    </DescriptionContent>

    @if (IsLoading)
    {
        <div class="themed-surface-card border border-[var(--border-color)] rounded-xl p-10 flex items-center justify-center">
            <span class="text-sm themed-text-secondary">데이터를 불러오는 중입니다...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="rounded-xl border border-rose-200 bg-rose-50 p-6 text-sm text-rose-600">
            @ErrorMessage
        </div>
    }
    else if (Customers.Count == 0)
    {
        <div class="rounded-xl border border-dashed border-[var(--border-color)] bg-[var(--surface-bg)] p-10 text-center text-sm themed-text-secondary">
            표시할 고객 DB가 없습니다.
        </div>
    }
    else
    {
        <div class="grid gap-6 lg:grid-cols-[minmax(0,1fr)_minmax(0,1.2fr)]">
            <section class="themed-surface-card border border-[var(--border-color)] rounded-xl p-6">
                <header class="mb-6 flex items-center justify-between">
                    <div>
                        <h2 class="text-lg font-semibold themed-text-primary">상태 요약</h2>
                        <p class="text-sm themed-text-secondary">분배된 DB의 상태별 분포입니다.</p>
                    </div>
                    <span class="rounded-full bg-emerald-100 px-3 py-1 text-xs font-semibold text-emerald-600">총 @Customers.Count</span>
                </header>
                <div class="grid gap-4 sm:grid-cols-2">
                    @foreach (var status in _statusSummary)
                    {
                        <article class="rounded-xl border bg-white p-4 shadow-sm dark:bg-[var(--surface-bg)] dark:shadow-none @DbStatusCss.GetStatusBadgeClass(status.Status)">
                            <div class="flex items-center justify-between">
                                <div class="text-sm font-semibold">@StatusLocalizer[status.Status.ToString()]</div>
                                <div class="text-2xl font-bold">@status.Count</div>
                            </div>
                        </article>
                    }
                </div>
            </section>

            <section class="themed-surface-card border border-[var(--border-color)] rounded-xl p-0">
                <header class="flex items-center justify-between border-b border-[var(--border-color)] px-6 py-4">
                    <h2 class="text-lg font-semibold themed-text-primary">상세 목록</h2>
                    <span class="text-sm themed-text-secondary">최근 분배일 기준 정렬</span>
                </header>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-[var(--border-color)] text-left text-sm">
                        <thead class="bg-[var(--surface-bg-muted)] text-xs uppercase tracking-wide themed-text-secondary">
                            <tr>
                                <th class="px-6 py-3">고객명</th>
                                <th class="px-6 py-3">연락처</th>
                                <th class="px-6 py-3">담당자</th>
                                <th class="px-6 py-3">분배일</th>
                                <th class="px-6 py-3">상태</th>
                                <th class="px-6 py-3">최종 컨택</th>
                                <th class="px-6 py-3 text-right">작업</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-[var(--border-color)]">
                            @foreach (var customer in Customers.OrderByDescending(c => c.AssignedDate))
                            {
                                <tr class="hover:bg-[var(--primary-bg)]/40 transition">
                                    <td class="px-6 py-4 font-medium">@customer.CustomerName</td>
                                    <td class="px-6 py-4">@customer.ContactNumber</td>
                                    <td class="px-6 py-4">@customer.AssignedTo</td>
                                    <td class="px-6 py-4">@customer.AssignedDate.ToShortDateString()</td>
                                    <td class="px-6 py-4">
                                        <span class="inline-flex items-center gap-2">
                                            <span class="h-2.5 w-2.5 rounded-full bg-current opacity-70 @DbStatusCss.GetStatusTextClass(customer.Status)"></span>
                                            <span class="@DbStatusCss.GetStatusTextClass(customer.Status)">@StatusLocalizer[customer.Status.ToString()]</span>
                                        </span>
                                    </td>
                                    <td class="px-6 py-4">@customer.LastContactDate.ToShortDateString()</td>
                                    <td class="px-6 py-4 text-right">
                                        <div class="flex justify-end gap-2">
                                            <button type="button" class="rounded-lg border border-[var(--border-color)] px-3 py-1 text-sm font-medium hover:bg-[var(--primary-bg)]" @onclick="() => Redistribute(customer.ContactId)">
                                                재분배
                                            </button>
                                            <button type="button"
                                                    class="rounded-lg bg-rose-500 px-3 py-1 text-sm font-semibold text-white shadow-sm hover:bg-rose-600 disabled:opacity-50"
                                                    disabled="@(_recallInProgress.Contains(customer.ContactId))"
                                                    @onclick="async () => await RecallAsync(customer.ContactId)">
                                                회수
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>
        </div>
    }
</PageTemplate>

@code {
    private readonly HashSet<int> _recallInProgress = new();
    private IReadOnlyList<(DbStatus Status, int Count)> _statusSummary = Array.Empty<(DbStatus, int)>();

    protected override Task<IEnumerable<DbCustomer>> FetchCustomersAsync()
        => DbDataService.GetDbDistributionStatusAsync();

    protected override Task OnDataLoadedAsync(IReadOnlyList<DbCustomer> customers)
    {
        _statusSummary = customers
            .GroupBy(c => c.Status)
            .OrderBy(group => group.Key)
            .Select(group => (group.Key, group.Count()))
            .ToList();

        return Task.CompletedTask;
    }

    private void Redistribute(int contactId)
    {
        NavigationManager.NavigateTo($"/db/distribution/assign/{contactId}");
    }

    private async Task RecallAsync(int contactId)
    {
        if (_recallInProgress.Contains(contactId))
        {
            return;
        }

        _recallInProgress.Add(contactId);

        try
        {
            await DbDataService.RecallDbAsync(contactId);
            await RefreshAsync();
        }
        catch (Exception ex)
        {
            SetError("DB 회수에 실패했습니다. 잠시 후 다시 시도해주세요.");
            Console.WriteLine($"[{nameof(DbDistributionStatusPage)}] Recall failed: {ex}");
        }
        finally
        {
            _recallInProgress.Remove(contactId);
        }
    }
}
