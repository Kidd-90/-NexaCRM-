@namespace NexaCRM.Pages.Components.Layout
@inherits LayoutComponentBase
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="nexa-app-shell">
    <aside class="nexa-app-shell__sidebar @(mobileNavOpen ? "is-open" : string.Empty)">
        <div class="nexa-app-shell__brand">
            <span class="nexa-app-shell__logo">NC</span>
            <span class="nexa-app-shell__title">NexaCRM</span>
        </div>
        <nav class="nexa-app-shell__nav" aria-label="Primary navigation">
            @foreach (var link in NavigationLinks)
            {
                <a class="nexa-app-shell__nav-link @(IsActive(link.Href) ? "is-active" : string.Empty)"
                   href="@(!string.IsNullOrEmpty(link.Href) ? link.Href : "#")"
                   @onclick="() => HandleNavigationAsync(link.Href)">
                    <span aria-hidden="true" class="nexa-app-shell__nav-icon">@link.Icon</span>
                    <span class="nexa-app-shell__nav-text">@link.Title</span>
                </a>
            }
        </nav>
    </aside>

    <div class="nexa-app-shell__content">
        <header class="nexa-app-shell__header">
            <div class="nexa-app-shell__header-leading">
                <button class="nexa-app-shell__menu-toggle" type="button" aria-label="Toggle navigation" @onclick="ToggleMobileNav">
                    <span class="nexa-app-shell__hamburger"></span>
                </button>
                <div class="nexa-app-shell__breadcrumbs">
                    <span class="nexa-app-shell__breadcrumbs-label">Workspace</span>
                    <span class="nexa-app-shell__breadcrumbs-value">@CurrentPageTitle</span>
                </div>
            </div>
            <div class="nexa-app-shell__header-actions">
                <button class="nexa-app-shell__theme-toggle" type="button" @onclick="ToggleThemeAsync" aria-label="Toggle theme">
                    @if (isDarkMode)
                    {
                        <span>üåô</span>
                    }
                    else
                    {
                        <span>üåû</span>
                    }
                </button>
                <button class="nexa-app-shell__primary" type="button">New record</button>
            </div>
        </header>

        <main class="nexa-app-shell__main">
            @Body
        </main>
    </div>

    @if (mobileNavOpen)
    {
        <button class="nexa-app-shell__overlay" type="button" aria-label="Close navigation" @onclick="CloseMobileNav"></button>
    }
</div>

@code {
    private IJSObjectReference? _layoutModule;
    private bool mobileNavOpen;
    private bool isDarkMode;

    private static readonly NavigationLink[] NavigationLinks =
    {
        new("Overview", "üè†", "/"),
        new("Contacts", "üë•", null),
        new("Analytics", "üìä", null)
    };

    private string CurrentPageTitle
    {
        get
        {
            var relative = Navigation.ToBaseRelativePath(Navigation.Uri);
            if (string.IsNullOrEmpty(relative))
            {
                return "Overview";
            }

            foreach (var link in NavigationLinks)
            {
                if (string.Equals(Navigation.ToBaseRelativePath(link.Href), relative, StringComparison.OrdinalIgnoreCase))
                {
                    return link.Title;
                }
            }

            return "Workspace";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _layoutModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/NexaCRM.Pages/js/layout.js");
        await _layoutModule.InvokeVoidAsync("initializeShell");
        isDarkMode = await _layoutModule.InvokeAsync<bool>("isDarkMode");
        StateHasChanged();
    }

    private bool IsActive(string? href)
    {
        if (string.IsNullOrEmpty(href))
        {
            return false;
        }

        var current = Navigation.ToBaseRelativePath(Navigation.Uri);
        var target = Navigation.ToBaseRelativePath(href);
        return string.Equals(current, target, StringComparison.OrdinalIgnoreCase);
    }

    private async Task HandleNavigationAsync(string? href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return;
        }

        CloseMobileNav();
        if (href.StartsWith("http", StringComparison.OrdinalIgnoreCase))
        {
            await JSRuntime.InvokeVoidAsync("open", href, "_blank");
            return;
        }

        Navigation.NavigateTo(href);
    }

    private void ToggleMobileNav()
    {
        mobileNavOpen = !mobileNavOpen;
    }

    private void CloseMobileNav()
    {
        mobileNavOpen = false;
    }

    private async Task ToggleThemeAsync()
    {
        if (_layoutModule is null)
        {
            _layoutModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/NexaCRM.Pages/js/layout.js");
        }

        isDarkMode = await _layoutModule.InvokeAsync<bool>("toggleTheme");
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_layoutModule is not null)
        {
            try
            {
                await _layoutModule.DisposeAsync();
            }
            catch
            {
                // ignored
            }
        }
    }

    private sealed record NavigationLink(string Title, string Icon, string? Href);
}
