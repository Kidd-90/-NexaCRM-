@namespace NexaCRM.Pages.Components.Layout
@inherits LayoutComponentBase
@implements IAsyncDisposable
@using System
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="themed-body flex h-screen w-full overflow-hidden">
    <!-- Primary Icon Navigation -->
    <PrimaryNavRail Sections="PrimaryNavOrder"
                    ActiveSection="activePrimaryNav"
                    Navigation="PrimaryNavigation"
                    OnSectionSelected="HandlePrimaryNavSelection" />

    <!-- Secondary Detail Navigation -->
    <SecondaryNavPanel IsOpen="isDetailNavOpen"
                       ActiveSection="activePrimaryNav"
                       ActiveSectionLabel="ActivePrimaryNavLabel"
                       Navigation="PrimaryNavigation" />

    <!-- Main Content Area -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Header -->
        <header class="themed-surface-card flex-shrink-0 h-16 border-b border-[var(--border-color)] flex items-center justify-between px-6">
            <div class="flex items-center space-x-4">
                <button type="button" @onclick="ToggleDetailNav" class="p-2 rounded-full hover:bg-[var(--primary-bg)]" aria-label="Toggle detail navigation">
                    <svg class="w-6 h-6 themed-text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
                </button>
                <div class="themed-text-secondary text-sm">
                    <span class="font-semibold themed-text-primary">@ActivePrimaryNavLabel</span> / @ActiveSecondaryNavLabel
                </div>
            </div>
            <div class="flex items-center space-x-5">
                <button type="button" class="p-2 rounded-full hover:bg-[var(--primary-bg)] relative" aria-label="Notifications">
                    <svg class="w-6 h-6 themed-text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6 6 0 10-12 0v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path></svg>
                    <span class="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full bg-red-500 border-2 border-[var(--surface-bg)]" aria-hidden="true"></span>
                </button>
                <button type="button" class="p-2 rounded-full hover:bg-[var(--primary-bg)]" @onclick="ToggleThemeAsync" aria-label="Toggle theme">
                    @if (isDarkMode)
                    {
                        <span role="img" aria-hidden="true">üåû</span>
                    }
                    else
                    {
                        <span role="img" aria-hidden="true">üåô</span>
                    }
                </button>
                <div class="flex items-center space-x-3">
                    <img class="h-9 w-9 rounded-full" src="https://placehold.co/100x100/E2E8F0/4A5568?text=U" alt="User profile" />
                    <div>
                        <div class="text-sm font-semibold themed-text-primary">Jane Doe</div>
                        <div class="text-xs themed-text-muted">Stellar Inc.</div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Page Body -->
        <main class="flex-1 overflow-y-auto p-6 md:p-8">
            @Body
        </main>
    </div>
</div>

@code {
    private static readonly IReadOnlyList<PrimaryNavSection> PrimaryNavOrder = new[]
    {
        PrimaryNavSection.Dashboard,
        PrimaryNavSection.Deals,
        PrimaryNavSection.Leads,
        PrimaryNavSection.Settings
    };

    private static readonly IReadOnlyDictionary<PrimaryNavSection, PrimaryNavConfig> PrimaryNavigation = new Dictionary<PrimaryNavSection, PrimaryNavConfig>
    {
        [PrimaryNavSection.Dashboard] = new(
            "Dashboard",
            new[]
            {
                new SecondaryNavLink("Overview", "/", NavLinkMatch.All),
                new SecondaryNavLink("Reports", "/reports", NavLinkMatch.Prefix),
                new SecondaryNavLink("Analytics", "/analytics", NavLinkMatch.Prefix)
            }),
        [PrimaryNavSection.Deals] = new(
            "Deals",
            new[]
            {
                new SecondaryNavLink("Pipeline", "/deals", NavLinkMatch.Prefix),
                new SecondaryNavLink("List View", "/deals/list", NavLinkMatch.Prefix),
                new SecondaryNavLink("Forecast", "/deals/forecast", NavLinkMatch.Prefix)
            }),
        [PrimaryNavSection.Leads] = new(
            "Leads",
            new[]
            {
                new SecondaryNavLink("Inbox", "/leads", NavLinkMatch.Prefix),
                new SecondaryNavLink("Sources", "/leads/sources", NavLinkMatch.Prefix),
                new SecondaryNavLink("Advanced DB", "/db/advanced", NavLinkMatch.Prefix),
                new SecondaryNavLink("All DB", "/db/customer/all", NavLinkMatch.Prefix),
                new SecondaryNavLink("My DB", "/db/customer/my-list", NavLinkMatch.Prefix),
                new SecondaryNavLink("New DB", "/db/customer/new", NavLinkMatch.Prefix),
                new SecondaryNavLink("Newly Assigned", "/db/distribution/newly-assigned", NavLinkMatch.Prefix),
                new SecondaryNavLink("Starred DB", "/db/customer/starred", NavLinkMatch.Prefix),
                new SecondaryNavLink("Assigned Today", "/db/customer/assigned-today", NavLinkMatch.Prefix),
                new SecondaryNavLink("Unassigned", "/db/distribution/unassigned", NavLinkMatch.Prefix),
                new SecondaryNavLink("Team Status", "/db/customer/team-status", NavLinkMatch.Prefix),
                new SecondaryNavLink("Distribution Status", "/db/distribution/status", NavLinkMatch.Prefix)
            }),
        [PrimaryNavSection.Settings] = new(
            "Settings",
            new[]
            {
                new SecondaryNavLink("Profile", "/settings/profile", NavLinkMatch.Prefix),
                new SecondaryNavLink("Billing", "/settings/billing", NavLinkMatch.Prefix),
                new SecondaryNavLink("Integrations", "/settings/integrations", NavLinkMatch.Prefix)
            })
    };

    private IJSObjectReference? _layoutModule;
    private bool isDetailNavOpen = true;
    private bool isDarkMode;
    private PrimaryNavSection activePrimaryNav = PrimaryNavSection.Dashboard;
    private string activeSecondaryNavTitle = PrimaryNavigation[PrimaryNavSection.Dashboard].Links[0].Title;

    private string ActivePrimaryNavLabel => PrimaryNavigation.TryGetValue(activePrimaryNav, out var config) ? config.Label : activePrimaryNav.ToString();

    private string ActiveSecondaryNavLabel => activeSecondaryNavTitle;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Navigation.LocationChanged += OnLocationChanged;
        
        try
        {
            UpdateActiveNavFromUri();
        }
        catch (Exception ex)
        {
            // Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù Ïãú Í∏∞Î≥∏Í∞í Ïú†ÏßÄ
            Console.WriteLine($"Error updating navigation from URI: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        try
        {
            _layoutModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/NexaCRM.Pages/js/layout.js");
            await _layoutModule.InvokeVoidAsync("initializeShell");
            isDarkMode = await _layoutModule.InvokeAsync<bool>("isDarkMode");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // JS Î™®Îìà Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ ÌÖåÎßà Ïú†ÏßÄ
            Console.WriteLine($"Error initializing layout module: {ex.Message}");
        }
    }

    private void ToggleDetailNav()
    {
        isDetailNavOpen = !isDetailNavOpen;
    }

    private void HandlePrimaryNavSelection(PrimaryNavSection nav)
    {
        SetActivePrimaryNav(nav);

        if (PrimaryNavigation.TryGetValue(nav, out var config) && config.Links.Count > 0)
        {
            activeSecondaryNavTitle = config.Links[0].Title;
            var destination = config.Links[0].Href;
            if (!string.IsNullOrWhiteSpace(destination))
            {
                Navigation.NavigateTo(destination);
            }
        }
    }

    private void SetActivePrimaryNav(PrimaryNavSection nav)
    {
        activePrimaryNav = nav;
        if (!isDetailNavOpen)
        {
            isDetailNavOpen = true;
        }
    }

    private async Task ToggleThemeAsync()
    {
        if (_layoutModule is null)
        {
            _layoutModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/NexaCRM.Pages/js/layout.js");
        }

        isDarkMode = await _layoutModule.InvokeAsync<bool>("toggleTheme");
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            UpdateActiveNavFromUri();
            _ = InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling location change: {ex.Message}");
        }
    }

    private void UpdateActiveNavFromUri()
    {
        try
        {
            var current = NormalizeRelativePath(Navigation.Uri);

            foreach (var pair in PrimaryNavigation)
            {
                foreach (var link in pair.Value.Links)
                {
                    if (string.IsNullOrWhiteSpace(link.Href))
                    {
                        continue;
                    }

                    var linkRelative = NormalizeRelativePath(link.Href);
                    var isMatch = link.Match switch
                    {
                        NavLinkMatch.All => string.Equals(current, linkRelative, StringComparison.OrdinalIgnoreCase),
                        NavLinkMatch.Prefix => current.StartsWith(linkRelative, StringComparison.OrdinalIgnoreCase),
                        _ => false
                    };

                    if (!isMatch)
                    {
                        continue;
                    }

                    activePrimaryNav = pair.Key;
                    activeSecondaryNavTitle = link.Title;
                    return;
                }
            }

            if (PrimaryNavigation.TryGetValue(PrimaryNavSection.Dashboard, out var fallback) && fallback.Links.Count > 0)
            {
                activePrimaryNav = PrimaryNavSection.Dashboard;
                activeSecondaryNavTitle = fallback.Links[0].Title;
            }
        }
        catch (Exception ex)
        {
            // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® Ïãú Í∏∞Î≥∏Í∞í Ïú†ÏßÄ
            Console.WriteLine($"Error in UpdateActiveNavFromUri: {ex.Message}");
        }
    }

    private string NormalizeRelativePath(string uri)
    {
        if (string.IsNullOrWhiteSpace(uri))
        {
            return string.Empty;
        }

        try
        {
            string absoluteUriString;
            
            // Ï†àÎåÄ URIÏù∏ÏßÄ ÌôïÏù∏
            if (Uri.TryCreate(uri, UriKind.Absolute, out var absoluteUri))
            {
                // file:// Îì± base URIÏôÄ Ìò∏ÌôòÎêòÏßÄ ÏïäÎäî Ïä§ÌÇ¥ÏùÄ ÏõêÎ≥∏ URI Î∞òÌôò
                if (!absoluteUri.Scheme.Equals("http", StringComparison.OrdinalIgnoreCase) &&
                    !absoluteUri.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase))
                {
                    return uri.TrimStart('/');
                }
                
                absoluteUriString = absoluteUri.ToString();
            }
            else
            {
                // ÏÉÅÎåÄ Í≤ΩÎ°úÎ•º Ï†àÎåÄ URIÎ°ú Î≥ÄÌôò
                absoluteUriString = Navigation.ToAbsoluteUri(uri).ToString();
            }

            var relative = Navigation.ToBaseRelativePath(absoluteUriString);
            var questionIndex = relative.IndexOf('?', StringComparison.Ordinal);
            if (questionIndex >= 0)
            {
                relative = relative[..questionIndex];
            }

            var hashIndex = relative.IndexOf('#');
            if (hashIndex >= 0)
            {
                relative = relative[..hashIndex];
            }

            return relative.Trim('/');
        }
        catch (ArgumentException)
        {
            // URI Î≥ÄÌôò Ïã§Ìå® Ïãú ÏõêÎ≥∏ URIÎ•º Ï†ïÍ∑úÌôîÌïòÏó¨ Î∞òÌôò
            return uri.TrimStart('/').Split('?')[0].Split('#')[0];
        }
    }

    public async ValueTask DisposeAsync()
    {
        Navigation.LocationChanged -= OnLocationChanged;

        if (_layoutModule is not null)
        {
            try
            {
                await _layoutModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // The JS runtime is no longer available; safe to ignore during disposal.
            }
        }
    }

}
