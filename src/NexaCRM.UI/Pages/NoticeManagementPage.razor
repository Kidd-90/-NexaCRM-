@page "/notifications/announcements"
@using System.Globalization
@using System.Linq
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using NexaCRM.Services.Admin.Interfaces
@using NexaCRM.Services.Admin.Models.CustomerCenter
@inject INoticeService NoticeService
@inject ILogger<NoticeManagementPage> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<ResponsivePage class="common-page-container">
    <section class="notice-board">
        <header class="notice-board__header">
            <div class="notice-board__headline">
                <p class="notice-board__eyebrow">고객센터</p>
                <h1 class="notice-board__title">공지사항</h1>
                <p class="notice-board__description">
                    서비스 공지, 점검 일정, 기능 업데이트 소식을 한눈에 확인하세요.
                </p>
            </div>
            <div class="notice-board__actions">
                <div class="notice-board__search">
                    <input class="notice-board__search-input"
                           type="search"
                           placeholder="검색어를 입력하세요"
                           @bind="SearchTerm"
                           @bind:event="oninput" />
                </div>
                <AuthorizeView Roles="Admin,Manager">
                    <Authorized>
                        <button type="button" class="notice-board__add-button" @onclick="ShowAddNoticeForm">
                            <span class="icon">➕</span>
                            <span>공지사항 추가</span>
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </header>

        <div class="notice-board__filters">
            @foreach (var option in FilterOptions)
            {
                <button type="button"
                        class="notice-chip @(IsSelected(option.Category) ?"notice-chip--active" : string.Empty)"
                        @onclick="() => SetCategoryFilter(option.Category)">
                    @option.Label
                </button>
            }
        </div>

        <div class="notice-board__layout">
            <div class="notice-board__list">
                @if (isLoading)
                {
                    <div class="notice-board__placeholder">
                        <span class="spinner"></span>
                        <span>공지사항을 불러오는 중입니다.</span>
                    </div>
                }
                else if (!string.IsNullOrEmpty(loadError))
                {
                    <div class="notice-board__placeholder notice-board__placeholder--error">
                        <strong>오류가 발생했습니다.</strong>
                        <p>@loadError</p>
                    </div>
                }
                else if (!PagedNotices.Any())
                {
                    <div class="notice-board__placeholder">
                        <strong>등록된 공지사항이 없습니다.</strong>
                        <p>관리자가 새로운 공지를 등록하면 이곳에서 확인할 수 있습니다.</p>
                    </div>
                }
                else
                {
                    @foreach (var notice in PagedNotices)
                    {
                        <button type="button"
                                class="notice-list-item @(selectedNotice?.Id == notice.Id ?"is-active" : string.Empty)"
                                @onclick="() => SelectNotice(notice)">
                            <div class="notice-list-item__meta">
                                <span class="notice-chip notice-chip--category @GetCategoryClass(notice.Category)">
                                    @GetCategoryLabel(notice.Category)
                                </span>
                                <span class="notice-chip notice-chip--importance @GetImportanceClass(notice.Importance)">
                                    @GetImportanceLabel(notice.Importance)
                                </span>
                                @if (notice.IsPinned)
                                {
                                    <span class="notice-chip notice-chip--pinned">상단고정</span>
                                }
                            </div>
                            <div class="notice-list-item__title">@notice.Title</div>
                            <div class="notice-list-item__summary">@notice.Summary</div>
                            <time class="notice-list-item__date" datetime="@notice.PublishedAt.ToString("O")">
                                @notice.PublishedAt.ToLocalTime().ToString("yyyy.MM.dd", CultureInfo.CurrentCulture)
                            </time>
                        </button>
                    }
                }

                @if (!isLoading && string.IsNullOrEmpty(loadError) && FilteredNotices.Count > PageSize)
                {
                    <nav class="notice-board__pagination" aria-label="공지사항 페이지네이션">
                        <button type="button"
                                class="notice-page-button"
                                disabled="@(currentPage == 1)"
                                @onclick="PreviousPage">
                            이전
                        </button>
                        @for (var pageNumber = 1; pageNumber <= TotalPages; pageNumber++)
                        {
                            <button type="button"
                                    class="notice-page-button @(currentPage == pageNumber ?"notice-page-button--active" : string.Empty)"
                                    @onclick="() => GoToPage(pageNumber)">
                                @pageNumber
                            </button>
                        }
                        <button type="button"
                                class="notice-page-button"
                                disabled="@(currentPage == TotalPages)"
                                @onclick="NextPage">
                            다음
                        </button>
                    </nav>
                }
            </div>

            <aside class="notice-board__detail" aria-live="polite">
                @if (selectedNotice is null)
                {
                    <div class="notice-detail notice-detail--empty">
                        <strong>열람할 공지사항을 선택하세요.</strong>
                        <p>리스트에서 항목을 클릭하면 상세 내용을 확인할 수 있습니다.</p>
                    </div>
                }
                else
                {
                    <article class="notice-detail">
                        <header class="notice-detail__header">
                            <div class="notice-detail__chips">
                                <span class="notice-chip notice-chip--category @GetCategoryClass(selectedNotice.Category)">
                                    @GetCategoryLabel(selectedNotice.Category)
                                </span>
                                <span class="notice-chip notice-chip--importance @GetImportanceClass(selectedNotice.Importance)">
                                    @GetImportanceLabel(selectedNotice.Importance)
                                </span>
                                @if (selectedNotice.IsPinned)
                                {
                                    <span class="notice-chip notice-chip--pinned">상단고정</span>
                                }
                            </div>
                            <h2 class="notice-detail__title">@selectedNotice.Title</h2>
                            <div class="notice-detail__meta">
                                <time datetime="@selectedNotice.PublishedAt.ToString("O")">
                                    @selectedNotice.PublishedAt.ToLocalTime().ToString("yyyy년 M월 d일 (ddd)", CultureInfo.CurrentCulture)
                                </time>
                                @if (!string.IsNullOrWhiteSpace(selectedNotice.ReferenceUrl))
                                {
                                    <a class="notice-detail__link" href="@selectedNotice.ReferenceUrl" target="_blank" rel="noreferrer">상세 보기</a>
                                }
                            </div>
                        </header>
                        <div class="notice-detail__body">
                            @foreach (var paragraph in GetContentParagraphs(selectedNotice))
                            {
                                <p>@paragraph</p>
                            }
                        </div>
                    </article>
                }
            </aside>
        </div>
    </section>
</ResponsivePage>

@* 공지사항 추가/수정 모달 *@
@if (showNoticeForm)
{
    <div class="notice-modal-overlay" @onclick="CloseNoticeForm">
        <div class="notice-modal" @onclick:stopPropagation>
            <div class="notice-modal__header">
                <h2 class="notice-modal__title">@(isEditMode ? "공지사항 수정" : "공지사항 추가")</h2>
                <button type="button" class="notice-modal__close" @onclick="CloseNoticeForm" aria-label="닫기">✕</button>
            </div>

            <div class="notice-modal__body">
                @if (!string.IsNullOrEmpty(formError))
                {
                    <div class="notice-form__error">
                        <strong>오류</strong>
                        <p>@formError</p>
                    </div>
                }

                <div class="notice-form">
                    <div class="notice-form__field">
                        <label class="notice-form__label" for="notice-title">제목 *</label>
                        <input class="notice-form__input"
                               id="notice-title"
                               type="text"
                               placeholder="공지사항 제목을 입력하세요"
                               @bind="formNotice.Title"
                               maxlength="200" />
                    </div>

                    <div class="notice-form__field">
                        <label class="notice-form__label" for="notice-summary">요약</label>
                        <input class="notice-form__input"
                               id="notice-summary"
                               type="text"
                               placeholder="간단한 요약을 입력하세요"
                               @bind="formNotice.Summary"
                               maxlength="300" />
                    </div>

                    <div class="notice-form__field">
                        <label class="notice-form__label" for="notice-content">내용 *</label>
                        <textarea class="notice-form__textarea"
                                  id="notice-content"
                                  rows="8"
                                  placeholder="공지사항 내용을 입력하세요"
                                  @bind="formNotice.Content"></textarea>
                    </div>

                    <div class="notice-form__row">
                        <div class="notice-form__field">
                            <label class="notice-form__label" for="notice-category">카테고리 *</label>
                            <select class="notice-form__select" id="notice-category" @bind="formNotice.Category">
                                <option value="@NoticeCategory.General">공지</option>
                                <option value="@NoticeCategory.Update">업데이트</option>
                                <option value="@NoticeCategory.Maintenance">점검</option>
                                <option value="@NoticeCategory.Security">보안</option>
                                <option value="@NoticeCategory.Policy">약관</option>
                                <option value="@NoticeCategory.Promotion">프로모션</option>
                            </select>
                        </div>

                        <div class="notice-form__field">
                            <label class="notice-form__label" for="notice-importance">중요도 *</label>
                            <select class="notice-form__select" id="notice-importance" @bind="formNotice.Importance">
                                <option value="@NoticeImportance.Normal">일반</option>
                                <option value="@NoticeImportance.Highlight">중요</option>
                                <option value="@NoticeImportance.Critical">긴급</option>
                            </select>
                        </div>
                    </div>

                    <div class="notice-form__field">
                        <label class="notice-form__label" for="notice-reference-url">참고 링크</label>
                        <input class="notice-form__input"
                               id="notice-reference-url"
                               type="url"
                               placeholder="https://example.com"
                               @bind="formNotice.ReferenceUrl" />
                    </div>

                    <div class="notice-form__field">
                        <label class="notice-form__checkbox">
                            <input type="checkbox" @bind="formNotice.IsPinned" />
                            <span>상단 고정</span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="notice-modal__footer">
                <button type="button" class="notice-button notice-button--secondary" @onclick="CloseNoticeForm">
                    취소
                </button>
                <button type="button" class="notice-button notice-button--primary" @onclick="SaveNotice" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-small"></span>
                        <span>저장 중...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "수정" : "등록")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private static readonly IReadOnlyList<(NoticeCategory? Category, string Label)> FilterOptions = new List<(NoticeCategory?, string)>
    {
        (null, "전체"),
        (NoticeCategory.General, "공지"),
        (NoticeCategory.Update, "업데이트"),
        (NoticeCategory.Maintenance, "점검"),
        (NoticeCategory.Security, "보안"),
        (NoticeCategory.Policy, "약관"),
        (NoticeCategory.Promotion, "프로모션")
    };

    private static readonly IReadOnlyDictionary<NoticeCategory, string> CategoryLabels = new Dictionary<NoticeCategory, string>
    {
        [NoticeCategory.General] = "공지",
        [NoticeCategory.Update] = "업데이트",
        [NoticeCategory.Maintenance] = "점검",
        [NoticeCategory.Security] = "보안",
        [NoticeCategory.Policy] = "약관",
        [NoticeCategory.Promotion] = "프로모션"
    };

    private static readonly IReadOnlyDictionary<NoticeImportance, string> ImportanceLabels = new Dictionary<NoticeImportance, string>
    {
        [NoticeImportance.Normal] = "일반",
        [NoticeImportance.Highlight] = "중요",
        [NoticeImportance.Critical] = "긴급"
    };

    private readonly List<Notice> _allNotices = new();
    private readonly List<Notice> _filteredNotices = new();
    private bool _filtersDirty = true;

    private Notice? selectedNotice;
    private NoticeCategory? selectedCategory;
    private bool isLoading = true;
    private string? loadError;
    private int currentPage = 1;
    private const int PageSize = 8;
    private string searchTerm = string.Empty;

    // Form state
    private bool showNoticeForm = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string? formError;
    private NoticeFormModel formNotice = new NoticeFormModel();

    // Form DTO class with mutable properties
    private class NoticeFormModel
    {
        public long Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Summary { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public NoticeCategory Category { get; set; } = NoticeCategory.General;
        public NoticeImportance Importance { get; set; } = NoticeImportance.Normal;
        public bool IsPinned { get; set; }
        public DateTimeOffset PublishedAt { get; set; } = DateTimeOffset.Now;
        public string? ReferenceUrl { get; set; }
        public Guid? TenantId { get; set; }

        public Notice ToNotice()
        {
            return new Notice
            {
                Id = Id,
                Title = Title,
                Summary = Summary,
                Content = Content,
                Category = Category,
                Importance = Importance,
                IsPinned = IsPinned,
                PublishedAt = PublishedAt,
                ReferenceUrl = ReferenceUrl,
                TenantId = TenantId
            };
        }

        public static NoticeFormModel FromNotice(Notice notice)
        {
            return new NoticeFormModel
            {
                Id = notice.Id,
                Title = notice.Title,
                Summary = notice.Summary,
                Content = notice.Content,
                Category = notice.Category,
                Importance = notice.Importance,
                IsPinned = notice.IsPinned,
                PublishedAt = notice.PublishedAt,
                ReferenceUrl = notice.ReferenceUrl,
                TenantId = notice.TenantId
            };
        }
    }

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm == value)
            {
                return;
            }

            searchTerm = value ?? string.Empty;
            currentPage = 1;
            InvalidateFilters();
            EnsureSelection();
        }
    }

    private IReadOnlyList<Notice> FilteredNotices
    {
        get
        {
            if (_filtersDirty)
            {
                _filteredNotices.Clear();

                IEnumerable<Notice> query = _allNotices;

                if (selectedCategory.HasValue)
                {
                    query = query.Where(n => n.Category == selectedCategory.Value);
                }

                if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    query = query.Where(n =>
                        n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        n.Summary.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        n.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
                }

                var ordered = query
                    .OrderByDescending(n => n.IsPinned)
                    .ThenByDescending(n => n.PublishedAt)
                    .ToList();

                _filteredNotices.AddRange(ordered);
                _filtersDirty = false;
            }

            return _filteredNotices;
        }
    }

    private IReadOnlyList<Notice> PagedNotices => FilteredNotices
        .Skip((currentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(FilteredNotices.Count / (double)PageSize));

    protected override async Task OnInitializedAsync()
    {
        await LoadNotices();
    }

    private async Task LoadNotices()
    {
        try
        {
            isLoading = true;
            var notices = await NoticeService.GetNoticesAsync();
            _allNotices.Clear();
            _allNotices.AddRange(notices);
            loadError = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load notices.");
            loadError = "공지사항을 불러오지 못했습니다. 잠시 후 다시 시도해주세요.";
        }
        finally
        {
            isLoading = false;
            InvalidateFilters();
            EnsureSelection();
        }
    }

    private void ShowAddNoticeForm()
    {
        isEditMode = false;
        formNotice = new NoticeFormModel
        {
            Category = NoticeCategory.General,
            Importance = NoticeImportance.Normal,
            IsPinned = false,
            PublishedAt = DateTimeOffset.Now
        };
        formError = null;
        showNoticeForm = true;
    }

    private void ShowEditNoticeForm(Notice notice)
    {
        isEditMode = true;
        formNotice = NoticeFormModel.FromNotice(notice);
        formError = null;
        showNoticeForm = true;
    }

    private void CloseNoticeForm()
    {
        showNoticeForm = false;
        formError = null;
        formNotice = new NoticeFormModel();
    }

    private async Task SaveNotice()
    {
        if (string.IsNullOrWhiteSpace(formNotice.Title))
        {
            formError = "제목을 입력해주세요.";
            return;
        }

        if (string.IsNullOrWhiteSpace(formNotice.Content))
        {
            formError = "내용을 입력해주세요.";
            return;
        }

        try
        {
            isSaving = true;
            formError = null;

            var notice = formNotice.ToNotice();

            if (isEditMode)
            {
                await NoticeService.UpdateNoticeAsync(notice);
                Logger.LogInformation("Notice updated: {NoticeId}", notice.Id);
            }
            else
            {
                await NoticeService.CreateNoticeAsync(notice);
                Logger.LogInformation("Notice created: {NoticeTitle}", notice.Title);
            }

            // 목록 새로고침
            await LoadNotices();
            CloseNoticeForm();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save notice. Title={Title}, Error={Message}", formNotice.Title, ex.Message);
            formError = $"공지사항을 저장하지 못했습니다: {ex.Message}";
            
            // InnerException이 있으면 추가 정보 표시
            if (ex.InnerException != null)
            {
                Logger.LogError("Inner exception: {InnerMessage}", ex.InnerException.Message);
                formError += $" (상세: {ex.InnerException.Message})";
            }
        }
        finally
        {
            isSaving = false;
        }
    }

    private void SetCategoryFilter(NoticeCategory? category)
    {
        if (selectedCategory == category)
        {
            return;
        }

        selectedCategory = category;
        currentPage = 1;
        InvalidateFilters();
        EnsureSelection();
    }

    private bool IsSelected(NoticeCategory? category) => selectedCategory == category;

    private void SelectNotice(Notice notice)
    {
        if (notice is null)
        {
            return;
        }

        selectedNotice = notice;
    }

    private void PreviousPage()
    {
        if (currentPage <= 1)
        {
            return;
        }

        currentPage--;
        EnsureSelection();
    }

    private void NextPage()
    {
        if (currentPage >= TotalPages)
        {
            return;
        }

        currentPage++;
        EnsureSelection();
    }

    private void GoToPage(int page)
    {
        if (page == currentPage)
        {
            return;
        }

        currentPage = Math.Clamp(page, 1, TotalPages);
        EnsureSelection();
    }

    private void EnsureSelection()
    {
        var filtered = FilteredNotices;
        if (filtered.Count == 0)
        {
            selectedNotice = null;
            currentPage = 1;
            return;
        }

        var maxPage = Math.Max(1, (int)Math.Ceiling(filtered.Count / (double)PageSize));
        if (currentPage > maxPage)
        {
            currentPage = maxPage;
        }

        if (selectedNotice is not null && filtered.Any(n => n.Id == selectedNotice.Id))
        {
            return;
        }

        selectedNotice = filtered
            .Skip((currentPage - 1) * PageSize)
            .FirstOrDefault()
            ?? filtered.First();
    }

    private static IEnumerable<string> GetContentParagraphs(Notice notice)
    {
        if (string.IsNullOrWhiteSpace(notice.Content))
        {
            return Array.Empty<string>();
        }

        return notice.Content
            .Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries)
            .Select(p => p.Trim());
    }

    private static string GetCategoryLabel(NoticeCategory category)
    {
        return CategoryLabels.TryGetValue(category, out var label)
            ? label
            : category.ToString();
    }

    private static string GetImportanceLabel(NoticeImportance importance)
    {
        return ImportanceLabels.TryGetValue(importance, out var label)
            ? label
            : importance.ToString();
    }

    private static string GetCategoryClass(NoticeCategory category) => category switch
    {
        NoticeCategory.Update => "is-update",
        NoticeCategory.Maintenance => "is-maintenance",
        NoticeCategory.Security => "is-security",
        NoticeCategory.Policy => "is-policy",
        NoticeCategory.Promotion => "is-promotion",
        _ => string.Empty
    };

    private static string GetImportanceClass(NoticeImportance importance) => importance switch
    {
        NoticeImportance.Highlight => "is-highlight",
        NoticeImportance.Critical => "is-critical",
        _ => string.Empty
    };

    private void InvalidateFilters() => _filtersDirty = true;
}
