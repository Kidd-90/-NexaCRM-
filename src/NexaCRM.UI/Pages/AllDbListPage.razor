@page "/db/customer/all"
@attribute [Authorize(Roles = "Manager")]

@using Microsoft.AspNetCore.Components.Authorization
@using NexaCRM.Services.Admin.Models.Db
@using NexaCRM.Services.Admin.Interfaces
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@inject IDbDataService DbDataService
@inject IStringLocalizer<AllDbListPage> Localizer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<DbStatus> StatusLocalizer

<div class="container-fluid mt-4 all-db-list-page">
    <h1 class="mb-3">@Localizer["Title"]</h1>

    <div class="desktop-filter">
        <div class="filter-card shadow-sm">
            <div class="filter-row">
                <div class="filter-item flex-grow-1">
                    <label class="filter-label">@GetLocalizedString("DetailedSearchLabel", "상세검색")</label>
                    <div class="filter-input-group">
                        <select class="form-select filter-select" value="@selectedSearchField" @onchange="OnSearchFieldChanged">
                            <option value="@DefaultSearchField">@GetLocalizedString("SearchFieldCustomerName", "이름")</option>
                            <option value="ContactNumber">@GetLocalizedString("SearchFieldContactNumber", "연락처")</option>
                            <option value="AssignedTo">@GetLocalizedString("SearchFieldAssignedTo", "담당자")</option>
                            <option value="Assigner">@GetLocalizedString("SearchFieldAssigner", "전달자")</option>
                        </select>
                        <input type="text"
                               class="form-control"
                               placeholder='@Localizer["Search"]'
                               value="@searchTerm"
                               @oninput="OnFilterInput" />
                    </div>
                </div>
                <div class="filter-item group-item">
                    <label class="filter-label">@GetLocalizedString("GroupFilterLabel", "DB 그룹")</label>
                    <select class="form-select" value="@selectedGroup" @onchange="OnGroupFilterChanged">
                        <option value="">@Localizer["AllGroups"]</option>
                        @foreach (var group in groupOptions)
                        {
                            <option value="@group">@group</option>
                        }
                    </select>
                </div>
                <div class="filter-item action-item">
                    <label class="filter-label filter-label-placeholder">.</label>
                    <button type="button" class="btn btn-primary w-100" @onclick="ApplyFilters">@GetLocalizedString("ApplyFiltersButton", "조회")</button>
                </div>
            </div>
            <div class="filter-row filter-row-dates">
                <div class="filter-item flex-grow-1">
                    <label class="filter-label">@GetLocalizedString("DateRangeLabel", "조회기간")</label>
                    <div class="date-range-inputs">
                        <input type="date" class="form-control" value="@GetDateInputValue(filterStartDate)" @onchange="OnStartDateChanged" />
                        <span class="date-divider">~</span>
                        <input type="date" class="form-control" value="@GetDateInputValue(filterEndDate)" @onchange="OnEndDateChanged" />
                    </div>
                    <div class="quick-filter-buttons">
                        <button type="button" class="quick-filter-button @GetQuickFilterClass("Today")" @onclick="@(() => SetQuickRange("Today"))">@GetLocalizedString("QuickFilterToday", "오늘")</button>
                        <button type="button" class="quick-filter-button @GetQuickFilterClass("7Days")" @onclick="@(() => SetQuickRange("7Days"))">@GetLocalizedString("QuickFilter7Days", "7일")</button>
                        <button type="button" class="quick-filter-button @GetQuickFilterClass("1Month")" @onclick="@(() => SetQuickRange("1Month"))">@GetLocalizedString("QuickFilter1Month", "1개월")</button>
                        <button type="button" class="quick-filter-button @GetQuickFilterClass("3Months")" @onclick="@(() => SetQuickRange("3Months"))">@GetLocalizedString("QuickFilter3Months", "3개월")</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="results-toolbar">
            <div class="results-count">
                @GetLocalizedString("TotalLabel", "TOTAL")
                <span class="count-number">@totalCount</span>
            </div>
            <div class="results-actions">
                <button type="button" class="btn btn-outline-secondary" @onclick="ClearFilters">@GetLocalizedString("ResetFiltersButton", "필터 초기화")</button>
            </div>
        </div>
    </div>

    <div class="mobile-filter">
        <div class="row g-2">
            <div class="col-12">
                <input type="text" class="form-control w-100" placeholder='@Localizer["Search"]' value="@searchTerm" @oninput="OnFilterInput" />
            </div>
            <div class="col-12">
                <select class="form-select w-100" value="@selectedGroup" @onchange="OnGroupFilterChanged">
                    <option value="">@Localizer["AllGroups"]</option>
                    @foreach (var group in groupOptions)
                    {
                        <option value="@group">@group</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @if (customers == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive desktop-table-view">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>@Localizer["CustomerName"]</th>
                        <th>@Localizer["Contact"]</th>
                        <th>@Localizer["Group"]</th>
                        <th>@Localizer["AssignedTo"]</th>
                        <th>@Localizer["AssignedDate"]</th>
                        <th>@Localizer["Status"]</th>
                        <th>@Localizer["LastContact"]</th>
                        <th>@Localizer["Starred"]</th>
                        <th>@Localizer["Assigner"]</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredCustomers != null && filteredCustomers.Count > 0)
                    {
                        foreach (var customer in filteredCustomers)
                        {
                            <tr @onclick="() => NavigateToContact(customer.ContactId)">
                                <td>@customer.CustomerName</td>
                                <td>@customer.ContactNumber</td>
                                <td>@customer.Group</td>
                                <td>@customer.AssignedTo</td>
                                <td>@customer.AssignedDate.ToShortDateString()</td>
                                <td class="@GetStatusClass(customer.Status)">@StatusLocalizer[customer.Status.ToString()]</td>
                                <td>@customer.LastContactDate.ToShortDateString()</td>
                                <td>@(customer.IsStarred ? "★" : string.Empty)</td>
                                <td>@customer.Assigner</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center text-muted py-4">@GetLocalizedString("EmptyStateMessage", "조건에 맞는 DB가 없습니다.")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mobile-card-view">
            @if (filteredCustomers != null && filteredCustomers.Count > 0)
            {
                foreach (var customer in filteredCustomers)
                {
                    <div class="customer-card" @onclick="() => NavigateToContact(customer.ContactId)">
                        <h5>
                            @customer.CustomerName
                            @if (customer.IsStarred)
                            {
                                <span class="star-badge">★</span>
                            }
                        </h5>
                        <div class="card-info-row">
                            <span class="card-info-label">@Localizer["Contact"]</span>
                            <span class="card-info-value">@customer.ContactNumber</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">@Localizer["Group"]</span>
                            <span class="card-info-value">@customer.Group</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">@Localizer["AssignedTo"]</span>
                            <span class="card-info-value">@customer.AssignedTo</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">@Localizer["Status"]</span>
                            <span class="card-info-value @GetStatusClass(customer.Status)">@StatusLocalizer[customer.Status.ToString()]</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">@Localizer["LastContact"]</span>
                            <span class="card-info-value">@customer.LastContactDate.ToShortDateString()</span>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state-card">@GetLocalizedString("EmptyStateMessage", "조건에 맞는 DB가 없습니다.")</div>
            }
        </div>
    }
</div>

@code {
    private const string DefaultSearchField = "CustomerName";

    private List<DbCustomer>? customers;
    private List<DbCustomer>? filteredCustomers;
    private IEnumerable<string> groupOptions = Enumerable.Empty<string>();
    private string searchTerm = string.Empty;
    private string selectedGroup = string.Empty;
    private string selectedSearchField = DefaultSearchField;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private string activeQuickRange = string.Empty;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customers = (await DbDataService.GetAllDbListAsync())?.ToList();

            if (customers != null)
            {
                Console.WriteLine($"[AllDbListPage] Loaded {customers.Count} customers from database");
                
                groupOptions = customers
                    .Select(c => c.Group)
                    .Where(g => !string.IsNullOrWhiteSpace(g))
                    .Distinct()
                    .OrderBy(g => g)
                    .Cast<string>();

                Console.WriteLine($"[AllDbListPage] Found {groupOptions.Count()} groups");
            }
            else
            {
                Console.WriteLine("[AllDbListPage] No customers loaded - result was null");
            }

            FilterCustomers();
            Console.WriteLine($"[AllDbListPage] After filtering: {filteredCustomers?.Count ?? 0} customers");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AllDbListPage] Error loading customers: {ex.Message}");
            Console.WriteLine($"[AllDbListPage] Stack trace: {ex.StackTrace}");
        }
    }

    private void OnFilterInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterCustomers();
    }

    private void OnGroupFilterChanged(ChangeEventArgs e)
    {
        selectedGroup = e.Value?.ToString() ?? string.Empty;
        FilterCustomers();
    }

    private void OnSearchFieldChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        selectedSearchField = string.IsNullOrWhiteSpace(value) ? DefaultSearchField : value;
        FilterCustomers();
    }

    private void ApplyFilters()
    {
        FilterCustomers();
    }

    private void OnStartDateChanged(ChangeEventArgs e)
    {
        filterStartDate = ParseDate(e.Value?.ToString());
        ClearQuickRangeSelection();
        EnsureValidDateRange();
        FilterCustomers();
    }

    private void OnEndDateChanged(ChangeEventArgs e)
    {
        filterEndDate = ParseDate(e.Value?.ToString());
        ClearQuickRangeSelection();
        EnsureValidDateRange();
        FilterCustomers();
    }

    private void SetQuickRange(string rangeKey)
    {
        var today = DateTime.Today;

        activeQuickRange = rangeKey;

        switch (rangeKey)
        {
            case "Today":
                filterStartDate = today;
                filterEndDate = today;
                break;
            case "7Days":
                filterStartDate = today.AddDays(-6);
                filterEndDate = today;
                break;
            case "1Month":
                filterStartDate = today.AddMonths(-1);
                filterEndDate = today;
                break;
            case "3Months":
                filterStartDate = today.AddMonths(-3);
                filterEndDate = today;
                break;
            default:
                filterStartDate = null;
                filterEndDate = null;
                activeQuickRange = string.Empty;
                break;
        }

        EnsureValidDateRange();
        FilterCustomers();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedGroup = string.Empty;
        selectedSearchField = DefaultSearchField;
        filterStartDate = null;
        filterEndDate = null;
        activeQuickRange = string.Empty;
        FilterCustomers();
    }

    private void FilterCustomers()
    {
        if (customers == null)
        {
            filteredCustomers = null;
            totalCount = 0;
            return;
        }

        var results = customers
            .Where(MatchesSearchTerm)
            .Where(MatchesGroup)
            .Where(MatchesDateRange)
            .ToList();

        filteredCustomers = results;
        totalCount = results.Count;
    }

    private bool MatchesSearchTerm(DbCustomer customer)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return true;
        }

        var term = searchTerm.Trim();

        return selectedSearchField switch
        {
            "ContactNumber" => Contains(customer.ContactNumber, term),
            "AssignedTo" => Contains(customer.AssignedTo, term),
            "Assigner" => Contains(customer.Assigner, term),
            _ => Contains(customer.CustomerName, term)
        };
    }

    private bool MatchesGroup(DbCustomer customer)
        => string.IsNullOrWhiteSpace(selectedGroup) || string.Equals(customer.Group, selectedGroup, StringComparison.OrdinalIgnoreCase);

    private bool MatchesDateRange(DbCustomer customer)
    {
        if (!filterStartDate.HasValue && !filterEndDate.HasValue)
        {
            return true;
        }

        var start = filterStartDate?.Date ?? DateTime.MinValue;
        var end = filterEndDate?.Date ?? DateTime.MaxValue;
        var assignedDate = customer.AssignedDate.Date;

        return assignedDate >= start && assignedDate <= end;
    }

    private static bool Contains(string? source, string term)
        => !string.IsNullOrEmpty(source) && source.Contains(term, StringComparison.OrdinalIgnoreCase);

    private void EnsureValidDateRange()
    {
        if (filterStartDate.HasValue)
        {
            filterStartDate = filterStartDate.Value.Date;
        }

        if (filterEndDate.HasValue)
        {
            filterEndDate = filterEndDate.Value.Date;
        }

        if (filterStartDate.HasValue && filterEndDate.HasValue && filterStartDate > filterEndDate)
        {
            filterEndDate = filterStartDate;
        }
    }

    private void ClearQuickRangeSelection() => activeQuickRange = string.Empty;

    private string GetQuickFilterClass(string rangeKey) => activeQuickRange == rangeKey ? "active" : string.Empty;

    private static string GetDateInputValue(DateTime? value)
        => value.HasValue ? value.Value.ToString("yyyy-MM-dd") : string.Empty;

    private static DateTime? ParseDate(string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return null;
        }

        return DateTime.TryParseExact(value, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsed)
            ? parsed
            : null;
    }

    private string GetLocalizedString(string key, string fallback)
    {
        var localized = Localizer[key];
        return localized.ResourceNotFound ? fallback : localized.Value;
    }

    private void NavigateToContact(int contactId)
    {
        NavigationManager.NavigateTo($"/contacts/{contactId}");
    }

    private static string GetStatusClass(DbStatus status) => status switch
    {
        DbStatus.New => "status-text status-new",
        DbStatus.InProgress => "status-text status-inprogress",
        DbStatus.NoAnswer => "status-text status-noanswer",
        DbStatus.Completed => "status-text status-completed",
        DbStatus.OnHold => "status-text status-onhold",
        _ => "status-text"
    };
}
