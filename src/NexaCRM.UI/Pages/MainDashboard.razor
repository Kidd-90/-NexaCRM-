@page "/main-dashboard"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging
@using NexaCRM.UI.Services.Interfaces
@using System.Globalization
@using System.Linq
@inject IStringLocalizer<MainDashboard> Localizer
@inject NavigationManager NavigationManager
@inject INotificationFeedService NotificationFeed
@inject IMobileInteractionService MobileInteractions
@inject IGlobalActionService GlobalActionService
@inject ActionInterop ActionInterop
@inject ILogger<MainDashboard> Logger
@attribute [Authorize(Roles = "Admin,Sales,Manager")]
@implements IDisposable

<a href="#mainDashboardContent" class="dashboard-skip-link">@Localizer["SkipToMainContent"]</a>

<div class="position-relative d-flex min-vh-100 flex-column bg-surface-soft overflow-x-hidden common-page-container" data-page="main-dashboard">
    <div class="layout-container d-flex h-100 flex-grow-1 flex-column">
        <div class="dashboard-container">
        <main id="mainDashboardContent" class="dashboard-main-content" tabindex="-1">
        <div class="d-flex flex-wrap justify-content-between gap-3 p-4">
            <AuthorizeView>
                <Authorized>
                    <p class="text-ink fs-1 fw-bold lh-sm ui-min-w-18rem dashboard-welcome">@Localizer["WelcomeBack", @context.User.Identity?.Name ?? ""]</p>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="px-4 py-3">
            <label class="d-flex flex-column ui-min-w-10rem ui-input-height-lg w-100">
            <div class="d-flex w-100 flex-grow-1 align-items-stretch rounded-3 h-100">
                <div
                class="text-ink-muted d-flex border-0 bg-accent-soft align-items-center justify-content-center pl-4 rounded-start-3 border-end-0"
                data-icon="MagnifyingGlass"
                data-size="24px"
                data-weight="regular"
                >
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                    <path
                    d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"
                    ></path>
                </svg>
                </div>
                <input
                placeholder='@Localizer["Search"]'
                class="form-input d-flex w-100 min-w-0 flex-grow-1 overflow-hidden rounded-3 text-ink border-0 bg-accent-soft h-100 px-4 rounded-start-0 border-start-0 pl-2 fs-5 fw-normal lh-base"
                value=""
                />
            </div>
            </label>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5 dashboard-section-title">@Localizer["DashboardOverview"]</h2>
        <div class="d-grid ui-grid-autofit gap-3 p-4 dashboard-grid">
            <button class="d-flex flex-grow-1 gap-3 rounded-3 border border-soft bg-surface-soft p-4 align-items-center dashboard-card" data-route="/sales-pipeline">
            <div class="text-ink" data-icon="Funnel" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M230.6,49.53A15.81,15.81,0,0,0,216,40H40A16,16,0,0,0,28.19,66.76l.08.09L96,139.17V216a16,16,0,0,0,24.87,13.32l32-21.34A16,16,0,0,0,160,194.66V139.17l67.74-72.32.08-.09A15.8,15.8,0,0,0,230.6,49.53ZM40,56h0Zm108.34,72.28A15.92,15.92,0,0,0,144,139.17v55.49L112,216V139.17a15.92,15.92,0,0,0-4.32-10.94L40,56H216Z"
                ></path>
                </svg>
            </div>
            <h2 class="text-ink fs-5 fw-bold lh-sm">@Localizer["SalesPipeline"]</h2>
            </button>
            <button class="d-flex flex-grow-1 gap-3 rounded-3 border border-soft bg-surface-soft p-4 align-items-center dashboard-card" data-route="/reports">
            <div class="text-ink" data-icon="Target" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M221.87,83.16A104.1,104.1,0,1,1,195.67,49l22.67-22.68a8,8,0,0,1,11.32,11.32l-96,96a8,8,0,0,1-11.32-11.32l27.72-27.72a40,40,0,1,0,17.87,31.09,8,8,0,1,1,16-.9,56,56,0,1,1-22.38-41.65L184.3,60.39a87.88,87.88,0,1,0,23.13,29.67,8,8,0,0,1,14.44-6.9Z"
                ></path>
                </svg>
            </div>
            <h2 class="text-ink fs-5 fw-bold lh-sm">@Localizer["QuarterlyPerformance"]</h2>
            </button>
            <button class="d-flex flex-grow-1 gap-3 rounded-3 border border-soft bg-surface-soft p-4 align-items-center dashboard-card" data-route="/tasks-page">
            <div class="text-ink" data-icon="ListBullets" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M80,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H88A8,8,0,0,1,80,64Zm136,56H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,64H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM44,52A12,12,0,1,0,56,64,12,12,0,0,0,44,52Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,116Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,180Z"
                ></path>
                </svg>
            </div>
            <h2 class="text-ink fs-5 fw-bold lh-sm">@Localizer["Tasks"]</h2>
            </button>
            <button class="d-flex flex-grow-1 gap-3 rounded-3 border border-soft bg-surface-soft p-4 align-items-center dashboard-card" data-route="#recent-activity">
            <div class="text-ink" data-icon="Users" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M117.25,157.92a60,60,0,1,0-66.5,0A95.83,95.83,0,0,0,3.53,195.63a8,8,0,1,0,13.4,8.74,80,80,0,0,1,134.14,0,8,8,0,0,0,13.4-8.74A95.83,95.83,0,0,0,117.25,157.92ZM40,108a44,44,0,1,1,44,44A44.05,44.05,0,0,1,40,108Zm210.14,98.7a8,8,0,0,1-11.07-2.33A79.83,79.83,0,0,0,172,168a8,8,0,0,1,0-16,44,44,0,1,0-16.34-84.87,8,8,0,1,1-5.94-14.85,60,60,0,0,1,55.53,105.64,95.83,95.83,0,0,1,47.22,37.71A8,8,0,0,1,250.14,206.7Z"
                ></path>
                </svg>
            </div>
            <h2 class="text-ink fs-5 fw-bold lh-sm">@Localizer["RecentActivity"]</h2>
            </button>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5 dashboard-section-title">@Localizer["SalesPipelineSummary"]</h2>
        <div class="d-flex flex-wrap gap-4 px-4 py-4 dashboard-section-content">
            <div class="d-flex ui-min-w-18rem flex-grow-1 flex-column gap-2 rounded-3 border border-soft p-6 dashboard-stat-card">
            <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["DealsByStage"]</p>
            <div class="d-grid ui-min-h-180 gx-4 gy-4 ui-grid-auto-1fr align-items-center py-3 dashboard-chart-grid">
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Prospecting"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 60%;"></div></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Qualification"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 90%;"></div></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Proposal"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 30%;"></div></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Negotiation"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 40%;"></div></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["ClosedWon"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 90%;"></div></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["ClosedLost"]</p>
                <div class="h-100 flex-grow-1"><div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 80%;"></div></div>
            </div>
            </div>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5 dashboard-section-title">@Localizer["QuarterlyPerformance"]</h2>
        <div class="d-flex flex-wrap gap-4 px-4 py-4 dashboard-section-content">
            <div class="d-flex ui-min-w-18rem flex-grow-1 flex-column gap-2 rounded-3 border border-soft p-6 dashboard-stat-card">
            <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["RevenueByQuarter"]</p>
            <div class="d-grid ui-min-h-180 ui-grid-flow-col gap-4 ui-grid-rows align-items-end justify-items-center px-3 dashboard-chart-grid">
                <div class="border border-primary bg-accent-soft border-top border-2 w-100" style="height: 70%;"></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Q1"]</p>
                <div class="border border-primary bg-accent-soft border-top border-2 w-100" style="height: 90%;"></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Q2"]</p>
                <div class="border border-primary bg-accent-soft border-top border-2 w-100" style="height: 70%;"></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Q3"]</p>
                <div class="border border-primary bg-accent-soft border-top border-2 w-100" style="height: 30%;"></div>
                <p class="text-ink-muted small fw-bold lh-base">@Localizer["Q4"]</p>
            </div>
            </div>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5">@Localizer["Tasks"]</h2>
        <div class="px-4 py-3 container">
            <div class="d-flex overflow-hidden rounded-3 border border-soft bg-surface-soft dashboard-table-container">
            <table class="flex-grow-1">
                <thead>
                <tr class="bg-surface-soft">
                    <th class="table-b8380c11-022e-424e-acc3-69900c40b013-column-120 px-4 py-3 text-start text-ink ui-width-400 small fw-semibold lh-base">@Localizer["Task"]</th>
                    <th class="table-b8380c11-022e-424e-acc3-69900c40b013-column-240 px-4 py-3 text-start text-ink ui-width-400 small fw-semibold lh-base">
                    @Localizer["DueDate"]
                    </th>
                    <th class="table-b8380c11-022e-424e-acc3-69900c40b013-column-360 px-4 py-3 text-start text-ink ui-width-60 small fw-semibold lh-base">@Localizer["Priority"]</th>
                </tr>
                </thead>
                <tbody>
                <tr class="border-top border-soft">
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-120 ui-min-h-72 px-4 py-2 ui-width-400 text-ink small fw-normal lh-base">
                    @Localizer["FollowUp"]
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-240 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">
                    2024-07-15
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-360 ui-min-h-72 px-4 py-2 ui-width-60 small fw-normal lh-base">
                    <button
                        class="d-flex ui-min-w-84px ui-max-w-480 align-items-center justify-content-center overflow-hidden rounded-3 ui-input-height-sm px-4 bg-accent-soft text-ink small fw-semibold lh-base w-100 priority-button"
                    >
                        <span class="truncate priority-label">@Localizer["High"]</span>
                    </button>
                    </td>
                </tr>
                <tr class="border-top border-soft">
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-120 ui-min-h-72 px-4 py-2 ui-width-400 text-ink small fw-normal lh-base">
                    @Localizer["PreparePresentation"]
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-240 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">
                    2024-07-20
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-360 ui-min-h-72 px-4 py-2 ui-width-60 small fw-normal lh-base">
                    <button
                        class="d-flex ui-min-w-84px ui-max-w-480 align-items-center justify-content-center overflow-hidden rounded-3 ui-input-height-sm px-4 bg-accent-soft text-ink small fw-semibold lh-base w-100 priority-button"
                    >
                        <span class="truncate priority-label">@Localizer["Medium"]</span>
                    </button>
                    </td>
                </tr>
                <tr class="border-top border-soft">
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-120 ui-min-h-72 px-4 py-2 ui-width-400 text-ink small fw-normal lh-base">
                    @Localizer["ReviewCampaign"]
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-240 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">
                    2024-07-25
                    </td>
                    <td class="table-b8380c11-022e-424e-acc3-69900c40b013-column-360 ui-min-h-72 px-4 py-2 ui-width-60 small fw-normal lh-base">
                    <button
                        class="d-flex ui-min-w-84px ui-max-w-480 align-items-center justify-content-center overflow-hidden rounded-3 ui-input-height-sm px-4 bg-accent-soft text-ink small fw-semibold lh-base w-100 priority-button"
                    >
                        <span class="truncate priority-label">@Localizer["Low"]</span>
                    </button>
                    </td>
                </tr>
                </tbody>
            </table>
            </div>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5" id="recent-activity">@Localizer["RecentActivity"]</h2>
        <div class="d-grid ui-grid-40-1fr gx-2 px-4">
            <div class="d-flex flex-column align-items-center gap-1 pt-3">
            <div class="text-ink" data-icon="UserPlus" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M256,136a8,8,0,0,1-8,8H232v16a8,8,0,0,1-16,0V144H200a8,8,0,0,1,0-16h16V112a8,8,0,0,1,16,0v16h16A8,8,0,0,1,256,136Zm-57.87,58.85a8,8,0,0,1-12.26,10.3C165.75,181.19,138.09,168,108,168s-57.75,13.19-77.87,37.15a8,8,0,0,1-12.25-10.3c14.94-17.78,33.52-30.41,54.17-37.17a68,68,0,1,1,71.9,0C164.6,164.44,183.18,177.07,198.13,194.85ZM108,152a52,52,0,1,0-52-52A52.06,52.06,0,0,0,108,152Z"
                ></path>
                </svg>
            </div>
            <div class="ui-width-1-5 bg-surface-soft h-2 flex-grow-1"></div>
            </div>
            <div class="d-flex flex-grow-1 flex-column py-3">
            <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["NewLead"]</p>
            <p class="text-ink-muted fs-5 fw-normal lh-base">2024-07-10</p>
            </div>
            <div class="d-flex flex-column align-items-center gap-1">
            <div class="ui-width-1-5 bg-surface-soft h-2"></div>
            <div class="text-ink" data-icon="Phone" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M222.37,158.46l-47.11-21.11-.13-.06a16,16,0,0,0-15.17,1.4,8.12,8.12,0,0,0-.75.56L134.87,160c-15.42-7.49-31.34-23.29-38.83-38.51l20.78-24.71c.2-.25.39-.5.57-.77a16,16,0,0,0,1.32-15.06l0-.12L97.54,33.64a16,16,0,0,0-16.62-9.52A56.26,56.26,0,0,0,32,80c0,79.4,64.6,144,144,144a56.26,56.26,0,0,0,55.88-48.92A16,16,0,0,0,222.37,158.46ZM176,208A128.14,128.14,0,0,1,48,80,40.2,40.2,0,0,1,82.87,40a.61.61,0,0,0,0,.12l21,47L83.2,111.86a6.13,6.13,0,0,0-.57.77,16,16,0,0,0-1,15.7c9.06,18.53,27.73,37.06,46.46,46.11a16,16,0,0,0,15.75-1.14,8.44,8.44,0,0,0,.74-.56L168.89,152l47,21.05h0s.08,0,.11,0A40.21,40.21,0,0,1,176,208Z"
                ></path>
                </svg>
            </div>
            <div class="ui-width-1-5 bg-surface-soft h-2 flex-grow-1"></div>
            </div>
            <div class="d-flex flex-grow-1 flex-column py-3">
            <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["SalesCall"]</p>
            <p class="text-ink-muted fs-5 fw-normal lh-base">2024-07-12</p>
            </div>
            <div class="d-flex flex-column align-items-center gap-1 pb-3">
            <div class="ui-width-1-5 bg-surface-soft h-2"></div>
            <div class="text-ink" data-icon="CheckCircle" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M173.66,98.34a8,8,0,0,1,0,11.32l-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35A8,8,0,0,1,173.66,98.34ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z"
                ></path>
                </svg>
            </div>
            </div>
            <div class="d-flex flex-grow-1 flex-column py-3">
            <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["ClosedDeal"]</p>
            <p class="text-ink-muted fs-5 fw-normal lh-base">2024-07-14</p>
            </div>
        </div>
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5">@Localizer["LeadSourceAnalytics"]</h2>
        <div class="d-flex flex-wrap gap-4 px-4 py-4">
            <div class="d-flex ui-min-w-18rem flex-grow-1 flex-column gap-2 rounded-3 border border-soft p-6">
                <p class="text-ink fs-5 fw-semibold lh-base">@Localizer["LeadsBySource"]</p>
                <div class="d-grid ui-min-h-180 gx-4 gy-4 ui-grid-auto-1fr align-items-center py-3">
                    <p class="text-ink-muted small fw-bold lh-base">@Localizer["Website"]</p>
                    <div class="h-100 flex-grow-1">
                        <div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 100%;"></div>
                    </div>
                    <p class="text-ink-muted small fw-bold lh-base">@Localizer["Referral"]</p>
                    <div class="h-100 flex-grow-1">
                        <div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 60%;"></div>
                    </div>
                    <p class="text-ink-muted small fw-bold lh-base">@Localizer["SocialMedia"]</p>
                    <div class="h-100 flex-grow-1">
                        <div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 30%;"></div>
                    </div>
                    <p class="text-ink-muted small fw-bold lh-base">@Localizer["EmailCampaign"]</p>
                    <div class="h-100 flex-grow-1">
                        <div class="border border-primary bg-accent-soft border-end border-2 h-100" style="width: 60%;"></div>
                    </div>
                </div>
            </div>
        </div>
        </main>
        </div>
    </div>

</div>

@code {
    private const int MobileNotificationLimit = 12;
    private int unreadNotificationsCount;
    private List<NotificationFeedItem> mobileNotifications = new();
    private bool notificationsFeatureEnabled;
    private string mobileSearchQuery = string.Empty;
    private int UnreadMobileNotificationsCount => mobileNotifications.Count(item => !item.IsRead);

    protected override async Task OnInitializedAsync()
    {
        if (NotificationFeed is null)
        {
            Logger.LogError("Notification feed service is unavailable. Notifications will be disabled on the dashboard.");
        }
        else
        {
            NotificationFeed.UnreadCountChanged += HandleUnreadCountChanged;
            NotificationFeed.FeedUpdated += HandleFeedUpdated;
            notificationsFeatureEnabled = true;
        }

        MobileInteractions.StateChanged += HandleMobileStateChanged;

        if (!notificationsFeatureEnabled)
        {
            unreadNotificationsCount = 0;
            mobileNotifications.Clear();
            return;
        }

        try
        {
            if (NotificationFeed != null)
            {
                var unreadCount = await NotificationFeed.GetUnreadCountAsync();
                unreadNotificationsCount = Math.Max(0, unreadCount);
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to retrieve unread notification count. Defaulting to zero.");
            unreadNotificationsCount = 0;
        }
        await LoadInitialNotificationsAsync();
    }

    private async Task LoadInitialNotificationsAsync()
    {
        if (!notificationsFeatureEnabled || NotificationFeed is null)
        {
            return;
        }

        try
        {
            var items = await NotificationFeed.GetAsync();
            UpdateMobileNotifications(items);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load notifications from the feed.");
        }
    }

    private void HandleFeedUpdated(IReadOnlyList<NotificationFeedItem> items)
    {
        if (!notificationsFeatureEnabled)
        {
            return;
        }

        _ = InvokeAsync(() =>
        {
            UpdateMobileNotifications(items);
            StateHasChanged();
        });
    }

    private void HandleMobileStateChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task NavigateToPage(string url)
    {
        // Close any open mobile panels first
        await CloseMobilePanels();

        // Add visual feedback before navigation
        await Task.Delay(150);
        NavigationManager.NavigateTo(url);
    }

    private void NavigateToNotifications()
    {
        NavigationManager.NavigateTo("/notifications");
    }

    private async Task ScrollToSection(string sectionId)
    {
        // Close any open mobile panels first
        await CloseMobilePanels();

        await MobileInteractions.ScrollToAsync(sectionId);
    }

    private Task ToggleMobileMenu() => MobileInteractions.ToggleMenuAsync();

    private Task ToggleMobileSearch() => MobileInteractions.ToggleSearchAsync();

    private async Task ToggleMobileNotifications()
    {
        await MobileInteractions.ToggleNotificationsAsync();
        if (!notificationsFeatureEnabled || NotificationFeed is null)
        {
            return;
        }

        if (MobileInteractions.AreNotificationsOpen && mobileNotifications.Any(item => !item.IsRead))
        {
            await NotificationFeed.MarkAllReadAsync();
            MarkLocalNotificationsRead();
        }
    }

    private void HandleUnreadCountChanged(int count)
    {
        if (!notificationsFeatureEnabled)
        {
            return;
        }

        unreadNotificationsCount = Math.Max(0, count);
        _ = InvokeAsync(StateHasChanged);
    }

    private void UpdateMobileNotifications(IReadOnlyList<NotificationFeedItem> items)
    {
        if (items is null)
        {
            return;
        }

        mobileNotifications = items
            .OrderByDescending(item => item.TimestampUtc)
            .Take(MobileNotificationLimit)
            .Select(CloneNotification)
            .ToList();
    }

    private static NotificationFeedItem CloneNotification(NotificationFeedItem item)
    {
        return new NotificationFeedItem
        {
            Id = item.Id,
            Title = item.Title,
            Message = item.Message,
            TimestampUtc = item.TimestampUtc,
            IsRead = item.IsRead,
            Type = item.Type
        };
    }

    private void MarkLocalNotificationsRead()
    {
        if (mobileNotifications.Count == 0)
        {
            return;
        }

        foreach (var notification in mobileNotifications)
        {
            notification.IsRead = true;
        }

        StateHasChanged();
    }

    private string ResolveNotificationIcon(NotificationFeedItem notification)
    {
        var type = notification.Type?.ToLowerInvariant();

        return type switch
        {
            "deal" or "pipeline" or "opportunity" => "bi bi-kanban",
            "task" or "todo" => "bi bi-check2-circle",
            "meeting" or "event" or "calendar" => "bi bi-calendar-event",
            "lead" or "contact" => "bi bi-person-plus",
            "warning" or "alert" => "bi bi-exclamation-triangle",
            "message" or "communication" or "chat" => "bi bi-chat-dots",
            _ => "bi bi-bell"
        };
    }

    private string FormatRelativeTime(DateTime timestampUtc)
    {
        var difference = DateTime.UtcNow - timestampUtc;
        if (difference < TimeSpan.Zero)
        {
            difference = TimeSpan.Zero;
        }

        if (difference < TimeSpan.FromMinutes(1))
        {
            return ResolveString("NotificationJustNow", "방금 전");
        }

        if (difference < TimeSpan.FromHours(1))
        {
            var minutes = Math.Max(1, (int)Math.Floor(difference.TotalMinutes));
            return string.Format(CultureInfo.CurrentCulture, ResolveString("NotificationMinutesAgo", "{0}분 전"), minutes);
        }

        if (difference < TimeSpan.FromDays(1))
        {
            var hours = Math.Max(1, (int)Math.Floor(difference.TotalHours));
            return string.Format(CultureInfo.CurrentCulture, ResolveString("NotificationHoursAgo", "{0}시간 전"), hours);
        }

        if (difference < TimeSpan.FromDays(7))
        {
            var days = Math.Max(1, (int)Math.Floor(difference.TotalDays));
            return string.Format(CultureInfo.CurrentCulture, ResolveString("NotificationDaysAgo", "{0}일 전"), days);
        }

        return timestampUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.CurrentCulture);
    }

    private string ResolveString(string key, string fallback)
    {
        var localized = Localizer[key];
        return localized.ResourceNotFound ? fallback : localized.Value;
    }

    private Task CloseMobilePanels() => MobileInteractions.CloseAllAsync();

    private async Task HandleMobileSearch(KeyboardEventArgs e)
    {
        // Handle search on Enter key
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(mobileSearchQuery))
        {
            await PerformMobileSearch();
        }
    }

    private async Task PerformMobileSearch()
    {
        // Close search panel
        await MobileInteractions.CloseAllAsync();

        // Perform search navigation
        var searchUrl = $"/search?q={Uri.EscapeDataString(mobileSearchQuery)}";
        NavigationManager.NavigateTo(searchUrl);
        
        // Clear search query
        mobileSearchQuery = "";
        
        // Add a small delay to ensure state changes are processed
        await Task.Delay(10);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await ActionInterop.SetupMobileDashboardAsync();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to set up mobile dashboard interactions.");
            }
        }
    }

    public void Dispose()
    {
        if (NotificationFeed is not null)
        {
            NotificationFeed.UnreadCountChanged -= HandleUnreadCountChanged;
            NotificationFeed.FeedUpdated -= HandleFeedUpdated;
        }

        MobileInteractions.StateChanged -= HandleMobileStateChanged;
    }
}
