@page "/reports-page"
@attribute [Authorize(Roles = "Manager,Admin,Developer")]
@using Microsoft.Extensions.Localization
@using NexaCRM.UI.Models
@using NexaCRM.UI.Services.Interfaces
@inject IStringLocalizer<ReportsPage> Localizer
@inject IReportService ReportService

<ResponsivePage LayoutMode="expanded" class="common-page-container">
    <div class="reports-layout">
        <section class="reports-layout__form" aria-labelledby="reportBuilderTitle">
            <h1 id="reportBuilderTitle" class="reports-layout__title">@Localizer["ReportsTitle"]</h1>
            <EditForm Model="currentDefinition" class="reports-form">
                <div class="reports-field">
                    <label class="reports-field__label" for="reportNameInput">@Localizer["ReportName"]</label>
                    <InputText id="reportNameInput" @bind-Value="currentDefinition.Name" class="form-input reports-input" />
                </div>

                <div class="reports-field reports-field--row">
                    <label class="reports-field__label" for="newFieldInput">@Localizer["Field"]</label>
                    <div class="reports-field__controls">
                        <InputText id="newFieldInput" @bind-Value="newField" class="form-input reports-input" />
                        <button type="button" class="reports-chip-button" @onclick="AddField">@Localizer["Add"]</button>
                    </div>
                </div>

                <ul class="reports-token-list" aria-live="polite">
                    @foreach (var field in currentDefinition.SelectedFields)
                    {
                        <li class="reports-token-item">@field</li>
                    }
                </ul>

                <div class="reports-field reports-field--filters">
                    <div class="reports-field__group">
                        <label class="reports-field__label" for="filterKeyInput">@Localizer["FilterKey"]</label>
                        <InputText id="filterKeyInput" @bind-Value="filterKey" class="form-input reports-input" />
                    </div>
                    <div class="reports-field__group">
                        <label class="reports-field__label" for="filterValueInput">@Localizer["FilterValue"]</label>
                        <InputText id="filterValueInput" @bind-Value="filterValue" class="form-input reports-input" />
                    </div>
                    <button type="button" class="reports-chip-button" @onclick="AddFilter">@Localizer["Add"]</button>
                </div>

                <ul class="reports-token-list reports-token-list--filters" aria-live="polite">
                    @foreach (var filter in currentDefinition.Filters)
                    {
                        <li class="reports-token-item">@filter.Key: @filter.Value</li>
                    }
                </ul>

                <div class="reports-form__actions">
                    <button type="button" class="reports-action" @onclick="SaveDefinition">@Localizer["SaveDefinition"]</button>
                    <button type="button" class="reports-action reports-action--primary" @onclick="GenerateReport">@Localizer["GenerateReport"]</button>
                </div>
            </EditForm>
        </section>

        <aside class="reports-layout__aside" aria-labelledby="savedReportsTitle">
            <div class="reports-summary">
                <h2 id="savedReportsTitle" class="reports-summary__title">@Localizer["SavedReports"]</h2>
                <ul class="reports-summary__list">
                    @foreach (var def in savedDefinitions)
                    {
                        <li><button class="reports-summary__link" @onclick="() => LoadDefinition(def)">@def.Name</button></li>
                    }
                </ul>

                <section class="reports-preview" aria-labelledby="reportPreviewTitle">
                    <h3 id="reportPreviewTitle" class="reports-preview__title">@Localizer["Preview"]</h3>
                    @if (preview != null)
                    {
                        <div class="reports-preview__content">
                            <h4 class="reports-preview__heading">@preview.Title</h4>
                            <div class="reports-preview__table" role="region" aria-live="polite">
                                <table class="table-auto border-collapse w-100">
                                    <thead>
                                        <tr><th class="border px-2">Field</th><th class="border px-2">Value</th></tr>
                                    </thead>
                                    <tbody>
                                        @if (preview.Data != null)
                                        {
                                            @foreach (var item in preview.Data)
                                            {
                                                <tr><td class="border px-2">@item.Key</td><td class="border px-2">@item.Value</td></tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="reports-preview__placeholder">@Localizer["ReportsPreviewEmpty"]</p>
                    }
                </section>
            </div>
        </aside>
    </div>
</ResponsivePage>

@code {
    private ReportDefinition currentDefinition = new();
    private List<ReportDefinition> savedDefinitions = new();
    private ReportData? preview;
    private string? newField;
    private string? filterKey;
    private string? filterValue;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        savedDefinitions = (await ReportService.GetReportDefinitionsAsync()).ToList();
    }

    private void AddField()
    {
        if (!string.IsNullOrWhiteSpace(newField))
        {
            currentDefinition.SelectedFields.Add(newField);
            newField = string.Empty;
        }
    }

    private void AddFilter()
    {
        if (!string.IsNullOrWhiteSpace(filterKey) && filterValue is not null)
        {
            currentDefinition.Filters[filterKey] = filterValue;
            filterKey = filterValue = string.Empty;
        }
    }

    private async System.Threading.Tasks.Task SaveDefinition()
    {
        await ReportService.SaveReportDefinitionAsync(currentDefinition);
        savedDefinitions = (await ReportService.GetReportDefinitionsAsync()).ToList();
        currentDefinition = new ReportDefinition();
    }

    private async System.Threading.Tasks.Task LoadDefinition(ReportDefinition def)
    {
        currentDefinition = def;
        await GenerateReport();
    }

    private async System.Threading.Tasks.Task GenerateReport()
    {
        preview = await ReportService.GenerateReportAsync(currentDefinition);
    }
}
