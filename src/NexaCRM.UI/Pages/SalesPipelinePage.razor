@page "/sales-pipeline-page"
@using Microsoft.Extensions.Localization
@using System.Linq
@inject IStringLocalizer<SalesPipelinePage> Localizer
@using NexaCRM.UI.Models
@using NexaCRM.UI.Services.Interfaces
@inject IDealService DealService
@inject NavigationManager NavigationManager
@inject IGlobalActionService GlobalActionService

<div class="position-relative d-flex min-vh-100 flex-column bg-surface-soft overflow-x-hidden common-page-container">
    <div class="layout-container d-flex h-100 flex-grow-1 flex-column">
    <div class="px-5 d-flex flex-grow-1 justify-content-center py-5">
        <div class="layout-content-container d-flex flex-column ui-max-w-960 flex-grow-1">
        <div class="d-flex flex-wrap justify-content-between gap-3 p-4">
            <div class="d-flex ui-min-w-18rem flex-column gap-3">
            <p class="text-ink fs-1 fw-bold lh-sm">@Localizer["SalesPipeline"]</p>
            <p class="text-ink-muted small fw-normal lh-base">@Localizer["ManageSalesProcess"]</p>
            </div>
            <button
            class="d-flex ui-min-w-84px ui-max-w-480 align-items-center justify-content-center overflow-hidden rounded-3 ui-input-height-sm px-4 bg-accent-soft text-ink small fw-semibold lh-base"
            >
            <span class="truncate">@Localizer["AddDeal"]</span>
            </button>
        </div>
        <div class="px-4 py-3">
            <label class="d-flex flex-column ui-min-w-10rem ui-input-height-lg w-100">
            <div class="d-flex w-100 flex-grow-1 align-items-stretch rounded-3 h-100">
                <div
                class="text-ink-muted d-flex border-0 bg-accent-soft align-items-center justify-content-center pl-4 rounded-start-3 border-end-0"
                data-icon="MagnifyingGlass"
                data-size="24px"
                data-weight="regular"
                >
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                    <path
                    d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"
                    ></path>
                </svg>
                </div>
                <input
                placeholder='@Localizer["SearchDeals"]'
                class="form-input d-flex w-100 min-w-0 flex-grow-1 overflow-hidden rounded-3 text-ink border-0 bg-accent-soft h-100 px-4 rounded-start-0 border-start-0 pl-2 fs-5 fw-normal lh-base"
                @bind="DealSearchTerm"
                @bind:event="oninput"
                />
            </div>
            </label>
        </div>
        <div class="d-flex gap-3 p-3 flex-wrap pr-4 pipeline-filter-row">
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["Owner"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="owner-filter" class="pipeline-filter-select" @bind="SelectedOwner">
                        <option value="@FilterOwnerAll">@Localizer["FilterOwnerAny"]</option>
                        @foreach (var owner in ownerOptions)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
            </div>
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["TimePeriod"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="time-filter" class="pipeline-filter-select" @bind="SelectedTimePeriod">
                        <option value="@FilterPeriodAll">@Localizer["FilterTimeAny"]</option>
                        <option value="@FilterPeriodLast7Days">@Localizer["FilterTimeLast7Days"]</option>
                        <option value="@FilterPeriodLast30Days">@Localizer["FilterTimeLast30Days"]</option>
                        <option value="@FilterPeriodQuarterToDate">@Localizer["FilterTimeQuarterToDate"]</option>
                    </select>
                </div>
            </div>
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["Amount"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="amount-filter" class="pipeline-filter-select" @bind="SelectedAmountRange">
                        <option value="@FilterAmountAll">@Localizer["FilterAmountAny"]</option>
                        <option value="@FilterAmountUnder25K">@Localizer["FilterAmountUnder25K"]</option>
                        <option value="@FilterAmount25KTo50K">@Localizer["FilterAmount25KTo50K"]</option>
                        <option value="@FilterAmountAbove50K">@Localizer["FilterAmountAbove50K"]</option>
                    </select>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="filter-summary filter-summary--loading" aria-live="polite">
                <span class="visually-hidden">@Localizer["Loading..."]</span>
                <div class="skeleton skeleton--text skeleton--short"></div>
                <div class="skeleton skeleton--text skeleton--wide"></div>
            </div>
        }
        else
        {
            <div class="filter-summary @(HasActiveFilters ?"filter-summary--active" : string.Empty)" aria-live="polite">
                <div class="filter-summary__meta">
                    <span class="filter-summary__count">@string.Format(Localizer["DealsFound"], FilteredDealCount)</span>
                    @if (HasActiveFilters)
                    {
                        <button type="button" class="clear-filters-button" @onclick="ClearFilters">
                            @Localizer["ClearFilters"]
                        </button>
                    }
                </div>
                @if (HasActiveFilters)
                {
                    <div class="filter-summary__badges">
                        @foreach (var description in BuildActiveFilterDescriptions())
                        {
                            <span class="active-filter-badge">@description</span>
                        }
                    </div>
                }
            </div>
        }
        <h2 class="text-ink fs-4 fw-bold lh-sm px-4 pb-3 pt-5">@Localizer["PipelineStages"]</h2>
        <div class="px-4 py-3 container">
            <div class="d-flex overflow-hidden rounded-3 border border-soft bg-surface-soft">
            <table class="flex-grow-1 pipeline-table">
                <thead>
                <tr class="bg-surface-soft">
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 px-4 py-3 text-start text-ink ui-width-400 small fw-semibold lh-base">@Localizer["Stage"]</th>
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 px-4 py-3 text-start text-ink ui-width-400 small fw-semibold lh-base">@Localizer["Deals"]</th>
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 px-4 py-3 text-start text-ink ui-width-400 small fw-semibold lh-base">@Localizer["Amount"]</th>
                </tr>
                </thead>
                <tbody class="pipeline-table__body">
                    @if (isLoading)
                    {
                        @foreach (var placeholderIndex in Enumerable.Range(0, 4))
                        {
                            <tr class="pipeline-row pipeline-row--skeleton border-top border-soft">
                                <td class="pipeline-table__cell pipeline-table__cell--stage table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 ui-min-h-72 px-4 py-2 ui-width-400 text-ink small fw-normal lh-base">
                                    @if (placeholderIndex == 0)
                                    {
                                        <span class="visually-hidden">@Localizer["Loading..."]</span>
                                    }
                                    <span class="skeleton skeleton--text skeleton--stage"></span>
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--deals table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">
                                    <span class="skeleton skeleton--text skeleton--count"></span>
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--amount table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">
                                    <span class="skeleton skeleton--text skeleton--amount"></span>
                                </td>
                            </tr>
                        }
                    }
                    else if (groupedDeals.Length == 0)
                    {
                        <tr>
                            <td colspan="3" class="text-center text-ink-muted small fw-normal lh-base">@Localizer["NoDealsMatch"]</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var stage in groupedDeals)
                        {
                            <tr class="pipeline-row pipeline-row--data border-top border-soft">
                                <td class="pipeline-table__cell pipeline-table__cell--stage table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 ui-min-h-72 px-4 py-2 ui-width-400 text-ink small fw-normal lh-base">
                                @stage.Key
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--deals table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">@stage.Count()</td>
                                <td class="pipeline-table__cell pipeline-table__cell--amount table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 ui-min-h-72 px-4 py-2 ui-width-400 text-ink-muted small fw-normal lh-base">@stage.Sum(d => d.Amount).ToString("C")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            </div>
        </div>
        </div>
    </div>
    </div>
</div>

@code {
    private const string FilterOwnerAll = "all";
    private const string FilterPeriodAll = "all";
    private const string FilterPeriodLast7Days = "last7";
    private const string FilterPeriodLast30Days = "last30";
    private const string FilterPeriodQuarterToDate = "quarter";
    private const string FilterAmountAll = "all";
    private const string FilterAmountUnder25K = "under25";
    private const string FilterAmount25KTo50K = "25to50";
    private const string FilterAmountAbove50K = "above50";

    private readonly List<Deal> allDeals = new();
    private IGrouping<string, Deal>[] groupedDeals = Array.Empty<IGrouping<string, Deal>>();
    private IReadOnlyList<string> ownerOptions = Array.Empty<string>();
    private string dealSearchTerm = string.Empty;
    private string selectedOwner = FilterOwnerAll;
    private string selectedTimePeriod = FilterPeriodAll;
    private string selectedAmountRange = FilterAmountAll;
    private bool isLoading = true;

    private string DealSearchTerm
    {
        get => dealSearchTerm;
        set
        {
            if (dealSearchTerm != value)
            {
                dealSearchTerm = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedOwner
    {
        get => selectedOwner;
        set
        {
            if (selectedOwner != value)
            {
                selectedOwner = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedTimePeriod
    {
        get => selectedTimePeriod;
        set
        {
            if (selectedTimePeriod != value)
            {
                selectedTimePeriod = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedAmountRange
    {
        get => selectedAmountRange;
        set
        {
            if (selectedAmountRange != value)
            {
                selectedAmountRange = value;
                ApplyFilters();
            }
        }
    }

    private int FilteredDealCount => groupedDeals.Sum(group => group.Count());
    private bool HasActiveFilters =>
        !string.IsNullOrWhiteSpace(DealSearchTerm) ||
        SelectedOwner != FilterOwnerAll ||
        SelectedTimePeriod != FilterPeriodAll ||
        SelectedAmountRange != FilterAmountAll;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var deals = await DealService.GetDealsAsync();
        allDeals.AddRange(deals.Where(d => !string.IsNullOrWhiteSpace(d.Stage)));

        ownerOptions = allDeals
            .Select(d => d.Owner)
            .Where(owner => !string.IsNullOrWhiteSpace(owner))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(owner => owner, StringComparer.OrdinalIgnoreCase)
            .ToList()!;

        ApplyFilters();
        isLoading = false;
    }

    private void ApplyFilters()
    {
        if (allDeals.Count == 0)
        {
            groupedDeals = Array.Empty<IGrouping<string, Deal>>();
            return;
        }

        IEnumerable<Deal> query = allDeals;

        if (!string.IsNullOrWhiteSpace(DealSearchTerm))
        {
            var term = DealSearchTerm.Trim();
            query = query.Where(deal =>
                (deal.Name?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (deal.Company?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (deal.ContactPerson?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        if (SelectedOwner != FilterOwnerAll)
        {
            query = query.Where(deal => string.Equals(deal.Owner, SelectedOwner, StringComparison.OrdinalIgnoreCase));
        }

        if (SelectedTimePeriod != FilterPeriodAll)
        {
            var today = DateTime.Today;
            query = SelectedTimePeriod switch
            {
                FilterPeriodLast7Days => query.Where(deal => deal.CreatedDate.Date >= today.AddDays(-7)),
                FilterPeriodLast30Days => query.Where(deal => deal.CreatedDate.Date >= today.AddDays(-30)),
                FilterPeriodQuarterToDate => query.Where(deal => deal.CreatedDate.Date >= new DateTime(today.Year, ((today.Month - 1) / 3) * 3 + 1, 1)),
                _ => query
            };
        }

        if (SelectedAmountRange != FilterAmountAll)
        {
            query = SelectedAmountRange switch
            {
                FilterAmountUnder25K => query.Where(deal => deal.Amount < 25000m),
                FilterAmount25KTo50K => query.Where(deal => deal.Amount >= 25000m && deal.Amount <= 50000m),
                FilterAmountAbove50K => query.Where(deal => deal.Amount > 50000m),
                _ => query
            };
        }

        groupedDeals = query
            .Where(deal => !string.IsNullOrWhiteSpace(deal.Stage))
            .GroupBy(deal => deal.Stage!)
            .OrderBy(group => group.Key)
            .ToArray();
    }

    private IEnumerable<string> BuildActiveFilterDescriptions()
    {
        if (!string.IsNullOrWhiteSpace(DealSearchTerm))
        {
            yield return $"{Localizer["Search"]}: \"{DealSearchTerm}\"";
        }

        if (SelectedOwner != FilterOwnerAll)
        {
            yield return $"{Localizer["Owner"]}: {SelectedOwner}";
        }

        if (SelectedTimePeriod != FilterPeriodAll)
        {
            var label = SelectedTimePeriod switch
            {
                FilterPeriodLast7Days => Localizer["FilterTimeLast7Days"],
                FilterPeriodLast30Days => Localizer["FilterTimeLast30Days"],
                FilterPeriodQuarterToDate => Localizer["FilterTimeQuarterToDate"],
                _ => Localizer["FilterTimeAny"]
            };

            yield return $"{Localizer["TimePeriod"]}: {label}";
        }

        if (SelectedAmountRange != FilterAmountAll)
        {
            var label = SelectedAmountRange switch
            {
                FilterAmountUnder25K => Localizer["FilterAmountUnder25K"],
                FilterAmount25KTo50K => Localizer["FilterAmount25KTo50K"],
                FilterAmountAbove50K => Localizer["FilterAmountAbove50K"],
                _ => Localizer["FilterAmountAny"]
            };

            yield return $"{Localizer["Amount"]}: {label}";
        }
    }

    private void ClearFilters()
    {
        DealSearchTerm = string.Empty;
        SelectedOwner = FilterOwnerAll;
        SelectedTimePeriod = FilterPeriodAll;
        SelectedAmountRange = FilterAmountAll;
    }

    private async System.Threading.Tasks.Task HandleFloatingAction(string action)
    {
        var request = action switch
        {
            "call" => new GlobalActionRequest(GlobalActionType.Call),
            "email" => new GlobalActionRequest(GlobalActionType.Email),
            "meeting" => new GlobalActionRequest(GlobalActionType.ScheduleMeeting),
            "add" => new GlobalActionRequest(GlobalActionType.AddDeal),
            _ => null
        };

        if (request is null)
        {
            return;
        }

        await GlobalActionService.LaunchAsync(request);
    }
}
