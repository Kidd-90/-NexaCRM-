@page "/sales-pipeline-page"
@using Microsoft.Extensions.Localization
@using System.Linq
@inject IStringLocalizer<SalesPipelinePage> Localizer
@using NexaCRM.UI.Models
@using NexaCRM.UI.Services.Interfaces
@inject IDealService DealService
@inject NavigationManager NavigationManager
@inject IGlobalActionService GlobalActionService

<div class="relative flex size-full min-h-screen flex-col bg-slate-50 group/design-root overflow-x-hidden" style='font-family: Inter, "Noto Sans", sans-serif;'>
    <div class="layout-container flex h-full grow flex-col">
    <header class="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#e7ecf3] px-10 py-3">
        <div class="flex items-center gap-8">
        <div class="flex items-center gap-4 text-[#0e131b]">
            <div class="size-4">
            <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M24 18.4228L42 11.475V34.3663C42 34.7796 41.7457 35.1504 41.3601 35.2992L24 42V18.4228Z"
                fill="currentColor"
                ></path>
                <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M24 8.18819L33.4123 11.574L24 15.2071L14.5877 11.574L24 8.18819ZM9 15.8487L21 20.4805V37.6263L9 32.9945V15.8487ZM27 37.6263V20.4805L39 15.8487V32.9945L27 37.6263ZM25.354 2.29885C24.4788 1.98402 23.5212 1.98402 22.646 2.29885L4.98454 8.65208C3.7939 9.08038 3 10.2097 3 11.475V34.3663C3 36.0196 4.01719 37.5026 5.55962 38.098L22.9197 44.7987C23.6149 45.0671 24.3851 45.0671 25.0803 44.7987L42.4404 38.098C43.9828 37.5026 45 36.0196 45 34.3663V11.475C45 10.2097 44.2061 9.08038 43.0155 8.65208L25.354 2.29885Z"
                fill="currentColor"
                ></path>
            </svg>
            </div>
            <h2 class="text-[#0e131b] text-lg font-bold leading-tight tracking-[-0.015em]">@Localizer["SalesPro"]</h2>
        </div>
        <div class="flex items-center gap-9">
            <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/main-dashboard">@Localizer["Dashboard"]</a>
            <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/contacts">@Localizer["Contacts"]</a>
            <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/sales-pipeline-page">@Localizer["Deals"]</a>
            <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/tasks">@Localizer["Tasks"]</a>
            <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/reports-page">@Localizer["Reports"]</a>
        </div>
        </div>
        <div class="flex flex-1 justify-end gap-8">
        <label class="flex flex-col min-w-40 !h-10 max-w-64">
            <div class="flex w-full flex-1 items-stretch rounded-lg h-full">
            <div
                class="text-[#4d6a99] flex border-none bg-[#e7ecf3] items-center justify-center pl-4 rounded-l-lg border-r-0"
                data-icon="MagnifyingGlass"
                data-size="24px"
                data-weight="regular"
            >
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                <path
                    d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"
                ></path>
                </svg>
            </div>
            <input
                placeholder='@Localizer["Search"]'
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-lg text-[#0e131b] focus:outline-0 focus:ring-0 border-none bg-[#e7ecf3] focus:border-none h-full placeholder:text-[#4d6a99] px-4 rounded-l-none border-l-0 pl-2 text-base font-normal leading-normal"
                @bind="DealSearchTerm"
                @bind:event="oninput"
            />
            </div>
        </label>
        <button
            class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#e7ecf3] text-[#0e131b] text-sm font-bold leading-normal tracking-[0.015em]"
        >
            <span class="truncate">@Localizer["New"]</span>
        </button>
        <div
            class="bg-center bg-no-repeat aspect-square bg-cover rounded-full size-10"
            style='background-image: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);'
        ></div>
        </div>
    </header>
    <div class="px-40 flex flex-1 justify-center py-5">
        <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
        <div class="flex flex-wrap justify-between gap-3 p-4">
            <div class="flex min-w-72 flex-col gap-3">
            <p class="text-[#0e131b] tracking-light text-[32px] font-bold leading-tight">@Localizer["SalesPipeline"]</p>
            <p class="text-[#4d6a99] text-sm font-normal leading-normal">@Localizer["ManageSalesProcess"]</p>
            </div>
            <button
            class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-8 px-4 bg-[#e7ecf3] text-[#0e131b] text-sm font-medium leading-normal"
            >
            <span class="truncate">@Localizer["AddDeal"]</span>
            </button>
        </div>
        <div class="px-4 py-3">
            <label class="flex flex-col min-w-40 h-12 w-full">
            <div class="flex w-full flex-1 items-stretch rounded-lg h-full">
                <div
                class="text-[#4d6a99] flex border-none bg-[#e7ecf3] items-center justify-center pl-4 rounded-l-lg border-r-0"
                data-icon="MagnifyingGlass"
                data-size="24px"
                data-weight="regular"
                >
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                    <path
                    d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"
                    ></path>
                </svg>
                </div>
                <input
                placeholder='@Localizer["SearchDeals"]'
                class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-lg text-[#0e131b] focus:outline-0 focus:ring-0 border-none bg-[#e7ecf3] focus:border-none h-full placeholder:text-[#4d6a99] px-4 rounded-l-none border-l-0 pl-2 text-base font-normal leading-normal"
                @bind="DealSearchTerm"
                @bind:event="oninput"
                />
            </div>
            </label>
        </div>
        <div class="flex gap-3 p-3 flex-wrap pr-4 pipeline-filter-row">
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["Owner"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="owner-filter" class="pipeline-filter-select" @bind="SelectedOwner">
                        <option value="@FilterOwnerAll">@Localizer["FilterOwnerAny"]</option>
                        @foreach (var owner in ownerOptions)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
            </div>
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["TimePeriod"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="time-filter" class="pipeline-filter-select" @bind="SelectedTimePeriod">
                        <option value="@FilterPeriodAll">@Localizer["FilterTimeAny"]</option>
                        <option value="@FilterPeriodLast7Days">@Localizer["FilterTimeLast7Days"]</option>
                        <option value="@FilterPeriodLast30Days">@Localizer["FilterTimeLast30Days"]</option>
                        <option value="@FilterPeriodQuarterToDate">@Localizer["FilterTimeQuarterToDate"]</option>
                    </select>
                </div>
            </div>
            <div class="pipeline-filter-control">
                <span class="pipeline-filter-label">@Localizer["Amount"]</span>
                <div class="pipeline-filter-select-wrapper">
                    <select id="amount-filter" class="pipeline-filter-select" @bind="SelectedAmountRange">
                        <option value="@FilterAmountAll">@Localizer["FilterAmountAny"]</option>
                        <option value="@FilterAmountUnder25K">@Localizer["FilterAmountUnder25K"]</option>
                        <option value="@FilterAmount25KTo50K">@Localizer["FilterAmount25KTo50K"]</option>
                        <option value="@FilterAmountAbove50K">@Localizer["FilterAmountAbove50K"]</option>
                    </select>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="filter-summary filter-summary--loading" aria-live="polite">
                <span class="visually-hidden">@Localizer["Loading..."]</span>
                <div class="skeleton skeleton--text skeleton--short"></div>
                <div class="skeleton skeleton--text skeleton--wide"></div>
            </div>
        }
        else
        {
            <div class="filter-summary @(HasActiveFilters ? "filter-summary--active" : string.Empty)" aria-live="polite">
                <div class="filter-summary__meta">
                    <span class="filter-summary__count">@string.Format(Localizer["DealsFound"], FilteredDealCount)</span>
                    @if (HasActiveFilters)
                    {
                        <button type="button" class="clear-filters-button" @onclick="ClearFilters">
                            @Localizer["ClearFilters"]
                        </button>
                    }
                </div>
                @if (HasActiveFilters)
                {
                    <div class="filter-summary__badges">
                        @foreach (var description in BuildActiveFilterDescriptions())
                        {
                            <span class="active-filter-badge">@description</span>
                        }
                    </div>
                }
            </div>
        }
        <h2 class="text-[#0e131b] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">@Localizer["PipelineStages"]</h2>
        <div class="px-4 py-3 container">
            <div class="flex overflow-hidden rounded-lg border border-[#d0d9e7] bg-slate-50">
            <table class="flex-1 pipeline-table">
                <thead>
                <tr class="bg-slate-50">
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 px-4 py-3 text-left text-[#0e131b] w-[400px] text-sm font-medium leading-normal">@Localizer["Stage"]</th>
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 px-4 py-3 text-left text-[#0e131b] w-[400px] text-sm font-medium leading-normal">@Localizer["Deals"]</th>
                    <th class="pipeline-table__header table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 px-4 py-3 text-left text-[#0e131b] w-[400px] text-sm font-medium leading-normal">@Localizer["Amount"]</th>
                </tr>
                </thead>
                <tbody class="pipeline-table__body">
                    @if (isLoading)
                    {
                        @foreach (var placeholderIndex in Enumerable.Range(0, 4))
                        {
                            <tr class="pipeline-row pipeline-row--skeleton border-t border-t-[#d0d9e7]">
                                <td class="pipeline-table__cell pipeline-table__cell--stage table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 h-[72px] px-4 py-2 w-[400px] text-[#0e131b] text-sm font-normal leading-normal">
                                    @if (placeholderIndex == 0)
                                    {
                                        <span class="visually-hidden">@Localizer["Loading..."]</span>
                                    }
                                    <span class="skeleton skeleton--text skeleton--stage"></span>
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--deals table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 h-[72px] px-4 py-2 w-[400px] text-[#4d6a99] text-sm font-normal leading-normal">
                                    <span class="skeleton skeleton--text skeleton--count"></span>
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--amount table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 h-[72px] px-4 py-2 w-[400px] text-[#4d6a99] text-sm font-normal leading-normal">
                                    <span class="skeleton skeleton--text skeleton--amount"></span>
                                </td>
                            </tr>
                        }
                    }
                    else if (groupedDeals.Length == 0)
                    {
                        <tr>
                            <td colspan="3" class="text-center text-[#4d6a99] text-sm font-normal leading-normal">@Localizer["NoDealsMatch"]</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var stage in groupedDeals)
                        {
                            <tr class="pipeline-row pipeline-row--data border-t border-t-[#d0d9e7]">
                                <td class="pipeline-table__cell pipeline-table__cell--stage table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-120 h-[72px] px-4 py-2 w-[400px] text-[#0e131b] text-sm font-normal leading-normal">
                                @stage.Key
                                </td>
                                <td class="pipeline-table__cell pipeline-table__cell--deals table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-240 h-[72px] px-4 py-2 w-[400px] text-[#4d6a99] text-sm font-normal leading-normal">@stage.Count()</td>
                                <td class="pipeline-table__cell pipeline-table__cell--amount table-95fef262-a922-4bfe-a4c4-b7dc2d92c3ad-column-360 h-[72px] px-4 py-2 w-[400px] text-[#4d6a99] text-sm font-normal leading-normal">@stage.Sum(d => d.Amount).ToString("C")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            </div>
        </div>
        </div>
    </div>
    </div>
    
    <!-- Mobile Quick Actions Floating Button -->
    <NexaCRM.UI.Components.UI.FloatingActionButton 
        ShowCallAction="true" 
        ShowEmailAction="true" 
        ShowMeetingAction="true" 
        ShowAddAction="true"
        OnActionClicked="HandleFloatingAction" />
</div>

@code {
    private const string FilterOwnerAll = "all";
    private const string FilterPeriodAll = "all";
    private const string FilterPeriodLast7Days = "last7";
    private const string FilterPeriodLast30Days = "last30";
    private const string FilterPeriodQuarterToDate = "quarter";
    private const string FilterAmountAll = "all";
    private const string FilterAmountUnder25K = "under25";
    private const string FilterAmount25KTo50K = "25to50";
    private const string FilterAmountAbove50K = "above50";

    private readonly List<Deal> allDeals = new();
    private IGrouping<string, Deal>[] groupedDeals = Array.Empty<IGrouping<string, Deal>>();
    private IReadOnlyList<string> ownerOptions = Array.Empty<string>();
    private string dealSearchTerm = string.Empty;
    private string selectedOwner = FilterOwnerAll;
    private string selectedTimePeriod = FilterPeriodAll;
    private string selectedAmountRange = FilterAmountAll;
    private bool isLoading = true;

    private string DealSearchTerm
    {
        get => dealSearchTerm;
        set
        {
            if (dealSearchTerm != value)
            {
                dealSearchTerm = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedOwner
    {
        get => selectedOwner;
        set
        {
            if (selectedOwner != value)
            {
                selectedOwner = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedTimePeriod
    {
        get => selectedTimePeriod;
        set
        {
            if (selectedTimePeriod != value)
            {
                selectedTimePeriod = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedAmountRange
    {
        get => selectedAmountRange;
        set
        {
            if (selectedAmountRange != value)
            {
                selectedAmountRange = value;
                ApplyFilters();
            }
        }
    }

    private int FilteredDealCount => groupedDeals.Sum(group => group.Count());
    private bool HasActiveFilters =>
        !string.IsNullOrWhiteSpace(DealSearchTerm) ||
        SelectedOwner != FilterOwnerAll ||
        SelectedTimePeriod != FilterPeriodAll ||
        SelectedAmountRange != FilterAmountAll;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var deals = await DealService.GetDealsAsync();
        allDeals.AddRange(deals.Where(d => !string.IsNullOrWhiteSpace(d.Stage)));

        ownerOptions = allDeals
            .Select(d => d.Owner)
            .Where(owner => !string.IsNullOrWhiteSpace(owner))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(owner => owner, StringComparer.OrdinalIgnoreCase)
            .ToList();

        ApplyFilters();
        isLoading = false;
    }

    private void ApplyFilters()
    {
        if (allDeals.Count == 0)
        {
            groupedDeals = Array.Empty<IGrouping<string, Deal>>();
            return;
        }

        IEnumerable<Deal> query = allDeals;

        if (!string.IsNullOrWhiteSpace(DealSearchTerm))
        {
            var term = DealSearchTerm.Trim();
            query = query.Where(deal =>
                (deal.Name?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (deal.Company?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (deal.ContactPerson?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        if (SelectedOwner != FilterOwnerAll)
        {
            query = query.Where(deal => string.Equals(deal.Owner, SelectedOwner, StringComparison.OrdinalIgnoreCase));
        }

        if (SelectedTimePeriod != FilterPeriodAll)
        {
            var today = DateTime.Today;
            query = SelectedTimePeriod switch
            {
                FilterPeriodLast7Days => query.Where(deal => deal.CreatedDate.Date >= today.AddDays(-7)),
                FilterPeriodLast30Days => query.Where(deal => deal.CreatedDate.Date >= today.AddDays(-30)),
                FilterPeriodQuarterToDate => query.Where(deal => deal.CreatedDate.Date >= new DateTime(today.Year, ((today.Month - 1) / 3) * 3 + 1, 1)),
                _ => query
            };
        }

        if (SelectedAmountRange != FilterAmountAll)
        {
            query = SelectedAmountRange switch
            {
                FilterAmountUnder25K => query.Where(deal => deal.Amount < 25000m),
                FilterAmount25KTo50K => query.Where(deal => deal.Amount >= 25000m && deal.Amount <= 50000m),
                FilterAmountAbove50K => query.Where(deal => deal.Amount > 50000m),
                _ => query
            };
        }

        groupedDeals = query
            .Where(deal => !string.IsNullOrWhiteSpace(deal.Stage))
            .GroupBy(deal => deal.Stage!)
            .OrderBy(group => group.Key)
            .ToArray();
    }

    private IEnumerable<string> BuildActiveFilterDescriptions()
    {
        if (!string.IsNullOrWhiteSpace(DealSearchTerm))
        {
            yield return $"{Localizer["Search"]}: \"{DealSearchTerm}\"";
        }

        if (SelectedOwner != FilterOwnerAll)
        {
            yield return $"{Localizer["Owner"]}: {SelectedOwner}";
        }

        if (SelectedTimePeriod != FilterPeriodAll)
        {
            var label = SelectedTimePeriod switch
            {
                FilterPeriodLast7Days => Localizer["FilterTimeLast7Days"],
                FilterPeriodLast30Days => Localizer["FilterTimeLast30Days"],
                FilterPeriodQuarterToDate => Localizer["FilterTimeQuarterToDate"],
                _ => Localizer["FilterTimeAny"]
            };

            yield return $"{Localizer["TimePeriod"]}: {label}";
        }

        if (SelectedAmountRange != FilterAmountAll)
        {
            var label = SelectedAmountRange switch
            {
                FilterAmountUnder25K => Localizer["FilterAmountUnder25K"],
                FilterAmount25KTo50K => Localizer["FilterAmount25KTo50K"],
                FilterAmountAbove50K => Localizer["FilterAmountAbove50K"],
                _ => Localizer["FilterAmountAny"]
            };

            yield return $"{Localizer["Amount"]}: {label}";
        }
    }

    private void ClearFilters()
    {
        DealSearchTerm = string.Empty;
        SelectedOwner = FilterOwnerAll;
        SelectedTimePeriod = FilterPeriodAll;
        SelectedAmountRange = FilterAmountAll;
    }

    private async System.Threading.Tasks.Task HandleFloatingAction(string action)
    {
        var request = action switch
        {
            "call" => new GlobalActionRequest(GlobalActionType.Call),
            "email" => new GlobalActionRequest(GlobalActionType.Email),
            "meeting" => new GlobalActionRequest(GlobalActionType.ScheduleMeeting),
            "add" => new GlobalActionRequest(GlobalActionType.AddDeal),
            _ => null
        };

        if (request is null)
        {
            return;
        }

        await GlobalActionService.LaunchAsync(request);
    }
}
