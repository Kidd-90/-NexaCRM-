@page "/organization/system-admin"
@attribute [Authorize(Roles = "Admin")]
@using System.Linq
@using NexaCRM.Services.Admin.Interfaces
@using NexaCRM.UI.Components.UI
@using AgentModel = NexaCRM.Services.Admin.Models.Agent
@inject IOrganizationService OrganizationService

<ResponsivePage>
    <h3>System Administration</h3>
    <p>Configure global system administrators.</p>

    <div class="admin-form">
        <input @bind="newAdminId" placeholder="User ID" />
        <button class="btn btn-primary" @onclick="AddAdmin">Add</button>
    </div>

    <div class="admin-table-container">
        <table class="table admin-table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var admin in admins)
                {
                    <tr>
                        <td>@admin.Id</td>
                        <td>@admin.Name</td>
                        <td>@admin.Email</td>
                        <td>
                            <button class="btn btn-link text-danger" @onclick="() => RemoveAdmin(admin.Id)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="admins-mobile-view">
        @foreach (var admin in admins)
        {
            <div class="admin-card">
                <div class="admin-info">
                    <span class="admin-name">@admin.Name</span>
                    <span class="admin-email">@admin.Email</span>
                </div>
                <button class="btn btn-link text-danger" @onclick="() => RemoveAdmin(admin.Id)">Remove</button>
            </div>
        }
    </div>

    <ToastNotification @ref="toast" Title="@toastTitle" Message="@toastMessage" Type="@toastType" />
</ResponsivePage>

@code {
    private List<AgentModel> admins = new();
    private string? newAdminId;
    private ToastNotification? toast;
    private string toastTitle = string.Empty;
    private string toastMessage = string.Empty;
    private ToastNotification.ToastType toastType = ToastNotification.ToastType.Info;

    protected override async Task OnInitializedAsync()
    {
        admins = (await OrganizationService.GetAdminsAsync()).ToList();
    }

    private async Task AddAdmin()
    {
        if (string.IsNullOrWhiteSpace(newAdminId))
        {
            return;
        }

        await OrganizationService.AddAdminAsync(newAdminId);
        admins = (await OrganizationService.GetAdminsAsync()).ToList();
        toastTitle = "Admin added";
        toastMessage = $"User {newAdminId} added.";
        toastType = ToastNotification.ToastType.Success;
        if (toast is not null)
        {
            await toast.Show();
        }
        newAdminId = string.Empty;
    }

    private async Task RemoveAdmin(int userId)
    {
        await OrganizationService.RemoveAdminAsync(userId.ToString());
        admins = (await OrganizationService.GetAdminsAsync()).ToList();
        toastTitle = "Admin removed";
        toastMessage = $"User {userId} removed.";
        toastType = ToastNotification.ToastType.Success;
        if (toast is not null)
        {
            await toast.Show();
        }
    }
}

