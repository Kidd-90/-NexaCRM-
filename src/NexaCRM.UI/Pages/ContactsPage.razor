@page "/contacts"
@attribute [Authorize(Roles = "Sales,Manager,Support")]
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<ContactsPage> Localizer
@using NexaCRM.UI.Services.Interfaces
@using ContactModel = NexaCRM.UI.Models.Contact
@using System.Linq
@inject IContactService ContactService
@inject NavigationManager NavigationManager

<PageTitle>@Localizer["Contacts"]</PageTitle>

<div class="contacts-layout">
    <div class="contacts-toolbar">
        <label class="contacts-search">
            <i class="bi bi-search" aria-hidden="true"></i>
            <input placeholder='@Localizer["Search"]'
                   @bind="searchQuery"
                   @oninput="OnSearchInput" />
        </label>
        <button class="contacts-toolbar__button" @onclick="CreateContact">
            <i class="bi bi-plus-circle" aria-hidden="true"></i>
            <span>@Localizer["NewContact"]</span>
        </button>
    </div>

    @if (filteredContacts == null)
    {
        <p class="contacts-loading"><em>@Localizer["Loading..."]</em></p>
    }
    else if (filteredContacts.Count == 0)
    {
        <div class="contacts-empty">
            <i class="bi bi-people" aria-hidden="true"></i>
            <p>@Localizer["NoContacts"]</p>
        </div>
    }
    else
    {
        <div class="contacts-table-container">
            <div class="contacts-table-wrapper">
                <table class="contacts-table">
                    <thead>
                        <tr>
                            <th>@Localizer["Id"]</th>
                            <th>@Localizer["FirstName"]</th>
                            <th>@Localizer["LastName"]</th>
                            <th>@Localizer["Email"]</th>
                            <th>@Localizer["PhoneNumber"]</th>
                            <th>@Localizer["Actions"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contact in filteredContacts)
                        {
                            <tr>
                                <td>@contact.Id</td>
                                <td>@contact.FirstName</td>
                                <td>@contact.LastName</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(contact.Email))
                                    {
                                        <a href="mailto:@contact.Email">@contact.Email</a>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(contact.PhoneNumber))
                                    {
                                        <a href="tel:@contact.PhoneNumber">@contact.PhoneNumber</a>
                                    }
                                </td>
                                <td>
                                    <NexaCRM.UI.Components.UI.QuickActionsComponent
                                        PhoneNumber="@contact.PhoneNumber"
                                        Email="@contact.Email"
                                        CustomerName="@($"{contact.FirstName} {contact.LastName}".Trim())"
                                        CustomerId="@contact.Id.ToString()"
                                        ShowLabels="false"
                                        CssClass="inline"
                                        OnActionCompleted="HandleQuickAction" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="contacts-mobile-view">
            @foreach (var contact in filteredContacts)
            {
                <div class="contact-card">
                    <div class="contact-name">
                        @if (!string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName))
                        {
                            @($"{contact.FirstName} {contact.LastName}".Trim())
                        }
                        else
                        {
                            <span class="text-muted">@Localizer["No Name"]</span>
                        }
                    </div>
                    <div class="contact-id">ID: @contact.Id</div>

                    <div class="contact-info">
                        @if (!string.IsNullOrEmpty(contact.Email))
                        {
                            <div class="contact-info-item">
                                <i class="bi bi-envelope" aria-hidden="true"></i>
                                <div>
                                    <span class="contact-info-label">@Localizer["Email"]</span>
                                    <a href="mailto:@contact.Email">@contact.Email</a>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(contact.PhoneNumber))
                        {
                            <div class="contact-info-item">
                                <i class="bi bi-telephone" aria-hidden="true"></i>
                                <div>
                                    <span class="contact-info-label">@Localizer["PhoneNumber"]</span>
                                    <a href="tel:@contact.PhoneNumber">@contact.PhoneNumber</a>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="contact-actions">
                        <NexaCRM.UI.Components.UI.QuickActionsComponent
                            PhoneNumber="@contact.PhoneNumber"
                            Email="@contact.Email"
                            CustomerName="@($"{contact.FirstName} {contact.LastName}".Trim())"
                            CustomerId="@contact.Id.ToString()"
                            ShowLabels="true"
                            CssClass="inline"
                            OnActionCompleted="HandleQuickAction" />
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ContactModel>? contacts;
    private List<ContactModel>? filteredContacts;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        contacts = (await ContactService.GetContactsAsync()).ToList();
        filteredContacts = contacts;
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (contacts is null)
        {
            filteredContacts = null;
            return;
        }

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredContacts = contacts;
            return;
        }

        var query = searchQuery.Trim();
        filteredContacts = contacts
            .Where(contact =>
                (!string.IsNullOrEmpty(contact.FirstName) && contact.FirstName.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(contact.LastName) && contact.LastName.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(contact.Email) && contact.Email.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(contact.PhoneNumber) && contact.PhoneNumber.Contains(query, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void HandleQuickAction(string action)
    {
        // Placeholder for future quick action handling (toast notifications etc.)
    }

    private void CreateContact()
    {
        NavigationManager.NavigateTo("/contacts/new");
    }
}
