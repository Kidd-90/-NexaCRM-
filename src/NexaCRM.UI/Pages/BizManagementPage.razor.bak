@page "/organization/biz-management"
@attribute [Authorize(Roles = "Manager,Admin")]
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Localization
@using NexaCRM.Services.Admin.Interfaces
@using NexaCRM.UI.Models.Supabase
@using System.Security.Claims
@inject IJSRuntime JS
@inject IBizManagementService BizService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="advanced-db">
    <header class="advanced-db__header">
        <h1>비즈니스/프랜차이즈 관리</h1>
        <div class="toolbar">
            <button class="btn btn-light" @onclick="SaveCurrentView" title="현재 보기 저장"><i class="bi bi-bookmark"></i> 보기 저장</button>
            <button class="btn btn-light" @onclick="ExportData"><i class="bi bi-download"></i> 내보내기</button>
            @if (activeTab == Tab.Companies)
            {
                <button class="btn btn-success" @onclick="ShowAddCompanyModal"><i class="bi bi-building-add"></i> 회사 추가</button>
            }
            @if (activeTab == Tab.Branches)
            {
                <button class="btn btn-success" @onclick="ShowAddBranchModal"><i class="bi bi-building-add"></i> 지점 추가</button>
            }
        </div>
    </header>

    <div class="preview-banner" role="status" aria-live="polite">
        <i class="bi bi-info-circle-fill" aria-hidden="true"></i>
        <span>프랜차이즈 본사, 지점, 팀을 통합 관리합니다. 회사 및 지점 구조를 설정하고 팀을 배치할 수 있습니다.</span>
    </div>

    <nav class="tabs" role="tablist">
        <button class="tab @(activeTab==Tab.Companies?"active":null)" @onclick="(()=>SetTab(Tab.Companies))">회사 관리</button>
        <button class="tab @(activeTab==Tab.Branches?"active":null)" @onclick="(()=>SetTab(Tab.Branches))">지점 관리</button>
        <button class="tab @(activeTab==Tab.BranchLists?"active":null)" @onclick="(()=>SetTab(Tab.BranchLists))">지점 목록</button>
        <button class="tab @(activeTab==Tab.TeamLists?"active":null)" @onclick="(()=>SetTab(Tab.TeamLists))">팀 배치</button>
        <button class="tab @(activeTab==Tab.Statistics?"active":null)" @onclick="(()=>SetTab(Tab.Statistics))">통계</button>
        <button class="tab @(activeTab==Tab.Settings?"active":null)" @onclick="(()=>SetTab(Tab.Settings))">설정</button>
    </nav>

    @if (activeTab == Tab.Companies)
    {
        <section class="explore">
            <aside class="filters">
                <div class="filter-group">
                    <label>상태</label>
                    <select class="form-select" @bind="filterActive">
                        <option value="">전체</option>
                        <option value="true">활성</option>
                        <option value="false">비활성</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>검색</label>
                    <input class="form-control" placeholder="회사명/코드" @bind="searchText" @bind:after="ApplyFilter" />
                </div>
            </aside>

            <div class="grid">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>코드</th>
                                <th>회사명</th>
                                <th>사업자번호</th>
                                <th>연락처</th>
                                <th>이메일</th>
                                <th>주소</th>
                                <th>상태</th>
                                <th>등록일</th>
                                <th class="text-end">작업</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (isLoading)
                            {
                                <tr>
                                    <td colspan="9" class="text-center text-muted">
                                        <div class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></div>
                                        <span class="ms-2">데이터를 불러오는 중...</span>
                                    </td>
                                </tr>
                            }
                            else if (filteredCompanies.Count > 0)
                            {
                                @foreach (var company in filteredCompanies)
                                {
                                    <tr>
                                        <td><span class="badge bg-primary">@company.Code</span></td>
                                        <td><strong>@company.Name</strong></td>
                                        <td>@company.RegistrationNumber</td>
                                        <td>@company.Phone</td>
                                        <td>@company.Email</td>
                                        <td>@company.Address</td>
                                        <td>
                                            <span class="badge @(company.IsActive ? "bg-success" : "bg-secondary")">
                                                @(company.IsActive ? "활성" : "비활성")
                                            </span>
                                        </td>
                                        <td>@company.CreatedAt.ToShortDateString()</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditCompany(company)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCompany(company)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="9" class="text-center text-muted">등록된 회사가 없습니다.</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
    }
    else if (activeTab == Tab.Branches)
    {
        <section class="explore">
            <aside class="filters">
                <div class="filter-group">
                    <label>회사 선택</label>
                    <select class="form-select" @bind="selectedCompanyId" @bind:after="LoadBranches">
                        <option value="0">전체</option>
                        @foreach (var company in companies)
                        {
                            <option value="@company.Id">@company.Name</option>
                        }
                    </select>
                </div>
                <div class="filter-group">
                    <label>상태</label>
                    <select class="form-select" @bind="filterActive">
                        <option value="">전체</option>
                        <option value="true">활성</option>
                        <option value="false">비활성</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>검색</label>
                    <input class="form-control" placeholder="지점명/코드" @bind="searchText" @bind:after="ApplyFilter" />
                </div>
                <div class="mt-3">
                    <button class="btn btn-success w-100" @onclick="ShowAddBranchModal">
                        <i class="bi bi-geo-alt-fill"></i> 지점 추가
                    </button>
                </div>
            </aside>

            <div class="grid">
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>회사</th>
                                <th>코드</th>
                                <th>지점명</th>
                                <th>연락처</th>
                                <th>이메일</th>
                                <th>주소</th>
                                <th>담당자</th>
                                <th>상태</th>
                                <th>등록일</th>
                                <th class="text-end">작업</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (isLoading)
                            {
                                <tr>
                                    <td colspan="10" class="text-center text-muted">
                                        <div class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></div>
                                        <span class="ms-2">데이터를 불러오는 중...</span>
                                    </td>
                                </tr>
                            }
                            else if (filteredBranches.Count > 0)
                            {
                                @foreach (var branch in filteredBranches)
                                {
                                    <tr>
                                        <td>@GetCompanyName(branch.CompanyId)</td>
                                        <td><span class="badge bg-info">@branch.Code</span></td>
                                        <td><strong>@branch.Name</strong></td>
                                        <td>@branch.Phone</td>
                                        <td>@branch.Email</td>
                                        <td>@branch.Address</td>
                                        <td>@branch.ManagerName</td>
                                        <td>
                                            <span class="badge @(branch.IsActive ? "bg-success" : "bg-secondary")">
                                                @(branch.IsActive ? "활성" : "비활성")
                                            </span>
                                        </td>
                                        <td>@branch.CreatedAt.ToShortDateString()</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditBranch(branch)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteBranch(branch)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="10" class="text-center text-muted">등록된 지점이 없습니다.</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
    }
    else if (activeTab == Tab.BranchLists)
    {
        <section class="placeholder">
            <h5>지점 목록 관리</h5>
            <p>회사별 지점 목록을 조회하고 팀 및 멤버 수를 확인합니다.</p>
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 이 탭에서는 회사-지점 매핑 관계와 통계를 확인할 수 있습니다.
            </div>
        </section>
    }
    else if (activeTab == Tab.TeamLists)
    {
        <section class="placeholder">
            <h5>팀 배치 관리</h5>
            <p>회사와 지점에 팀을 배치하고 팀별 인원 현황을 관리합니다.</p>
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 팀 관리 페이지에서 팀을 먼저 생성한 후 이곳에서 회사/지점에 배치할 수 있습니다.
            </div>
        </section>
    }
    else if (activeTab == Tab.Statistics)
    {
        <section class="placeholder">
            <h5>통계 및 현황</h5>
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-muted">총 회사 수</h6>
                            <h3 class="card-text">@companies.Count</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-muted">활성 회사</h6>
                            <h3 class="card-text text-success">@companies.Count(c => c.IsActive)</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-muted">총 지점 수</h6>
                            <h3 class="card-text">@branches.Count</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title text-muted">활성 지점</h6>
                            <h3 class="card-text text-success">@branches.Count(b => b.IsActive)</h3>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
    else if (activeTab == Tab.Settings)
    {
        <section class="placeholder">
            <h5>설정</h5>
            <p>비즈니스 관리 시스템 설정 및 권한 관리</p>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="autoAssign" @bind="autoAssignEnabled">
                <label class="form-check-label" for="autoAssign">자동 배치 활성화</label>
            </div>
            <div class="form-check form-switch mt-2">
                <input class="form-check-input" type="checkbox" id="notifications" @bind="notificationsEnabled">
                <label class="form-check-label" for="notifications">변경 알림 활성화</label>
            </div>
        </section>
    }
</div>

@code {
    private enum Tab { Companies, Branches, BranchLists, TeamLists, Statistics, Settings }
    private Tab activeTab = Tab.Companies;
    private bool isLoading = false;
    private string filterActive = "";
    private string searchText = "";
    private int selectedCompanyId = 0;
    private bool autoAssignEnabled = true;
    private bool notificationsEnabled = true;

    // 샘플 데이터 모델
    private List<BizCompanyModel> companies = new();
    private List<BizBranchModel> branches = new();
    private List<BizCompanyModel> filteredCompanies = new();
    private List<BizBranchModel> filteredBranches = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        await Task.Delay(500); // 시뮬레이션

        // 샘플 데이터 생성
        companies = new List<BizCompanyModel>
        {
            new() { Id = 1, Code = "HQ001", Name = "본사", RegistrationNumber = "123-45-67890", Phone = "02-1234-5678", Email = "hq@company.com", Address = "서울시 강남구", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-12) },
            new() { Id = 2, Code = "FR001", Name = "프랜차이즈 A", RegistrationNumber = "234-56-78901", Phone = "02-2345-6789", Email = "fra@company.com", Address = "서울시 서초구", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-6) },
            new() { Id = 3, Code = "FR002", Name = "프랜차이즈 B", RegistrationNumber = "345-67-89012", Phone = "031-3456-7890", Email = "frb@company.com", Address = "경기도 성남시", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-3) },
            new() { Id = 4, Code = "FR003", Name = "프랜차이즈 C", RegistrationNumber = "456-78-90123", Phone = "051-4567-8901", Email = "frc@company.com", Address = "부산시 해운대구", IsActive = false, CreatedAt = DateTime.Now.AddMonths(-9) }
        };

        branches = new List<BizBranchModel>
        {
            new() { Id = 1, CompanyId = 1, Code = "B001", Name = "강남지점", Phone = "02-1111-2222", Email = "gangnam@company.com", Address = "서울시 강남구 테헤란로", ManagerName = "김매니저", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-10) },
            new() { Id = 2, CompanyId = 1, Code = "B002", Name = "서초지점", Phone = "02-3333-4444", Email = "seocho@company.com", Address = "서울시 서초구 서초대로", ManagerName = "이매니저", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-8) },
            new() { Id = 3, CompanyId = 2, Code = "B003", Name = "분당지점", Phone = "031-5555-6666", Email = "bundang@company.com", Address = "경기도 성남시 분당구", ManagerName = "박매니저", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-5) },
            new() { Id = 4, CompanyId = 2, Code = "B004", Name = "판교지점", Phone = "031-7777-8888", Email = "pangyo@company.com", Address = "경기도 성남시 판교", ManagerName = "최매니저", IsActive = true, CreatedAt = DateTime.Now.AddMonths(-4) },
            new() { Id = 5, CompanyId = 3, Code = "B005", Name = "수원지점", Phone = "031-9999-0000", Email = "suwon@company.com", Address = "경기도 수원시", ManagerName = "정매니저", IsActive = false, CreatedAt = DateTime.Now.AddMonths(-2) }
        };

        filteredCompanies = new List<BizCompanyModel>(companies);
        filteredBranches = new List<BizBranchModel>(branches);
        isLoading = false;
    }

    private void SetTab(Tab tab)
    {
        activeTab = tab;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        // 회사 필터링
        filteredCompanies = companies.Where(c =>
        {
            if (!string.IsNullOrEmpty(filterActive))
            {
                var isActive = bool.Parse(filterActive);
                if (c.IsActive != isActive) return false;
            }
            if (!string.IsNullOrEmpty(searchText))
            {
                return c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase);
            }
            return true;
        }).ToList();

        // 지점 필터링
        filteredBranches = branches.Where(b =>
        {
            if (selectedCompanyId > 0 && b.CompanyId != selectedCompanyId) return false;
            if (!string.IsNullOrEmpty(filterActive))
            {
                var isActive = bool.Parse(filterActive);
                if (b.IsActive != isActive) return false;
            }
            if (!string.IsNullOrEmpty(searchText))
            {
                return b.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       b.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase);
            }
            return true;
        }).ToList();
    }

    private async Task LoadBranches()
    {
        ApplyFilter();
        await Task.CompletedTask;
    }

    private string GetCompanyName(int companyId)
    {
        return companies.FirstOrDefault(c => c.Id == companyId)?.Name ?? "알 수 없음";
    }

    private async Task SaveCurrentView()
    {
        await JS.InvokeVoidAsync("alert", "보기 저장 기능은 곧 제공될 예정입니다.");
    }

    private async Task ExportData()
    {
        await JS.InvokeVoidAsync("alert", "데이터 내보내기 기능은 곧 제공될 예정입니다.");
    }

    private async Task ShowAddCompanyModal()
    {
        await JS.InvokeVoidAsync("alert", "회사 추가 기능은 곧 제공될 예정입니다.");
    }

    private async Task ShowAddBranchModal()
    {
        await JS.InvokeVoidAsync("alert", "지점 추가 기능은 곧 제공될 예정입니다.");
    }

    private async Task EditCompany(BizCompanyModel company)
    {
        await JS.InvokeVoidAsync("alert", $"{company.Name} 편집 기능은 곧 제공될 예정입니다.");
    }

    private async Task DeleteCompany(BizCompanyModel company)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"{company.Name}을(를) 삭제하시겠습니까?"))
        {
            companies.Remove(company);
            ApplyFilter();
        }
    }

    private async Task EditBranch(BizBranchModel branch)
    {
        await JS.InvokeVoidAsync("alert", $"{branch.Name} 편집 기능은 곧 제공될 예정입니다.");
    }

    private async Task DeleteBranch(BizBranchModel branch)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"{branch.Name}을(를) 삭제하시겠습니까?"))
        {
            branches.Remove(branch);
            ApplyFilter();
        }
    }

    public void Dispose()
    {
        // 리소스 정리
    }

    // 모델 클래스
    private class BizCompanyModel
    {
        public int Id { get; set; }
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public string? RegistrationNumber { get; set; }
        public string? Phone { get; set; }
        public string? Email { get; set; }
        public string? Address { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    private class BizBranchModel
    {
        public int Id { get; set; }
        public int CompanyId { get; set; }
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public string? Phone { get; set; }
        public string? Email { get; set; }
        public string? Address { get; set; }
        public string? ManagerName { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
