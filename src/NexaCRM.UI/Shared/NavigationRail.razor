@using System
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRolePermissionService RolePermissionService
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> Localizer
@using NexaCRM.UI.Models.Navigation

@implements IDisposable

<div class="@($"nav-rail{(panelVisible ? "" : " collapsed")}")" role="navigation" aria-label="@Localizer["MainNavigation"]">
    <div class="nav-rail__icons" role="tablist" aria-orientation="vertical">
        <div class="nav-rail__layer">
            <div class="nav-rail__layer-base" aria-hidden="true"></div>
            <div class="nav-rail__layer-sheen" aria-hidden="true"></div>
            <div class="nav-rail__layer-content">
                @{
                    var splitIndex = GetClusterSplitIndex(groups.Count);
                }

                <div class="nav-rail__top">
                    <!-- Top home button: navigates home (icon-only) -->
                    <NavLink class="rail-icon rail-logo" href="/" Match="NavLinkMatch.Prefix" title="Home" aria-label="Home">
                        <i class="bi bi-house-door-fill" aria-hidden="true"></i>
                        <span class="visually-hidden">Home</span>
                    </NavLink>
                </div>

                <div class="nav-rail__clusters" role="presentation">
                    @if (splitIndex > 0)
                    {
                        <div class="nav-rail__stack nav-rail__stack--top" role="presentation">
                            @for (var index = 0; index < splitIndex; index++)
                            {
                                var group = groups[index];
                                var i = index; // capture loop variable to avoid closure capturing the mutated 'index'
                                <button type="button"
                                        class="rail-icon @(i == activeGroupIndex ? "active" : null)"
                                        role="tab"
                                        title="@group.DisplayName"
                                        aria-selected="@(i == activeGroupIndex)"
                                        @onclick="async () => await SetActive(i)">
                                    <i class="@group.IconCss" aria-hidden="true"></i>
                                </button>
                            }
                        </div>
                    }

                    @if (splitIndex > 0 && splitIndex < groups.Count)
                    {
                        <div class="nav-rail__divider" aria-hidden="true"></div>
                    }

                    @if (splitIndex < groups.Count)
                    {
                        <div class="nav-rail__stack nav-rail__stack--bottom" role="presentation">
                            @for (var index = splitIndex; index < groups.Count; index++)
                            {
                                var group = groups[index];
                                var i = index; // capture loop variable to avoid closure capturing the mutated 'index'
                                <button type="button"
                                        class="rail-icon @(i == activeGroupIndex ? "active" : null)"
                                        role="tab"
                                        title="@group.DisplayName"
                                        aria-selected="@(i == activeGroupIndex)"
                                        @onclick="async () => await SetActive(i)">
                                    <i class="@group.IconCss" aria-hidden="true"></i>
                                </button>
                            }
                        </div>
                    }
                </div>

                <div class="rail-spacer" aria-hidden="true"></div>

                <!-- Bottom area: notifications, help, settings + profile/login -->
                <div class="nav-rail__bottom">
                    <NavLink class="rail-icon" href="/settings" title="설정">
                        <i class="bi bi-gear" aria-hidden="true"></i>
                    </NavLink>

                    <NavLink class="rail-icon rail-icon--profile" href="/account" title="내 계정">
                        <i class="bi bi-person-circle" aria-hidden="true"></i>
                    </NavLink>

                    <NavLink class="rail-icon" href="/help" title="도움말">
                        <i class="bi bi-question-circle" aria-hidden="true"></i>
                    </NavLink>

                    <NavLink class="rail-logo--company" href="/" title="회사 로고">
                        <!-- Use framework static web asset path as a fallback -->
                        <img src="_content/NexaCRM.UI/images/logo-36.svg" alt="회사 로고" onerror="this.style.display='none'" />
                    </NavLink>
                </div>
            </div>

            <div class="nav-rail__release" aria-hidden="true">
                <span class="nav-rail__release-label">Release 2025 · W1</span>
                <span class="nav-rail__status">Stable</span>
            </div>
        </div>
    </div>

    <div class="@($"nav-rail__panel{(panelVisible ? "" : " collapsed")}")" role="tabpanel" aria-hidden="@(panelVisible ? "false" : "true")">
        @if (groups.Count == 0)
        {
            <div class="panel-header">
                <div class="panel-title">@Localizer["MenuBrandTitle"]</div>
            </div>
            <p class="text-muted">@Localizer["Favorites"]</p>
        }
        else
        {
            var group = groups[activeGroupIndex];
            <div class="panel-header">
                <div class="panel-title">@group.DisplayName</div>
            </div>
            <nav class="panel-list">
                @foreach (var link in group.Links)
                {
                    <NavLink class="nav-link rail-panel-item" href="@link.Href">
                        <span class="rail-panel-item__icon">
                            <i class="@link.IconCss" aria-hidden="true"></i>
                        </span>
                        <span class="rail-panel-item__label">@link.DisplayName</span>
                    </NavLink>
                }
            </nav>
        }
    </div>
</div>

@code {
    private readonly List<NavigationGroupViewModel> groups = new();
    private int activeGroupIndex;
    private bool panelVisible = true;
    private string[] userRoles = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRolesAsync();
        BuildGroups();
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userRoles = await RolePermissionService.GetUserRolesAsync(authState.User);
        }
        catch
        {
            userRoles = Array.Empty<string>();
        }
    }

    private void BuildGroups()
    {
        groups.Clear();
        var roleSet = new HashSet<string>(userRoles ?? Array.Empty<string>(), StringComparer.OrdinalIgnoreCase);

        foreach (var group in NavigationCatalog.Groups)
        {
            var accessibleLinks = new List<NavigationLinkViewModel>();
            foreach (var link in group.Links)
            {
                if (!IsAccessible(link, roleSet))
                {
                    continue;
                }

                accessibleLinks.Add(new NavigationLinkViewModel(GetHref(link.Href), Localizer[link.ResourceKey]?.Value ?? link.ResourceKey, link.IconCssClass));
            }

            if (accessibleLinks.Count == 0)
            {
                continue;
            }

            groups.Add(new NavigationGroupViewModel(Localizer[group.ResourceKey]?.Value ?? group.ResourceKey, group.IconCssClass, accessibleLinks));
        }

        if (groups.Count == 0)
        {
            panelVisible = false;
            return;
        }

        activeGroupIndex = 0;
        panelVisible = true;

        // Emit a lightweight console log from C# so we can see at runtime whether
        // the groups were built and what their display names are. This helps
        // distinguish between the UI not receiving clicks vs the data not being
        // populated. Fire-and-forget the JS interop call to avoid changing the
        // synchronous nature of this method.
        // BuildGroups: no runtime JS logging in production code.
    }

    private static bool IsAccessible(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (link.RequiredRoles.Count == 0)
        {
            return true;
        }

        if (roles.Count == 0)
        {
            return false;
        }

        foreach (var role in link.RequiredRoles)
        {
            if (roles.Contains(role))
            {
                return true;
            }
        }

        return false;
    }

    private static string GetHref(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return "/";
        }

        return href.StartsWith('/') ? href : $"/{href}";
    }

    private static int GetClusterSplitIndex(int totalGroups)
    {
        if (totalGroups <= 0)
        {
            return 0;
        }

        if (totalGroups == 1)
        {
            return 1;
        }

        if (totalGroups <= 4)
        {
            return Math.Max(1, totalGroups - 1);
        }

        return (int)Math.Ceiling(totalGroups / 2.0);
    }

    private async Task SetActive(int index)
    {
        if (index < 0 || index >= groups.Count)
        {
            return;
        }

        try
        {
            // When a user clicks an already-active group, keep the panel shown
            // instead of toggling it closed. This avoids accidental closing when
            // users click the same icon twice. To hide the panel deliberately,
            // the UI should provide a dedicated control (not the group icon).
            if (activeGroupIndex == index)
            {
                panelVisible = true; // keep the panel open
            }
            else
            {
                activeGroupIndex = index;
                panelVisible = true;
            }

            // Ensure Blazor re-renders on the correct synchronization context.
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            try { _ = JSRuntime.InvokeVoidAsync("console.error", "NavigationRail.SetActive.exception -> " + ex?.ToString()); } catch { }
        }
    }

    // ...existing code...

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Fire-and-forget the JS call to close the menu; don't block the UI thread.
        _ = JSRuntime.InvokeVoidAsync("layoutInterop.toggleMenu", true);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private sealed record NavigationGroupViewModel(string DisplayName, string IconCss, IReadOnlyList<NavigationLinkViewModel> Links);

    private sealed record NavigationLinkViewModel(string Href, string DisplayName, string IconCss);
}
