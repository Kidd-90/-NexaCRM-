@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRolePermissionService RolePermissionService
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> Localizer
@using NexaCRM.UI.Models.Navigation

<div class="nav-rail" role="navigation" aria-label="@Localizer["MainNavigation"]">
    <div class="nav-rail__icons" role="tablist" aria-orientation="vertical">
        @for (var index = 0; index < groups.Count; index++)
        {
            var group = groups[index];
            <button type="button"
                    class="rail-icon @(index == activeGroupIndex ? "active" : null)"
                    role="tab"
                    title="@group.DisplayName"
                    aria-selected="@(index == activeGroupIndex)"
                    @onclick="() => SetActive(index)">
                <i class="@group.IconCss" aria-hidden="true"></i>
            </button>
        }
    </div>

    <div class="nav-rail__panel" role="tabpanel">
        @if (groups.Count == 0)
        {
            <div class="panel-header">
                <div class="panel-title">@Localizer["MenuBrandTitle"]</div>
            </div>
            <p class="text-muted">@Localizer["Favorites"]</p>
        }
        else
        {
            var group = groups[activeGroupIndex];
            <div class="panel-header">
                <div class="panel-title">@group.DisplayName</div>
            </div>
            <nav class="panel-list">
                @foreach (var link in group.Links)
                {
                    <NavLink class="nav-link panel-item" href="@link.Href" @onclick="CloseMenuOnNavigate">
                        <span>@link.DisplayName</span>
                    </NavLink>
                }
            </nav>
        }
    </div>
</div>

@code {
    private readonly List<NavigationGroupViewModel> groups = new();
    private int activeGroupIndex;
    private string[] userRoles = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRolesAsync();
        BuildGroups();
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userRoles = await RolePermissionService.GetUserRolesAsync(authState.User);
        }
        catch
        {
            userRoles = Array.Empty<string>();
        }
    }

    private void BuildGroups()
    {
        groups.Clear();
        var roleSet = new HashSet<string>(userRoles ?? Array.Empty<string>(), StringComparer.OrdinalIgnoreCase);

        foreach (var group in NavigationCatalog.Groups)
        {
            var accessibleLinks = new List<NavigationLinkViewModel>();
            foreach (var link in group.Links)
            {
                if (!IsAccessible(link, roleSet))
                {
                    continue;
                }

                accessibleLinks.Add(new NavigationLinkViewModel(GetHref(link.Href), Localizer[link.ResourceKey]?.Value ?? link.ResourceKey));
            }

            if (accessibleLinks.Count == 0)
            {
                continue;
            }

            groups.Add(new NavigationGroupViewModel(Localizer[group.ResourceKey]?.Value ?? group.ResourceKey, group.IconCssClass, accessibleLinks));
        }

        if (groups.Count == 0)
        {
            return;
        }

        activeGroupIndex = 0;
    }

    private static bool IsAccessible(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (link.RequiredRoles.Count == 0)
        {
            return true;
        }

        if (roles.Count == 0)
        {
            return false;
        }

        foreach (var role in link.RequiredRoles)
        {
            if (roles.Contains(role))
            {
                return true;
            }
        }

        return false;
    }

    private static string GetHref(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return "/";
        }

        return href.StartsWith('/') ? href : $"/{href}";
    }

    private void SetActive(int index)
    {
        if (index < 0 || index >= groups.Count)
        {
            return;
        }

        activeGroupIndex = index;
    }

    private async Task CloseMenuOnNavigate()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("layoutInterop.toggleMenu", true);
        }
        catch
        {
            // ignore
        }
    }

    private sealed record NavigationGroupViewModel(string DisplayName, string IconCss, IReadOnlyList<NavigationLinkViewModel> Links);

    private sealed record NavigationLinkViewModel(string Href, string DisplayName);
}
