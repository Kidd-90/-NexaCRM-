@using System.Linq
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using NexaCRM.UI.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Microsoft.Extensions.Logging.ILogger<NavigationRail> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRolePermissionService RolePermissionService
@inject IAuthenticationService AuthenticationService
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> Localizer
@using NexaCRM.UI.Models.Navigation


<aside class="nav-rail-shell @(panelVisible ? "" : "collapsed")" role="navigation"
       aria-label="@Localizer["MainNavigation"]" @onclick="HandleOutsideClick">
    <div class="nav-rail__icons">
        <div class="rail-spine">
            <div class="rail-spine__segment rail-spine__segment--head">
                <button type="button" class="rail-spine__spark" title="Quick palette" aria-label="Quick palette"
                        @onclick:stopPropagation="true">
                    <i class="bi bi-stars" aria-hidden="true"></i>
                </button>
            </div>

            <div class="rail-spine__segment rail-spine__segment--body">
                <div class="rail-spine__stack" role="tablist" aria-orientation="vertical">
                    @for (var index = 0; index < groups.Count; index++)
                    {
                        var group = groups[index];
                        var isActive = index == activeGroupIndex;
                        <button type="button"
                                class="rail-spine__icon @(isActive ? "is-active" : null)"
                                title="@group.DisplayName" aria-label="@group.DisplayName"
                                aria-selected="@isActive"
                                @onclick="async () => await SetActive(index)"
                                @onclick:stopPropagation="true">
                            <i class="@group.IconCss" aria-hidden="true"></i>
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="rail-footer">
            <div class="rail-spine__segment rail-spine__segment--tail">
                <div class="rail-spine__settings-shell">
                    <button type="button" class="rail-spine__settings" title="설정" aria-label="설정"
                            @onclick:stopPropagation="true">
                        <i class="bi bi-gear" aria-hidden="true"></i>
                    </button>
                </div>
            </div>

        </div>
    </div>

    <div class="nav-rail-panel" role="tabpanel"
         aria-hidden="@(panelVisible ? "false" : "true")">
        <div class="panel-content">
            <!-- Top: user summary (avatar, name, email) -->
            <header class="panel-user">
                <div class="panel-user__avatar" aria-hidden="true">@userInitials</div>
                <div class="panel-user__info">
                    <div class="panel-user__name">@userDisplayName</div>
                    @if (!string.IsNullOrEmpty(userEmail))
                    {
                        <div class="panel-user__email">@userEmail</div>
                    }
                </div>
                <button type="button" class="panel-user__details-btn" title="세부 내역" @onclick="ToggleUserDetails"
                        @onclick:stopPropagation="true">
                    <i class="bi bi-three-dots-vertical" aria-hidden="true"></i>
                </button>
            </header>

            @if (showUserDetails)
            {
                <div class="panel-user-details" @onclick:stopPropagation="true">
                    <div class="panel-user-details__header">
                        <span>사용자 정보</span>
                        <button type="button" class="panel-user-details__close" @onclick="ToggleUserDetails">
                            <i class="bi bi-x" aria-hidden="true"></i>
                        </button>
                    </div>
                    <div class="panel-user-details__list">
                        <div class="panel-user-details__item">
                            <i class="bi bi-person" aria-hidden="true"></i>
                            <div class="panel-user-details__item-content">
                                <div class="panel-user-details__item-label">이름</div>
                                <div class="panel-user-details__item-value">@userDisplayName</div>
                            </div>
                        </div>
                        <div class="panel-user-details__item">
                            <i class="bi bi-envelope" aria-hidden="true"></i>
                            <div class="panel-user-details__item-content">
                                <div class="panel-user-details__item-label">이메일</div>
                                <div class="panel-user-details__item-value">@(!string.IsNullOrEmpty(userEmail) ? userEmail : "N/A")</div>
                            </div>
                        </div>
                        <div class="panel-user-details__item">
                            <i class="bi bi-shield-check" aria-hidden="true"></i>
                            <div class="panel-user-details__item-content">
                                <div class="panel-user-details__item-label">역할</div>
                                <div class="panel-user-details__item-value">@string.Join(", ", userRoles.Length > 0 ? userRoles : new[] { "User" })</div>
                            </div>
                        </div>
                        <div class="panel-user-details__item">
                            <i class="bi bi-calendar-check" aria-hidden="true"></i>
                            <div class="panel-user-details__item-content">
                                <div class="panel-user-details__item-label">마지막 로그인</div>
                                <div class="panel-user-details__item-value">@DateTime.Now.ToString("yyyy-MM-dd HH:mm")</div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-user-details__actions">
                        <button type="button" class="panel-user-details__action-btn" @onclick="NavigateToProfile">
                            <i class="bi bi-person-gear" aria-hidden="true"></i>
                            <span>프로필 설정</span>
                        </button>
                        <button type="button" class="panel-user-details__action-btn panel-user-details__action-btn--danger" @onclick="HandleLogout">
                            <i class="bi bi-box-arrow-right" aria-hidden="true"></i>
                            <span>로그아웃</span>
                        </button>
                    </div>
                </div>
            }

            @if (groups.Count == 0)
            {
                <section class="panel-track panel-track--top" aria-hidden="true">
                    <div class="panel-track__inner">
                        <span class="panel-track__label">@Localizer["MenuBrandTitle"]</span>
                    </div>
                </section>

                <div class="panel-empty">
                    <div class="panel-empty__title">@Localizer["MenuBrandTitle"]</div>
                    <p class="panel-empty__subtitle">@Localizer["Favorites"]</p>
                </div>
            }
            else
            {
                NavigationGroupViewModel? group = groups[activeGroupIndex];

                <section class="panel-track panel-track--top" aria-hidden="true">
                    <div class="panel-track__inner">
                        <span class="panel-track__label">@group.DisplayName</span>
                    </div>
                </section>

                @foreach (var navSection in group.Sections)
                {
                    if (navSection.Links.Count == 0)
                    {
                        continue;
                    }

                    <section class="panel-card" role="group" aria-label="@(navSection.Title ?? group.DisplayName)">
                        @if (!string.IsNullOrEmpty(navSection.Title))
                        {
                            <header class="panel-card__header">@navSection.Title</header>
                        }

                        <nav class="panel-card__menu">
                                    @foreach (NavigationLinkViewModel link in navSection.Links)
                                    {
                                        var anchorActive = IsLinkActive(link.Href) ? "panel-card__item--active" : string.Empty;
                                        <a class="panel-card__item @anchorActive" href="@link.Href"
                                           @onclick="() => OnPanelItemClick(link.Href)" @onclick:preventDefault="true">
                                            <span class="panel-card__icon">
                                                <i class="@link.IconCss" aria-hidden="true"></i>
                                            </span>
                                            <span class="panel-card__label">@link.DisplayName</span>
                                            <span class="panel-card__chevron" aria-hidden="true">
                                                <i class="bi bi-chevron-right"></i>
                                            </span>
                                        </a>
                                    }
                        </nav>
                    </section>
                }
            }

            <section class="panel-track panel-track--bottom" aria-hidden="true">
                <div class="panel-track__inner">
                    <span class="panel-track__label">@Localizer["Documents"]</span>
                </div>
            </section>

            @if (PanelFooter != null)
            {
                <div class="panel-footer-injected">
                    @PanelFooter
                </div>
            }
        </div>
    </div>
</aside>

@code {
    private readonly List<NavigationGroupViewModel> groups = new();
    private static readonly Dictionary<string, string?> LinkSectionMap = new(StringComparer.OrdinalIgnoreCase)
    {
        ["Dashboard"] = null,
        ["StatusAlerts"] = "NavigationSectionStatus",
        ["StatusUpdates"] = "NavigationSectionStatus",
        ["StatusAnnouncements"] = "NavigationSectionStatus",
        ["HistoryRecent"] = "NavigationSectionHistory"
    };
    private static readonly HashSet<string> ManagerDashboardRoles = new(new[] { "Manager", "Admin", "Developer" },
    StringComparer.OrdinalIgnoreCase);
    private int activeGroupIndex;
    private bool panelVisible = true;
    private string[] userRoles = Array.Empty<string>();
    // user summary fields for top of panel
    private string userDisplayName = "";
    private string userEmail = "";
    private string userInitials = "";
    private bool showUserDetails = false;

    [Parameter]
    public RenderFragment? PanelFooter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRolesAsync();
        BuildGroups();
        await LoadUserSummaryAsync();
    }

    private async Task LoadUserSummaryAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user?.Identity?.IsAuthenticated == true)
            {
                userDisplayName = user.FindFirst(ClaimTypes.Name)?.Value ?? user.Identity.Name ?? "User";
                userEmail = user.FindFirst(ClaimTypes.Email)?.Value ?? string.Empty;
                // derive initials from display name
                var parts = (userDisplayName ?? "").Split(' ', StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length == 0)
                {
                    userInitials = "U";
                }
                else if (parts.Length == 1)
                {
                    userInitials = parts[0].Substring(0, 1).ToUpperInvariant();
                }
                else
                {
                    userInitials = (parts[0].Substring(0, 1) + parts[^1].Substring(0, 1)).ToUpperInvariant();
                }
            }
        }
        catch
        {
            // keep defaults
        }
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userRoles = await RolePermissionService.GetUserRolesAsync(authState.User);
        }
        catch
        {
            userRoles = Array.Empty<string>();
        }
    }

    private void BuildGroups()
    {
        groups.Clear();
        var roleSet = new HashSet<string>(userRoles ?? Array.Empty<string>(), StringComparer.OrdinalIgnoreCase);

        foreach (NavigationGroupDefinition group in NavigationCatalog.Groups)
        {
            var entries = new List<(NavigationLinkViewModel Link, string? SectionResourceKey)>();
            foreach (var link in group.Links)
            {
                if (!IsAccessible(link, roleSet))
                {
                    continue;
                }

                var href = ResolveLinkHref(link, roleSet);
                if (string.IsNullOrWhiteSpace(href))
                {
                    continue;
                }

                var displayName = Localizer[link.ResourceKey]?.Value ?? link.ResourceKey;
                var sectionResourceKey = GetSectionResourceKey(link);
                entries.Add((new NavigationLinkViewModel(href, displayName, link.IconCssClass), sectionResourceKey));
            }

            if (entries.Count == 0)
            {
                continue;
            }

            var sections = BuildSections(entries);
            groups.Add(new NavigationGroupViewModel(Localizer[group.ResourceKey]?.Value ?? group.ResourceKey, group.IconCssClass,
            sections));
        }

        if (groups.Count == 0)
        {
            panelVisible = false;
            return;
        }

        activeGroupIndex = 0;
        panelVisible = true;

        // Emit a lightweight console log from C# so we can see at runtime whether
        // the groups were built and what their display names are. This helps
        // distinguish between the UI not receiving clicks vs the data not being
        // populated. Fire-and-forget the JS interop call to avoid changing the
        // synchronous nature of this method.
        // BuildGroups: no runtime JS logging in production code.
    }

    private IReadOnlyList<NavigationSectionViewModel> BuildSections(List<(NavigationLinkViewModel Link, string?
    SectionResourceKey)> entries)
    {
        var sections = new List<NavigationSectionViewModel>();
        List<NavigationLinkViewModel>? currentLinks = null;
        string? currentSectionKey = null;

        foreach (var entry in entries)
        {
            if (currentLinks is null || !string.Equals(entry.SectionResourceKey, currentSectionKey,
            StringComparison.OrdinalIgnoreCase))
            {
                currentSectionKey = entry.SectionResourceKey;
                currentLinks = new List<NavigationLinkViewModel>();
                sections.Add(new NavigationSectionViewModel(currentSectionKey, LocalizeSection(currentSectionKey), currentLinks));
            }

            currentLinks.Add(entry.Link);
        }

        return sections;
    }

    private string? LocalizeSection(string? sectionResourceKey)
    {
        if (string.IsNullOrEmpty(sectionResourceKey))
        {
            return null;
        }

        try
        {
            return Localizer[sectionResourceKey]?.Value ?? sectionResourceKey;
        }
        catch
        {
            return sectionResourceKey;
        }
    }

    private static string? GetSectionResourceKey(NavigationLinkDefinition link)
    {
        return LinkSectionMap.TryGetValue(link.ResourceKey, out var sectionKey) ? sectionKey : null;
    }

    private string ResolveLinkHref(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (!string.Equals(link.ResourceKey, "Dashboard", StringComparison.OrdinalIgnoreCase))
        {
            return GetHref(link.Href);
        }

        foreach (var role in roles)
        {
            if (ManagerDashboardRoles.Contains(role))
            {
                return GetHref("sales-manager-dashboard");
            }
        }

        return GetHref("main-dashboard");
    }

    private static bool IsAccessible(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (link.RequiredRoles.Count == 0)
        {
            return true;
        }

        if (roles.Count == 0)
        {
            return false;
        }

        foreach (var role in link.RequiredRoles)
        {
            if (roles.Contains(role))
            {
                return true;
            }
        }

        return false;
    }

    private static string GetHref(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return "/";
        }

        return href.StartsWith('/') ? href : $"/{href}";
    }

    private async Task SetActive(int index)
    {
        if (index < 0 || index >= groups.Count)
        {
            return;
        }

        try
        {
            // Log entry for diagnostics
            try { _ = JSRuntime.InvokeVoidAsync("console.log", $"NavigationRail.SetActive called -> index={index}, activeGroupIndex={activeGroupIndex}"); } catch { }
            try { Logger?.LogInformation("NavigationRail.SetActive called -> index={Index}, activeGroupIndex={Active}", index, activeGroupIndex); } catch { }

            // Toggle behavior: clicking the same icon toggles the panel (open/close).
            // Clicking a different icon switches active group and ensures panel is visible.
            if (activeGroupIndex == index)
            {
                // toggle
                panelVisible = !panelVisible;
            }
            else
            {
                activeGroupIndex = index;
                panelVisible = true;
            }

            // Log state after update
            try { _ = JSRuntime.InvokeVoidAsync("console.log", $"NavigationRail.SetActive updated -> index={index}, activeGroupIndex={activeGroupIndex}, panelVisible={panelVisible}"); } catch { }
            try { Logger?.LogInformation("NavigationRail.SetActive updated -> index={Index}, activeGroupIndex={Active}, panelVisible={Visible}", index, activeGroupIndex, panelVisible); } catch { }

            // Ensure Blazor re-renders on the correct synchronization context.
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            try { _ = JSRuntime.InvokeVoidAsync("console.error", "NavigationRail.SetActive.exception -> " + ex?.ToString()); }
            catch
            { }
        }
    }

    private void OnPanelItemClick(string href)
    {
        try
        {
            // Close the panel when a navigation item is clicked to mirror overlay/panel UX
            panelVisible = false;
            showUserDetails = false;

            // Debug: emit a console log so we can confirm the click handler executed in the browser devtools console
            try { _ = JSRuntime.InvokeVoidAsync("console.log", $"OnPanelItemClick -> {href}"); } catch { }

            try { Logger?.LogInformation("NavigationRail.OnPanelItemClick -> {Href}", href); } catch { }

            // Use NavigateTo to ensure navigation happens under our control
            NavigationManager.NavigateTo(href);
        }
        catch
        {
            // swallow — navigation will still work through NavLink fallback
        }
    }

    private void ToggleUserDetails()
    {
        showUserDetails = !showUserDetails;
        StateHasChanged();
    }

    private void HandleOutsideClick()
    {
        if (showUserDetails)
        {
            showUserDetails = false;
            StateHasChanged();
        }
    }

    private void NavigateToProfile()
    {
        showUserDetails = false;
        NavigationManager.NavigateTo("/settings/profile");
    }

    private async Task HandleLogout()
    {
        try
        {
            showUserDetails = false;

            // AuthenticationService를 통해 완전한 로그아웃 처리
            await AuthenticationService.LogoutAsync();

            // 로그아웃 후 로그인 페이지로 리디렉션
            // LogoutAsync 내부에서 이미 처리되지만, 명시적으로 추가
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            // 로그아웃 실패 시에도 로그인 페이지로 이동
            try
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Logout error: " + ex?.ToString());
            }
            catch { }

            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    private sealed record NavigationGroupViewModel(string DisplayName, string IconCss,
    IReadOnlyList<NavigationSectionViewModel> Sections);

    private sealed record NavigationSectionViewModel(string? ResourceKey, string? Title,
    IReadOnlyList<NavigationLinkViewModel> Links);

    private sealed record NavigationLinkViewModel(string Href, string DisplayName, string IconCss);
}

@functions {
    private bool IsLinkActive(string href)
    {
        if (string.IsNullOrEmpty(href)) return false;
        var current = NavigationManager.Uri;
        var baseUri = NavigationManager.BaseUri;
        // Normalize
        var relative = current.StartsWith(baseUri, StringComparison.OrdinalIgnoreCase) ? current.Substring(baseUri.Length) : current;
        if (!relative.StartsWith('/')) relative = "/" + relative;
        if (!href.StartsWith('/')) href = "/" + href;
        return relative.StartsWith(href.TrimStart('/'), StringComparison.OrdinalIgnoreCase) || relative.Equals(href.TrimStart('/'), StringComparison.OrdinalIgnoreCase);
    }
}
