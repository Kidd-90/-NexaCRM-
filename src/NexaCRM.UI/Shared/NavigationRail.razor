@using System.Linq
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using NexaCRM.UI.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRolePermissionService RolePermissionService
@inject IAuthenticationService AuthenticationService
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> Localizer
@using NexaCRM.UI.Models.Navigation

@implements IDisposable

<div class="@($"nav-rail{(panelVisible ? "" : " collapsed")}")" role="navigation" aria-label="@Localizer["MainNavigation"]" @onclick="HandleOutsideClick">
    <div class="nav-rail__icons">
        <div class="nav-rail__main">
            <div class="nav-rail__accent" aria-hidden="true">
                <span class="nav-rail__accent-icon">
                    <svg viewBox="0 0 32 32" aria-hidden="true" focusable="false">
                        <path d="M16 4v24M28 16H4M24.97 7.03 7.03 24.97M24.97 24.97 7.03 7.03" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </span>
                <span class="nav-rail__accent-line"></span>
            </div>
            <div class="nav-rail__main-inner" role="tablist" aria-orientation="vertical">
                <!-- Top logo button: links to home using the company mark -->
                <NavLink class="rail-icon rail-logo" href="/" Match="NavLinkMatch.Prefix" title="Home" aria-label="Home">
                    <img src="/_content/NexaCRM.UI/images/naf-logo.png" alt="NAF" class="rail-logo__image" />
                    <span class="visually-hidden">Home</span>
                </NavLink>

                @for (var index = 0; index < groups.Count; index++)
                {
                    NavigationGroupViewModel? group = groups[index];
                    var i = index; // capture loop variable to avoid closure capturing the mutated 'index'
                <button type="button"
                    class="rail-icon @(i == activeGroupIndex ? "active" : null)"
                    role="tab"
                    title="@group.DisplayName"
                    aria-selected="@(i == activeGroupIndex)"
                    @onclick="async () => await SetActive(i)">
                        <i class="@group.IconCss" aria-hidden="true"></i>
                    </button>
                }
            </div>

            <div class="nav-rail__badge" aria-hidden="true">
                <span class="nav-rail__badge-line"></span>
                <span class="nav-rail__badge-text">REAGLE 2025&nbsp;·&nbsp;NAV</span>
            </div>
        </div>

        <!-- Bottom area: notifications, help, settings + profile/login -->
        <div class="nav-rail__bottom">
            <div class="nav-rail__badge nav-rail__badge--footer" aria-hidden="true">
                <span class="nav-rail__badge-text">REAGLE 2025&nbsp;·&nbsp;NAV</span>
            </div>
            <span class="nav-rail__bottom-divider" aria-hidden="true"></span>
            <button type="button" class="rail-icon rail-icon--inverse" role="tab" title="설정">
                <i class="bi bi-gear" aria-hidden="true"></i>
            </button>
        </div>
    </div>

    <div class="@($"nav-rail__panel{(panelVisible ? "" : " collapsed")}")" role="tabpanel" aria-hidden="@(panelVisible ? "false" : "true")">
        <!-- Top: user summary (avatar, name, email) -->
        <div class="panel-user">
            <div class="panel-user__avatar" aria-hidden="true">@userInitials</div>
            <div class="panel-user__info">
                <div class="panel-user__name">@userDisplayName</div>
                @if (!string.IsNullOrEmpty(userEmail))
                {
                    <div class="panel-user__email">@userEmail</div>
                }
            </div>
            <button type="button" 
                    class="panel-user__details-btn" 
                    title="세부 내역"
                    @onclick="ToggleUserDetails"
                    @onclick:stopPropagation="true">
                <i class="bi bi-three-dots-vertical" aria-hidden="true"></i>
            </button>
        </div>
        
        @if (showUserDetails)
        {
            <div class="panel-user-details" @onclick:stopPropagation="true">
                <div class="panel-user-details__header">
                    <span>사용자 정보</span>
                    <button type="button" class="panel-user-details__close" @onclick="ToggleUserDetails">
                        <i class="bi bi-x" aria-hidden="true"></i>
                    </button>
                </div>
                <div class="panel-user-details__list">
                    <div class="panel-user-details__item">
                        <i class="bi bi-person" aria-hidden="true"></i>
                        <div class="panel-user-details__item-content">
                            <div class="panel-user-details__item-label">이름</div>
                            <div class="panel-user-details__item-value">@userDisplayName</div>
                        </div>
                    </div>
                    <div class="panel-user-details__item">
                        <i class="bi bi-envelope" aria-hidden="true"></i>
                        <div class="panel-user-details__item-content">
                            <div class="panel-user-details__item-label">이메일</div>
                            <div class="panel-user-details__item-value">@(!string.IsNullOrEmpty(userEmail) ? userEmail : "N/A")</div>
                        </div>
                    </div>
                    <div class="panel-user-details__item">
                        <i class="bi bi-shield-check" aria-hidden="true"></i>
                        <div class="panel-user-details__item-content">
                            <div class="panel-user-details__item-label">역할</div>
                            <div class="panel-user-details__item-value">@string.Join(", ", userRoles.Length > 0 ? userRoles : new[] { "User" })</div>
                        </div>
                    </div>
                    <div class="panel-user-details__item">
                        <i class="bi bi-calendar-check" aria-hidden="true"></i>
                        <div class="panel-user-details__item-content">
                            <div class="panel-user-details__item-label">마지막 로그인</div>
                            <div class="panel-user-details__item-value">@DateTime.Now.ToString("yyyy-MM-dd HH:mm")</div>
                        </div>
                    </div>
                </div>
                <div class="panel-user-details__actions">
                    <button type="button" class="panel-user-details__action-btn" @onclick="NavigateToProfile">
                        <i class="bi bi-person-gear" aria-hidden="true"></i>
                        <span>프로필 설정</span>
                    </button>
                    <button type="button" class="panel-user-details__action-btn panel-user-details__action-btn--danger" @onclick="HandleLogout">
                        <i class="bi bi-box-arrow-right" aria-hidden="true"></i>
                        <span>로그아웃</span>
                    </button>
                </div>
            </div>
        }

        @if (groups.Count == 0)
        {
            <div class="panel-header">
                <div class="panel-title">@Localizer["MenuBrandTitle"]</div>
            </div>
            <p class="text-muted">@Localizer["Favorites"]</p>
        }
        else
        {
            NavigationGroupViewModel? group = groups[activeGroupIndex];
            <div class="panel-title panel-title--section">
                <div class="panel-title panel-title--sectiond">@group.DisplayName</div>
            </div>

            @foreach (var navSection in group.Sections)
            {
                if (navSection.Links.Count == 0)
                {
                    continue;
                }

                <div class="panel-section" role="group" aria-label="@(navSection.Title ?? group.DisplayName)">
                    @if (!string.IsNullOrEmpty(navSection.Title))
                    {
                        if (navSection.ResourceKey is "NavigationSectionStatus" or "NavigationSectionHistory")
                        {
                            <div class="divider-soft" aria-hidden="true"></div>
                        }

                        <div class="panel-title panel-title--section">
                            @navSection.Title
                        </div>
                    }

                    <nav class="panel-list">
                        @foreach (NavigationLinkViewModel link in navSection.Links)
                        {
                            <NavLink class="nav-link rail-panel-item" href="@link.Href">
                                <span class="rail-panel-item__icon">
                                    <i class="@link.IconCss" aria-hidden="true"></i>
                                </span>
                                <span class="rail-panel-item__label">@link.DisplayName</span>
                            </NavLink>
                        }
                    </nav>
                </div>
            }
        }

        <!-- Bottom: per-page injected area -->
        @if (PanelFooter != null)
        {
            <div class="panel-footer">
                @PanelFooter
            </div>
        }
    </div>
</div>

@code {
    private readonly List<NavigationGroupViewModel> groups = new();
    private static readonly Dictionary<string, string?> LinkSectionMap = new(StringComparer.OrdinalIgnoreCase)
    {
        ["Dashboard"] = null,
        ["StatusAlerts"] = "NavigationSectionStatus",
        ["StatusUpdates"] = "NavigationSectionStatus",
        ["StatusAnnouncements"] = "NavigationSectionStatus",
        ["HistoryRecent"] = "NavigationSectionHistory"
    };
    private static readonly HashSet<string> ManagerDashboardRoles = new(new[] { "Manager", "Admin", "Developer" }, StringComparer.OrdinalIgnoreCase);
    private int activeGroupIndex;
    private bool panelVisible = true;
    private string[] userRoles = Array.Empty<string>();
    // user summary fields for top of panel
    private string userDisplayName = "";
    private string userEmail = "";
    private string userInitials = "";
    private bool showUserDetails = false;

    [Parameter]
    public RenderFragment? PanelFooter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRolesAsync();
        BuildGroups();
        await LoadUserSummaryAsync();
    }

    private async Task LoadUserSummaryAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user?.Identity?.IsAuthenticated == true)
            {
                userDisplayName = user.FindFirst(ClaimTypes.Name)?.Value ?? user.Identity.Name ?? "User";
                userEmail = user.FindFirst(ClaimTypes.Email)?.Value ?? string.Empty;
                // derive initials from display name
                var parts = (userDisplayName ?? "").Split(' ', StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length == 0)
                {
                    userInitials = "U";
                }
                else if (parts.Length == 1)
                {
                    userInitials = parts[0].Substring(0, 1).ToUpperInvariant();
                }
                else
                {
                    userInitials = (parts[0].Substring(0,1) + parts[^1].Substring(0,1)).ToUpperInvariant();
                }
            }
        }
        catch
        {
            // keep defaults
        }
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userRoles = await RolePermissionService.GetUserRolesAsync(authState.User);
        }
        catch
        {
            userRoles = Array.Empty<string>();
        }
    }

    private void BuildGroups()
    {
        groups.Clear();
        var roleSet = new HashSet<string>(userRoles ?? Array.Empty<string>(), StringComparer.OrdinalIgnoreCase);

        foreach (NavigationGroupDefinition group in NavigationCatalog.Groups)
        {
            var entries = new List<(NavigationLinkViewModel Link, string? SectionResourceKey)>();
            foreach (var link in group.Links)
            {
                if (!IsAccessible(link, roleSet))
                {
                    continue;
                }

                var href = ResolveLinkHref(link, roleSet);
                if (string.IsNullOrWhiteSpace(href))
                {
                    continue;
                }

                var displayName = Localizer[link.ResourceKey]?.Value ?? link.ResourceKey;
                var sectionResourceKey = GetSectionResourceKey(link);
                entries.Add((new NavigationLinkViewModel(href, displayName, link.IconCssClass), sectionResourceKey));
            }

            if (entries.Count == 0)
            {
                continue;
            }

            var sections = BuildSections(entries);
            groups.Add(new NavigationGroupViewModel(Localizer[group.ResourceKey]?.Value ?? group.ResourceKey, group.IconCssClass, sections));
        }

        if (groups.Count == 0)
        {
            panelVisible = false;
            return;
        }

        activeGroupIndex = 0;
        panelVisible = true;

        // Emit a lightweight console log from C# so we can see at runtime whether
        // the groups were built and what their display names are. This helps
        // distinguish between the UI not receiving clicks vs the data not being
        // populated. Fire-and-forget the JS interop call to avoid changing the
        // synchronous nature of this method.
        // BuildGroups: no runtime JS logging in production code.
    }

    private IReadOnlyList<NavigationSectionViewModel> BuildSections(List<(NavigationLinkViewModel Link, string? SectionResourceKey)> entries)
    {
        var sections = new List<NavigationSectionViewModel>();
        List<NavigationLinkViewModel>? currentLinks = null;
        string? currentSectionKey = null;

        foreach (var entry in entries)
        {
            if (currentLinks is null || !string.Equals(entry.SectionResourceKey, currentSectionKey, StringComparison.OrdinalIgnoreCase))
            {
                currentSectionKey = entry.SectionResourceKey;
                currentLinks = new List<NavigationLinkViewModel>();
                sections.Add(new NavigationSectionViewModel(currentSectionKey, LocalizeSection(currentSectionKey), currentLinks));
            }

            currentLinks.Add(entry.Link);
        }

        return sections;
    }

    private string? LocalizeSection(string? sectionResourceKey)
    {
        if (string.IsNullOrEmpty(sectionResourceKey))
        {
            return null;
        }

        try
        {
            return Localizer[sectionResourceKey]?.Value ?? sectionResourceKey;
        }
        catch
        {
            return sectionResourceKey;
        }
    }

    private static string? GetSectionResourceKey(NavigationLinkDefinition link)
    {
        return LinkSectionMap.TryGetValue(link.ResourceKey, out var sectionKey) ? sectionKey : null;
    }

    private string ResolveLinkHref(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (!string.Equals(link.ResourceKey, "Dashboard", StringComparison.OrdinalIgnoreCase))
        {
            return GetHref(link.Href);
        }

        foreach (var role in roles)
        {
            if (ManagerDashboardRoles.Contains(role))
            {
                return GetHref("sales-manager-dashboard");
            }
        }

        return GetHref("main-dashboard");
    }

    private static bool IsAccessible(NavigationLinkDefinition link, HashSet<string> roles)
    {
        if (link.RequiredRoles.Count == 0)
        {
            return true;
        }

        if (roles.Count == 0)
        {
            return false;
        }

        foreach (var role in link.RequiredRoles)
        {
            if (roles.Contains(role))
            {
                return true;
            }
        }

        return false;
    }

    private static string GetHref(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return "/";
        }

        return href.StartsWith('/') ? href : $"/{href}";
    }

    private async Task SetActive(int index)
    {
        if (index < 0 || index >= groups.Count)
        {
            return;
        }

        try
        {
            // When a user clicks an already-active group, keep the panel shown
            // instead of toggling it closed. This avoids accidental closing when
            // users click the same icon twice. To hide the panel deliberately,
            // the UI should provide a dedicated control (not the group icon).
            if (activeGroupIndex == index)
            {
                panelVisible = true; // keep the panel open
            }
            else
            {
                activeGroupIndex = index;
                panelVisible = true;
            }

            // Ensure Blazor re-renders on the correct synchronization context.
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            try { _ = JSRuntime.InvokeVoidAsync("console.error", "NavigationRail.SetActive.exception -> " + ex?.ToString()); } catch { }
        }
    }

    private void ToggleUserDetails()
    {
        showUserDetails = !showUserDetails;
        StateHasChanged();
    }

    private void HandleOutsideClick()
    {
        if (showUserDetails)
        {
            showUserDetails = false;
            StateHasChanged();
        }
    }

    private void NavigateToProfile()
    {
        showUserDetails = false;
        NavigationManager.NavigateTo("/settings/profile");
    }

    private async Task HandleLogout()
    {
        try
        {
            showUserDetails = false;
            
            // AuthenticationService를 통해 완전한 로그아웃 처리
            await AuthenticationService.LogoutAsync();
            
            // 로그아웃 후 로그인 페이지로 리디렉션
            // LogoutAsync 내부에서 이미 처리되지만, 명시적으로 추가
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            // 로그아웃 실패 시에도 로그인 페이지로 이동
            try 
            { 
                await JSRuntime.InvokeVoidAsync("console.error", "Logout error: " + ex?.ToString()); 
            } 
            catch { }
            
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    // ...existing code...

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Fire-and-forget the JS call to close the menu; don't block the UI thread.
        _ = JSRuntime.InvokeVoidAsync("layoutInterop.toggleMenu", true);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private sealed record NavigationGroupViewModel(string DisplayName, string IconCss, IReadOnlyList<NavigationSectionViewModel> Sections);

    private sealed record NavigationSectionViewModel(string? ResourceKey, string? Title, IReadOnlyList<NavigationLinkViewModel> Links);

    private sealed record NavigationLinkViewModel(string Href, string DisplayName, string IconCss);
}
