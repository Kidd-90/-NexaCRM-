@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Localization
@using NexaCRM.UI.Models.Navigation
@using NexaCRM.UI.Services
@using NexaCRM.UI.Services.Interfaces
@inject IStringLocalizer<NavMenu> Localizer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IRolePermissionService RolePermissionService
@inject INavigationStateService NavigationStateService
@inject IJSRuntime JSRuntime

<div class="shell-nav" @onclick:stopPropagation="true">
    <header class="shell-nav__header">
        <div class="shell-nav__brand">
            <span class="shell-nav__logo" aria-hidden="true">
                <i class="bi bi-cube"></i>
            </span>
            <div class="shell-nav__titles">
                <strong class="shell-nav__title">@Localizer["MenuBrandTitle"]</strong>
                <span class="shell-nav__subtitle">@Localizer["MenuBrandSubtitle"]</span>
            </div>
        </div>
        <button type="button" class="shell-nav__close" @onclick="CloseNavMenu" aria-label="@Localizer["CloseMenu"]">
            <i class="bi bi-x-lg" aria-hidden="true"></i>
        </button>
    </header>

    <div class="shell-nav__content" aria-label='@Localizer["MainNavigation"]'>
        @if (Favorites?.Count > 0)
        {
            <section class="shell-nav__section">
                <header class="shell-nav__section-heading">
                    <span class="shell-nav__section-title">@Localizer["Favorites"]</span>
                </header>
                <ul class="shell-nav__quick-links" role="list">
                    @foreach (var favorite in Favorites)
                    {
                        <li>
                            <button type="button" class="shell-nav__quick-link" @onclick="() => NavigateToFavorite(favorite)">
                                <span class="shell-nav__quick-icon"><i class="@favorite.IconCssClass" aria-hidden="true"></i></span>
                                <span class="shell-nav__quick-label">@favorite.Label</span>
                            </button>
                        </li>
                    }
                </ul>
            </section>
        }

        @if (RecentLinks?.Count > 0)
        {
            <section class="shell-nav__section">
                <header class="shell-nav__section-heading shell-nav__section-heading--compact">
                    <span class="shell-nav__section-title">@Localizer["RecentlyVisited"]</span>
                    <button class="shell-nav__clear" type="button" @onclick="ClearRecentAsync">
                        @Localizer["ClearRecent"]
                    </button>
                </header>
                <ul class="shell-nav__recent" role="list">
                    @foreach (var entry in RecentLinks.Take(6))
                    {
                        var linkDefinition = NavigationCatalog.FindByUri(entry.Href);
                        var display = linkDefinition is null ? entry.Title : Localizer[linkDefinition.ResourceKey]?.Value ?? entry.Title;
                        var icon = linkDefinition?.IconCssClass ?? entry.IconCssClass;
                        <li>
                            <button type="button" class="shell-nav__recent-link" @onclick="() => NavigateTo(entry.Href)">
                                <span class="shell-nav__recent-icon"><i class="@icon" aria-hidden="true"></i></span>
                                <span class="shell-nav__recent-label">@display</span>
                            </button>
                        </li>
                    }
                </ul>
            </section>
        }

        <section class="shell-nav__section">
            <nav class="shell-nav__groups" aria-label="@Localizer["MainNavigation"]">
                @foreach (var group in accessibleGroups)
                {
                    <details class="shell-nav__group" open>
                        <summary class="shell-nav__group-summary">
                            <span class="shell-nav__group-icon"><i class="@group.IconCss" aria-hidden="true"></i></span>
                            <span class="shell-nav__group-title">@group.DisplayName</span>
                        </summary>
                        <ul class="shell-nav__group-links">
                            @foreach (var item in group.Links)
                            {
                                <li>
                                    <NavLink class="shell-nav__link" href="@item.Href" @onclick="CloseNavMenu">
                                        <span class="shell-nav__link-icon"><i class="@item.IconCss" aria-hidden="true"></i></span>
                                        <span class="shell-nav__link-text">@item.DisplayName</span>
                                    </NavLink>
                                </li>
                            }
                        </ul>
                    </details>
                }
            </nav>
        </section>

        <AuthorizeView>
            <Authorized>
                <footer class="shell-nav__footer">
                    <button type="button" class="shell-nav__logout" @onclick="Logout">
                        <i class="bi bi-box-arrow-right" aria-hidden="true"></i>
                        <span>@Localizer["Logout"]</span>
                    </button>
                </footer>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter] public IReadOnlyList<UserFavoriteShortcut> Favorites { get; set; } = Array.Empty<UserFavoriteShortcut>();
    [Parameter] public IReadOnlyList<NavigationHistoryEntry> RecentLinks { get; set; } = Array.Empty<NavigationHistoryEntry>();
    [Parameter] public EventCallback OnNavigate { get; set; }

    private readonly List<NavigationGroupViewModel> accessibleGroups = new();
    private string[] userRoles = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadRolesAsync();
        BuildGroups();
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userRoles = await RolePermissionService.GetUserRolesAsync(authState.User);
        }
        catch
        {
            userRoles = Array.Empty<string>();
        }
    }

    private void BuildGroups()
    {
        accessibleGroups.Clear();
        var roleSet = new HashSet<string>(userRoles ?? Array.Empty<string>(), StringComparer.OrdinalIgnoreCase);

        foreach (var group in NavigationCatalog.Groups)
        {
            var accessibleLinks = new List<NavigationLinkViewModel>();
            foreach (var link in group.Links)
            {
                if (!IsLinkAllowed(link, roleSet))
                {
                    continue;
                }

                var displayName = Localizer[link.ResourceKey]?.Value ?? link.ResourceKey;
                accessibleLinks.Add(new NavigationLinkViewModel(GetHref(link.Href), displayName, link.IconCssClass));
            }

            if (accessibleLinks.Count == 0)
            {
                continue;
            }

            accessibleGroups.Add(new NavigationGroupViewModel(Localizer[group.ResourceKey]?.Value ?? group.ResourceKey, group.IconCssClass, accessibleLinks));
        }
    }

    private static bool IsLinkAllowed(NavigationLinkDefinition link, HashSet<string> userRoleSet)
    {
        if (link.RequiredRoles.Count == 0)
        {
            return true;
        }

        if (userRoleSet.Count == 0)
        {
            return false;
        }

        foreach (var role in link.RequiredRoles)
        {
            if (userRoleSet.Contains(role))
            {
                return true;
            }
        }

        return false;
    }

    private static string GetHref(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            return "/";
        }

        return href.StartsWith('/') ? href : $"/{href}";
    }

    private async Task NavigateToFavorite(UserFavoriteShortcut favorite)
    {
        if (favorite is null || !favorite.HasTarget)
        {
            return;
        }

        await NavigateToInternal(favorite.TargetUri);
    }

    private async Task NavigateTo(string href)
    {
        if (string.IsNullOrWhiteSpace(href))
        {
            await NavigateToInternal("/");
        }
        else
        {
            await NavigateToInternal(GetHref(href));
        }
    }

    private async Task NavigateToInternal(string target)
    {
        NavigationManager.NavigateTo(target);
        await CloseNavMenu();
        if (OnNavigate.HasDelegate)
        {
            await OnNavigate.InvokeAsync();
        }
    }

    private async Task CloseNavMenu()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("layoutInterop.toggleMenu", true);
        }
        catch
        {
            // ignore
        }
    }

    private async Task ClearRecentAsync()
    {
        await NavigationStateService.ClearRecentAsync();
    }

    private async Task Logout()
    {
        await CloseNavMenu();
        await AuthenticationService.LogoutAsync();
    }

    private sealed record NavigationGroupViewModel(string DisplayName, string IconCss, IReadOnlyList<NavigationLinkViewModel> Links);

    private sealed record NavigationLinkViewModel(string Href, string DisplayName, string IconCss);
}
