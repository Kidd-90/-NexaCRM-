@inherits LayoutComponentBase
@implements IDisposable
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using NexaCRM.UI.Models.Navigation
@using NexaCRM.UI.Services.Interfaces
@inject IDeviceService DeviceService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserFavoritesService UserFavoritesService
@inject INotificationFeedService NotificationFeed
@inject INavigationStateService NavigationStateService

<HeadContent>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/open-iconic@1.1.1/font/css/open-iconic-bootstrap.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pretendard/dist/web/variable/pretendardvariable.css" />
    <link rel="stylesheet" href="_content/NexaCRM.UI/css/app.css" />
    <link rel="stylesheet" href="_content/NexaCRM.UI/css/mobile.css" />
    <link rel="stylesheet" href="_content/NexaCRM.UI/css/components/login-status.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        (function () {
            // idempotent loader: only load the UI helper scripts once across hosts
            if (window.__nexacrm_ui_scripts_loaded) return;
            window.__nexacrm_ui_scripts_loaded = true;

            var base = '_content/NexaCRM.UI/js/';
            var files = [
                'auth-manager.js',
                'navigation.js',
                'culture.js',
                'theme-manager.js',
                'device.js',
                'interactions.js',
                'client-console-forwarder.js',
                'csv-export.js'
            ];

            files.forEach(function (file) {
                var rel = base + file;
                var selector = 'script[src="' + rel + '"], script[src="/' + rel + '"]';
                if (document.querySelector(selector)) return;
                var s = document.createElement('script');
                s.src = rel;
                s.defer = true;
                document.head.appendChild(s);
            });
        })();
    </script>
</HeadContent>

<div class="page app-shell @(isMobile ? "app-shell--mobile" : "app-shell--desktop")">
    @if (isMobile)
    {
        <div class="sidebar collapse">
            <NavMenu Favorites="favoriteShortcuts" RecentLinks="recentLinks" OnNavigate="HandleNavigationAsync" />
        </div>
        <div class="mobile-overlay"></div>
    }
    else
    {
        <NavigationRail />
    }

    <div class="app-shell__background">
        <div class="app-shell__surface">
            <header class="app-shell__header">
                <div class="app-shell__brand">
                    <button type="button" class="app-shell__nav-toggle" @onclick="ToggleNavMenu" aria-label="Toggle navigation">
                        <i class="bi bi-list" aria-hidden="true"></i>
                    </button>
                    <a class="app-shell__logo" href="/">
                        <span class="app-shell__logo-mark">NC</span>
                        <span class="app-shell__logo-text">NexaCRM</span>
                    </a>
                </div>

                <NavigationQuickSearch OnNavigate="HandleSearchNavigate" />

                <div class="app-shell__actions">
                    <button type="button" class="app-shell__theme theme-toggle-button" data-theme-toggle aria-label="Switch theme">
                        <span class="theme-light-icon">ðŸŒž</span>
                        <span class="theme-dark-icon">ðŸŒ™</span>
                    </button>
                    <button class="app-shell__action" title="Notifications" @onclick="OnNotificationsClick">
                        <i class="bi bi-bell" aria-hidden="true"></i>
                        @if (unreadNotificationsCount > 0)
                        {
                            <span class="app-shell__badge" aria-label="@unreadNotificationsCount unread notifications">@unreadNotificationsCount</span>
                        }
                    </button>
                    <AuthorizeView>
                        <Authorized>
                            <button class="app-shell__profile" @onclick="GoToProfile" title="Open profile settings">
                                <span class="app-shell__avatar">@userInitials</span>
                                <span class="app-shell__profile-name">@userDisplayName</span>
                            </button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="app-shell__profile" @onclick="GoToProfile" title="Sign in">
                                <span class="app-shell__avatar"><i class="bi bi-person" aria-hidden="true"></i></span>
                                <span class="app-shell__profile-name">@userDisplayName</span>
                            </button>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </header>

            <section class="app-shell__page-header">
                <div class="app-shell__page-meta">
                </div>
                <!-- Add quick search within the page header for faster navigation -->
                <div class="app-shell__page-search">
                    <NavigationQuickSearch OnNavigate="HandleSearchNavigate" />
                </div>

                <div class="app-shell__page-actions">
                    @if (!isMobile)
                    {
                        <button class="app-shell__action" title="Notifications" @onclick="OnNotificationsClick">
                            <i class="bi bi-bell" aria-hidden="true"></i>
                            @if (unreadNotificationsCount > 0)
                            {
                                <span class="app-shell__badge" aria-label="@unreadNotificationsCount unread notifications">@unreadNotificationsCount</span>
                            }
                        </button>
                    }
                    else
                    {
                        <button class="app-shell__action" title="@headerActionLabel">
                            <i class="@headerActionIcon" aria-hidden="true"></i>
                        </button>
                    }
                </div>
            </section>

        </div>

        <article class="content app-shell__content">
            @Body
        </article>
    </div>

    @if (isMobile && favoriteShortcuts.Count > 0)
    {
        <footer class="app-shell__mobile-favorites">
            <nav class="app-shell__favorites" aria-label="Favourite shortcuts">
                @foreach (var shortcut in favoriteShortcuts)
                {
                    <button @key="shortcut.Id" class="app-shell__favorite" style="@BuildFavoriteStyle(shortcut)" title="@shortcut.Label" @onclick="() => NavigateToFavorite(shortcut)">
                        <span class="app-shell__favorite-icon">
                            <i class="@shortcut.IconCssClass" aria-hidden="true"></i>
                        </span>
                        <span class="app-shell__favorite-label">@shortcut.Label</span>
                    </button>
                }
            </nav>
        </footer>
    }

    <AuthorizeView>
        <Authorized>
            <div class="login-status-indicator" title="Logged in">
                <span class="indicator-dot" aria-hidden="true"></span>
                <span class="indicator-text">@userInitials</span>
            </div>
        </Authorized>
    </AuthorizeView>

    <GlobalActionHost />
</div>

@code {
    private static readonly string[] DetailRoutePrefixes =
    {
        "contacts/",
        "db/distribution/assign/",
        "email-template-builder/"
    };

    private static readonly Dictionary<string, string> DetailParentRoutes = new(StringComparer.OrdinalIgnoreCase)
    {
        ["contacts/"] = "/contacts",
        ["db/distribution/assign/"] = "/db/distribution/status",
        ["email-template-builder/"] = "/email-template-builder"
    };

    private static readonly Dictionary<string, string> PageTitleOverrides = new(StringComparer.OrdinalIgnoreCase)
    {
        [""] = "Home",
        ["main-dashboard"] = "Home",
        ["sales-manager-dashboard"] = "Manager Dashboard",
        ["statistics/dashboard"] = "Statistics",
        ["statistics"] = "Statistics",
        ["reports-page"] = "Reports",
        ["sales-pipeline-page"] = "Sales Pipeline",
        ["contacts"] = "Contacts",
        ["tasks-page"] = "Tasks",
        ["settings"] = "Settings",
        ["settings-page"] = "Theme Settings",
        ["profile-settings-page"] = "Profile",
        ["settings/company-info"] = "Company Info",
        ["settings/security"] = "Security",
        ["settings/sms"] = "SMS Settings",
        ["sms/senders"] = "Sender Numbers",
        ["notification-settings-page"] = "Notifications",
        ["organization/structure"] = "Organization Structure",
        ["organization/biz-management"] = "Business Management",
        ["organization/stats"] = "Organization Stats",
        ["organization/system-admin"] = "System Admin",
        ["db/customer/all"] = "All Customers",
        ["db/customer/new"] = "New Customers",
        ["db/customer/starred"] = "Starred Customers",
        ["db/customer/assigned-today"] = "Today's Assignments",
        ["db/distribution/unassigned"] = "Unassigned DB",
        ["db/distribution/newly-assigned"] = "Newly Assigned",
        ["db/distribution/status"] = "Distribution Status",
        ["db/distribution/my-history"] = "Assignment History",
        ["db/customer/team-status"] = "Team DB Status",
        ["db/advanced"] = "Advanced DB",
        ["db/customer/my-list"] = "My DB List",
        ["customer-support-dashboard"] = "Support Dashboard",
        ["customer-support-ticket-management-interface"] = "Support Tickets",
        ["customer-support-knowledge-base"] = "Support Knowledge Base",
        ["marketing-campaign-management-interface"] = "Marketing Campaigns",
        ["system/info"] = "System Info",
        ["email-template-builder"] = "Email Templates"
    };

    private static readonly Dictionary<string, string> HeaderIconOverrides = new(StringComparer.OrdinalIgnoreCase)
    {
        ["contacts"] = "bi bi-person-lines-fill",
        ["reports-page"] = "bi bi-bar-chart-line",
        ["statistics"] = "bi bi-graph-up",
        ["statistics/dashboard"] = "bi bi-graph-up",
        ["sales-pipeline-page"] = "bi bi-kanban",
        ["tasks-page"] = "bi bi-check2-square",
        ["settings"] = "bi bi-gear-wide-connected",
        ["settings-page"] = "bi bi-brightness-high",
        ["profile-settings-page"] = "bi bi-person-circle",
        ["organization"] = "bi bi-diagram-3",
        ["marketing-campaign-management-interface"] = "bi bi-bullseye",
        ["customer-support-dashboard"] = "bi bi-headset",
        ["customer-support-ticket-management-interface"] = "bi bi-card-checklist",
        ["system"] = "bi bi-hdd-network",
        ["sms"] = "bi bi-chat-dots",
        ["db"] = "bi bi-database",
        ["sales-manager-dashboard"] = "bi bi-speedometer2",
        ["email-template-builder"] = "bi bi-envelope-open"
    };

    private bool isMobile;
    private bool isDetailPage;
    private bool isHomePage;
    private string currentPageTitle = "Home";
    private string headerActionIcon = "bi bi-grid-3x3-gap";
    private string headerActionLabel = "Page actions";
    private int unreadNotificationsCount = 0;
    private string userDisplayName = "Guest";
    private string userInitials = "G";
    private string? parentPagePath;
    private string? parentPageTitle;
    private IReadOnlyList<UserFavoriteShortcut> favoriteShortcuts = Array.Empty<UserFavoriteShortcut>();
    private IReadOnlyList<NavigationHistoryEntry> recentLinks = Array.Empty<NavigationHistoryEntry>();
    private IJSObjectReference? layoutModule;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        NotificationFeed.UnreadCountChanged += OnUnreadChanged;
        NavigationStateService.RecentLinksChanged += OnRecentLinksChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UpdateUserInfo(authState.User);
        }
        catch
        {
            UpdateUserInfo(new ClaimsPrincipal(new ClaimsIdentity()));
        }

        try
        {
            favoriteShortcuts = await UserFavoritesService.GetFavoritesAsync();
        }
        catch
        {
            favoriteShortcuts = Array.Empty<UserFavoriteShortcut>();
        }

        UpdateLayoutState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            layoutModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/layout.js");
            // CRITICAL FIX: Force desktop mode to show NavigationRail
            // TODO: Fix DeviceService.IsMobileAsync() detection logic
            isMobile = false; // await DeviceService.IsMobileAsync();
            UpdateLayoutState();
            await layoutModule.InvokeVoidAsync("initializeShell", new { isMobile });
            // measure header height at runtime and keep --app-shell-page-header-offset updated
            try
            {
                await layoutModule.InvokeVoidAsync("measureHeaderOffset");
                // Ensure inline content offsets are applied (compatibility for older layout.js)
                try { await layoutModule.InvokeVoidAsync("applyContentOffsets"); } catch { }
            }
            catch (JSException)
            {
                // older layout.js may not expose measureHeaderOffset; ignore
            }
            await NavigationStateService.InitializeAsync();
            recentLinks = NavigationStateService.RecentLinks;
            await UpdateUnreadNotificationsAsync();
            await TrackCurrentPageAsync();
            if (isMobile)
            {
                await layoutModule.InvokeVoidAsync("syncMobileLayout");
            }
            await layoutModule.InvokeVoidAsync("refreshThemeToggle");
            StateHasChanged();
        }
        else if (isMobile && layoutModule is not null)
        {
            await layoutModule.InvokeVoidAsync("syncMobileLayout");
        }
    }

    private async Task ToggleNavMenu()
    {
        if (layoutModule is not null)
        {
            await layoutModule.InvokeVoidAsync("toggleMenu");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("layoutInterop.toggleMenu");
        }
    }

    private void GoToProfile()
    {
        NavigationManager.NavigateTo("profile-settings-page");
    }

    private async Task NavigateBack()
    {
        if (!string.IsNullOrWhiteSpace(parentPagePath))
        {
            NavigationManager.NavigateTo(parentPagePath);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("history.back");
        }
    }

    private void NavigateToFavorite(UserFavoriteShortcut shortcut)
    {
        if (shortcut is null || !shortcut.HasTarget)
        {
            return;
        }

        NavigationManager.NavigateTo(shortcut.TargetUri);
    }

    private async Task HandleNavigationAsync()
    {
        if (layoutModule is not null)
        {
            await layoutModule.InvokeVoidAsync("refreshThemeToggle");
        }
    }

    private async Task HandleSearchNavigate()
    {
        if (layoutModule is not null)
        {
            await layoutModule.InvokeVoidAsync("toggleMenu", true);
        }
    }

    private void UpdateLayoutState()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var normalized = NormalizePath(relativePath);

        isDetailPage = false;
        parentPagePath = null;
        parentPageTitle = null;

        foreach (var prefix in DetailRoutePrefixes)
        {
            if (normalized.StartsWith(prefix, StringComparison.OrdinalIgnoreCase) && normalized.Length > prefix.Length)
            {
                isDetailPage = true;
                if (DetailParentRoutes.TryGetValue(prefix, out var explicitParent))
                {
                    parentPagePath = explicitParent;
                }
                break;
            }
        }

        if (isDetailPage)
        {
            var basePath = normalized;
            if (!string.IsNullOrEmpty(parentPagePath))
            {
                basePath = NormalizePath(parentPagePath);
            }
            else
            {
                var lastSeparator = normalized.LastIndexOf('/');
                if (lastSeparator > 0)
                {
                    basePath = normalized[..lastSeparator];
                    parentPagePath = "/" + basePath;
                }
            }

            parentPageTitle = ResolvePageTitle(basePath, false);
        }

        isHomePage = string.IsNullOrEmpty(normalized) ||
                     string.Equals(normalized, "main-dashboard", StringComparison.OrdinalIgnoreCase) ||
                     string.Equals(normalized, "sales-manager-dashboard", StringComparison.OrdinalIgnoreCase);

        currentPageTitle = ResolvePageTitle(normalized, isDetailPage);
        headerActionIcon = ResolveHeaderActionIcon(normalized);
        headerActionLabel = string.Format(CultureInfo.CurrentCulture, "{0} actions", currentPageTitle);
    }

    private static string NormalizePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return string.Empty;
        }

        var trimmed = relativePath.Split('?', '#')[0];
        return trimmed.Trim('/');
    }

    private string ResolvePageTitle(string normalizedPath, bool treatAsDetail)
    {
        if (PageTitleOverrides.TryGetValue(normalizedPath, out var directTitle))
        {
            return directTitle;
        }

        if (string.IsNullOrEmpty(normalizedPath))
        {
            return "Home";
        }

        var segments = normalizedPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length == 0)
        {
            return "Home";
        }

        if (treatAsDetail && segments.Length > 1)
        {
            var detailBase = string.Join('/', segments[..^1]);
            if (PageTitleOverrides.TryGetValue(detailBase, out var detailTitle))
            {
                return detailTitle;
            }

            segments = segments[..^1];
        }

        var lastSegment = segments.Last();
        if (PageTitleOverrides.TryGetValue(lastSegment, out var segmentTitle))
        {
            return segmentTitle;
        }

        return ToTitleCase(lastSegment.Replace("-", " "));
    }

    private string ResolveHeaderActionIcon(string normalizedPath)
    {
        if (HeaderIconOverrides.TryGetValue(normalizedPath, out var icon))
        {
            return icon;
        }

        if (string.IsNullOrEmpty(normalizedPath))
        {
            return "bi bi-grid-3x3-gap";
        }

        var segments = normalizedPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        foreach (var segment in new[] { normalizedPath, segments.First(), segments.Last() })
        {
            if (HeaderIconOverrides.TryGetValue(segment, out icon))
            {
                return icon;
            }
        }

        return "bi bi-grid-3x3-gap";
    }

    private static string ToTitleCase(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "Home";
        }

        var lowerInvariant = value.ToLower(CultureInfo.CurrentCulture);
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lowerInvariant);
    }

    private async Task UpdateUnreadNotificationsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            try
            {
                unreadNotificationsCount = Math.Max(0, await NotificationFeed.GetUnreadCountAsync());
            }
            catch (Exception ex)
            {
                Console.Error?.WriteLine($"Failed to update unread notifications: {ex.Message}");
                unreadNotificationsCount = 0;
            }
        }
        else
        {
            unreadNotificationsCount = 0;
        }
    }

    private void OnNotificationsClick() => NavigationManager.NavigateTo("/notifications");

    private async void OnUnreadChanged(int count)
    {
        try
        {
            unreadNotificationsCount = Math.Max(0, count);
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // ignore
        }
    }

    private async void OnRecentLinksChanged(object? sender, EventArgs e)
    {
        recentLinks = NavigationStateService.RecentLinks;
        await InvokeAsync(StateHasChanged);
    }

    private async Task TrackCurrentPageAsync()
    {
        try
        {
            var relative = NormalizePath(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
            var entry = NavigationHistoryEntry.Create(relative, currentPageTitle, headerActionIcon);
            await NavigationStateService.TrackAsync(entry);
            recentLinks = NavigationStateService.RecentLinks;
        }
        catch
        {
            recentLinks = NavigationStateService.RecentLinks;
        }
    }

    private void UpdateUserInfo(ClaimsPrincipal user)
    {
        if (user?.Identity?.IsAuthenticated == true)
        {
            userDisplayName = string.IsNullOrWhiteSpace(user.Identity?.Name) ? "User" : user.Identity!.Name!;

            userInitials = string.Join(string.Empty, userDisplayName
                .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Where(segment => segment.Length > 0)
                .Take(2)
                .Select(segment => char.ToUpperInvariant(segment[0])));

            if (string.IsNullOrWhiteSpace(userInitials))
            {
                var firstChar = userDisplayName.FirstOrDefault();
                userInitials = firstChar == default ? "U" : char.ToUpperInvariant(firstChar).ToString();
            }
        }
        else
        {
            userDisplayName = "Guest";
            userInitials = "G";
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            UpdateLayoutState();
            await TrackCurrentPageAsync();
            await InvokeAsync(StateHasChanged);
            if (layoutModule is not null)
            {
                await layoutModule.InvokeVoidAsync("toggleMenu", true);
                await layoutModule.InvokeVoidAsync("refreshThemeToggle");
                if (isMobile)
                {
                    await layoutModule.InvokeVoidAsync("syncMobileLayout");
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error?.WriteLine($"Failed to update layout on navigation: {ex.Message}");
        }
    }

    private string BuildFavoriteStyle(UserFavoriteShortcut shortcut)
    {
        if (shortcut is null)
        {
            return string.Empty;
        }

        var baseColor = ParseColor(shortcut.BackgroundColor) ?? DefaultFavoriteColor;
        var lighter = baseColor.Lighten(0.65);
        var darker = baseColor.Darken(0.1);

        return $"--favorite-bg: {baseColor.ToRgba(0.2)}; --favorite-border: {lighter.ToRgba(0.35)}; --favorite-text: {darker.ToRgba()};";
    }

    private static RgbColor? ParseColor(string? color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            return null;
        }

        var trimmed = color.Trim();
        if (trimmed.StartsWith('#'))
        {
            if (trimmed.Length == 7 && int.TryParse(trimmed.AsSpan(1, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var r) &&
                int.TryParse(trimmed.AsSpan(3, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var g) &&
                int.TryParse(trimmed.AsSpan(5, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var b))
            {
                return new RgbColor(r, g, b);
            }
        }

        if (trimmed.StartsWith("rgb", StringComparison.OrdinalIgnoreCase))
        {
            var start = trimmed.IndexOf('(');
            var end = trimmed.IndexOf(')');
            if (start > -1 && end > start)
            {
                var segments = trimmed.Substring(start + 1, end - start - 1)
                    .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

                if (segments.Length >= 3 &&
                    double.TryParse(segments[0], NumberStyles.Number, CultureInfo.InvariantCulture, out var r) &&
                    double.TryParse(segments[1], NumberStyles.Number, CultureInfo.InvariantCulture, out var g) &&
                    double.TryParse(segments[2], NumberStyles.Number, CultureInfo.InvariantCulture, out var b))
                {
                    return new RgbColor(r, g, b);
                }
            }
        }

        return null;
    }

    private static readonly RgbColor DefaultFavoriteColor = new(33, 83, 200);

    private readonly record struct RgbColor(double R, double G, double B)
    {
        private static readonly RgbColor White = new(255, 255, 255);
        private static readonly RgbColor Black = new(0, 0, 0);

        public RgbColor Lighten(double amount) => Blend(White, amount);
        public RgbColor Darken(double amount) => Blend(Black, amount);

        public RgbColor Blend(RgbColor target, double amount)
        {
            var t = Math.Clamp(amount, 0d, 1d);
            return new RgbColor(
                R + ((target.R - R) * t),
                G + ((target.G - G) * t),
                B + ((target.B - B) * t));
        }

        public string ToRgba(double alpha = 1d)
        {
            var clampedAlpha = Math.Clamp(alpha, 0d, 1d);
            return FormattableString.Invariant(
                $"rgba({Math.Clamp((int)Math.Round(R), 0, 255)}, {Math.Clamp((int)Math.Round(G), 0, 255)}, {Math.Clamp((int)Math.Round(B), 0, 255)}, {clampedAlpha:0.##})");
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        NotificationFeed.UnreadCountChanged -= OnUnreadChanged;
        NavigationStateService.RecentLinksChanged -= OnRecentLinksChanged;
    }
}
