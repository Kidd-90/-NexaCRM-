@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using System.Text.Json
@using System.Linq
@inject IStringLocalizer<QuickActionsComponent> Localizer
@inject IJSRuntime JSRuntime

<div class="quick-actions-container @CssClass">
    <div class="quick-actions-wrapper">
        @if (ShowCallAction && !string.IsNullOrEmpty(PhoneNumber))
        {
            <button class="quick-action-btn call-action" @onclick="HandleCallAction" title="@Localizer["CallCustomer"]">
                <div class="action-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256">
                        <path d="M222.37,158.46l-47.11-21.11-.13-.06a16,16,0,0,0-15.17,1.4,8.12,8.12,0,0,0-.75.56L134.87,160c-15.42-7.49-31.34-23.29-38.83-38.51l20.78-24.71c.2-.25.39-.5.57-.77a16,16,0,0,0,1.32-15.06l0-.12L97.54,33.64a16,16,0,0,0-16.62-9.52A56.26,56.26,0,0,0,32,80c0,79.4,64.6,144,144,144a56.26,56.26,0,0,0,55.88-48.92A16,16,0,0,0,222.37,158.46ZM176,208A128.14,128.14,0,0,1,48,80,40.2,40.2,0,0,1,82.87,40a.61.61,0,0,0,0,.12l21,47L83.2,111.86a6.13,6.13,0,0,0-.57.77,16,16,0,0,0-1,15.7c9.06,18.53,27.73,37.06,46.46,46.11a16,16,0,0,0,15.75-1.14,8.44,8.44,0,0,0,.74-.56L168.89,152l47,21.05h0s.08,0,.11,0A40.21,40.21,0,0,1,176,208Z"></path>
                    </svg>
                </div>
                @if (ShowLabels)
                {
                    <span class="action-label">@Localizer["Call"]</span>
                }
            </button>
        }

        @if (ShowEmailAction && !string.IsNullOrEmpty(Email))
        {
            <button class="quick-action-btn email-action" @onclick="HandleEmailAction" title="@Localizer["EmailCustomer"]">
                <div class="action-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256">
                        <path d="M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM203.43,64,128,133.15,52.57,64ZM216,192H40V74.19l82.59,75.71a8,8,0,0,0,10.82,0L216,74.19V192Z"></path>
                    </svg>
                </div>
                @if (ShowLabels)
                {
                    <span class="action-label">@Localizer["Email"]</span>
                }
            </button>
        }

        @if (ShowMeetingAction)
        {
            <button class="quick-action-btn meeting-action" @onclick="HandleMeetingAction" title="@Localizer["ScheduleMeeting"]">
                <div class="action-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 256 256">
                        <path d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Zm-68-76a12,12,0,1,1-12-12A12,12,0,0,1,140,132Zm44,0a12,12,0,1,1-12-12A12,12,0,0,1,184,132Zm-88,0a12,12,0,1,1-12-12A12,12,0,0,1,96,132Zm44,40a12,12,0,1,1-12-12A12,12,0,0,1,140,172Zm44,0a12,12,0,1,1-12-12A12,12,0,0,1,184,172Zm-88,0a12,12,0,1,1-12-12A12,12,0,0,1,96,172Z"></path>
                    </svg>
                </div>
                @if (ShowLabels)
                {
                    <span class="action-label">@Localizer["Meeting"]</span>
                }
            </button>
        }
    </div>

    <div class="quick-actions-feedback" aria-live="polite">
        @if (!string.IsNullOrWhiteSpace(actionAnnouncement))
        {
            <span>@actionAnnouncement</span>
        }
    </div>

    @if (showToast && !string.IsNullOrEmpty(toastMessage))
    {
        <div class="quick-actions-toast" role="status">
            <span>@toastMessage</span>
            <button type="button" class="quick-actions-toast__dismiss" @onclick="DismissToast">
                <span class="sr-only">@Localizer["QuickActionsToastDismiss"]</span>
                Ã—
            </button>
        </div>
    }

    @if (showActionSheet)
    {
        <div class="quick-actions-sheet-backdrop" role="presentation" @onclick="CloseActionSheet">
            <div class="quick-actions-sheet" role="dialog" aria-modal="true" aria-labelledby="quickActionSheetTitle" aria-describedby="quickActionSheetDescription" @onclick:stopPropagation="true">
                <header class="quick-actions-sheet__header">
                    <h3 id="quickActionSheetTitle">@actionSheetTitle</h3>
                    <p id="quickActionSheetDescription">@actionSheetDescription</p>
                </header>
                <div class="quick-actions-sheet__actions">
                    @if (!string.IsNullOrWhiteSpace(actionSheetPrimaryHref) && !string.IsNullOrWhiteSpace(actionSheetPrimaryText))
                    {
                        <a class="quick-actions-sheet__primary" href="@actionSheetPrimaryHref" @onclick="async () => await ConfirmPendingActionFromLink()">@actionSheetPrimaryText</a>
                    }
                    @if (!string.IsNullOrWhiteSpace(actionSheetSecondaryText))
                    {
                        <button type="button" class="quick-actions-sheet__secondary" @onclick="async () => await ExecuteSecondaryAction()">@actionSheetSecondaryText</button>
                    }
                    <button type="button" class="quick-actions-sheet__tertiary" @onclick="CloseActionSheet">@Localizer["QuickActionsCancel"]</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? PhoneNumber { get; set; }
    [Parameter] public string? Email { get; set; }
    [Parameter] public string? CustomerName { get; set; }
    [Parameter] public string? CustomerId { get; set; }
    [Parameter] public bool ShowCallAction { get; set; } = true;
    [Parameter] public bool ShowEmailAction { get; set; } = true;
    [Parameter] public bool ShowMeetingAction { get; set; } = true;
    [Parameter] public bool ShowLabels { get; set; } = true;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public EventCallback<string> OnActionCompleted { get; set; }

    private bool showActionSheet;
    private string? pendingAction;
    private string? actionSheetTitle;
    private string? actionSheetDescription;
    private string? actionSheetPrimaryText;
    private string? actionSheetPrimaryHref;
    private string? actionSheetSecondaryText;
    private Func<Task>? secondaryAction;
    private string? actionAnnouncement;
    private string? toastMessage;
    private bool showToast;

    private async Task HandleCallAction()
    {
        if (string.IsNullOrEmpty(PhoneNumber))
        {
            return;
        }

        try
        {
            if (await IsMobileViewportAsync())
            {
                await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = 'tel:{PhoneNumber}'");
                await AnnounceAndCompleteAsync("call", Localizer["QuickActionsCallLaunched", ResolveDisplayName(PhoneNumber)]);
            }
            else
            {
                PrepareCallActionSheet();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling call action: {ex.Message}");
        }
    }

    private async Task HandleEmailAction()
    {
        if (string.IsNullOrEmpty(Email))
        {
            return;
        }

        try
        {
            var displayName = ResolveDisplayName(Email);
            var subject = Localizer["QuickActionsEmailSubject", displayName];
            var body = Localizer["QuickActionsEmailBody", displayName];
            var mailtoUrl = $"mailto:{Email}?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}";
            var clipboardTemplate = Localizer["QuickActionsEmailClipboardTemplate", Email, subject, body];

            if (await IsMobileViewportAsync())
            {
                await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{mailtoUrl}'");
                await AnnounceAndCompleteAsync("email", Localizer["QuickActionsEmailLaunched", displayName]);
            }
            else
            {
                PrepareEmailActionSheet(mailtoUrl, clipboardTemplate);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling email action: {ex.Message}");
        }
    }

    private async Task HandleMeetingAction()
    {
        try
        {
            var displayName = ResolveDisplayName(Localizer["QuickActionsUnknownContact"]);
            var summary = Localizer["QuickActionsMeetingSummary", displayName];
            var description = Localizer["QuickActionsMeetingDescription", displayName];
            var start = DateTime.UtcNow.AddDays(1);
            var end = start.AddHours(1);
            var icsContent = $"BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//NexaCRM//EN\nBEGIN:VEVENT\nUID:{Guid.NewGuid()}\nDTSTAMP:{DateTime.UtcNow:yyyyMMddTHHmmssZ}\nDTSTART:{start:yyyyMMddTHHmmssZ}\nDTEND:{end:yyyyMMddTHHmmssZ}\nSUMMARY:{summary}\nDESCRIPTION:{description}\nEND:VEVENT\nEND:VCALENDAR";
            var fileName = GetMeetingFileName();

            await TriggerFileDownloadAsync(fileName, icsContent);
            await AnnounceAndCompleteAsync("meeting", Localizer["QuickActionsMeetingPrepared", displayName]);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling meeting action: {ex.Message}");
        }
    }

    private async Task<bool> IsMobileViewportAsync()
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("eval", "window.matchMedia('(max-width: 767px)').matches");
        }
        catch
        {
            return false;
        }
    }

    private void PrepareCallActionSheet()
    {
        var displayName = ResolveDisplayName(PhoneNumber);
        pendingAction = "call";
        actionSheetTitle = Localizer["QuickActionsCallDialogTitle", displayName];
        actionSheetDescription = Localizer["QuickActionsCallDialogDescription", displayName];
        actionSheetPrimaryText = Localizer["QuickActionsCallPrimary"];
        actionSheetPrimaryHref = $"tel:{PhoneNumber}";
        actionSheetSecondaryText = Localizer["QuickActionsCopyNumber"];
        secondaryAction = async () =>
        {
            await CopyToClipboardAsync(PhoneNumber!);
            await AnnounceAndCompleteAsync("call", Localizer["QuickActionsCopySuccess"]);
        };
        showActionSheet = true;
        StateHasChanged();
    }

    private void PrepareEmailActionSheet(string mailtoUrl, string clipboardTemplate)
    {
        var displayName = ResolveDisplayName(Email);
        pendingAction = "email";
        actionSheetTitle = Localizer["QuickActionsEmailDialogTitle", displayName];
        actionSheetDescription = Localizer["QuickActionsEmailDialogDescription"];
        actionSheetPrimaryText = Localizer["QuickActionsEmailPrimary"];
        actionSheetPrimaryHref = mailtoUrl;
        actionSheetSecondaryText = Localizer["QuickActionsEmailCopy"];
        secondaryAction = async () =>
        {
            await CopyToClipboardAsync(clipboardTemplate);
            await AnnounceAndCompleteAsync("email", Localizer["QuickActionsEmailCopySuccess"]);
        };
        showActionSheet = true;
        StateHasChanged();
    }

    private async Task ConfirmPendingActionFromLink()
    {
        var action = pendingAction;
        CloseActionSheet();

        if (string.Equals(action, "call", StringComparison.OrdinalIgnoreCase))
        {
            await AnnounceAndCompleteAsync("call", Localizer["QuickActionsCallLaunched", ResolveDisplayName(PhoneNumber)]);
        }
        else if (string.Equals(action, "email", StringComparison.OrdinalIgnoreCase))
        {
            await AnnounceAndCompleteAsync("email", Localizer["QuickActionsEmailLaunched", ResolveDisplayName(Email)]);
        }
    }

    private async Task ExecuteSecondaryAction()
    {
        var action = secondaryAction;
        CloseActionSheet();

        if (action is not null)
        {
            await action();
        }
    }

    private void CloseActionSheet()
    {
        showActionSheet = false;
        pendingAction = null;
        actionSheetTitle = null;
        actionSheetDescription = null;
        actionSheetPrimaryText = null;
        actionSheetPrimaryHref = null;
        actionSheetSecondaryText = null;
        secondaryAction = null;
        StateHasChanged();
    }

    private async Task AnnounceAndCompleteAsync(string actionKey, string message)
    {
        actionAnnouncement = message;
        toastMessage = message;
        showToast = true;
        await OnActionCompleted.InvokeAsync(actionKey);
        StateHasChanged();
    }

    private void DismissToast()
    {
        showToast = false;
        toastMessage = null;
        StateHasChanged();
    }

    private string ResolveDisplayName(string? fallback)
    {
        if (!string.IsNullOrWhiteSpace(CustomerName))
        {
            return CustomerName!;
        }

        return string.IsNullOrWhiteSpace(fallback) ? Localizer["QuickActionsUnknownContact"] : fallback!;
    }

    private async Task CopyToClipboardAsync(string value)
    {
        var encoded = JsonSerializer.Serialize(value);
        var script = $@"
            (async () => {{
                const value = {encoded};
                if (navigator.clipboard && navigator.clipboard.writeText) {{
                    try {{
                        await navigator.clipboard.writeText(value);
                        return;
                    }} catch (err) {{ }}
                }}
                const textarea = document.createElement('textarea');
                textarea.value = value;
                textarea.setAttribute('readonly', '');
                textarea.style.position = 'absolute';
                textarea.style.left = '-9999px';
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
            }})();
        ";

        await JSRuntime.InvokeVoidAsync("eval", script);
    }

    private string GetMeetingFileName()
    {
        var baseName = string.IsNullOrWhiteSpace(CustomerName) ? "customer" : CustomerName!.ToLowerInvariant();
        var sanitized = new string(baseName.Where(c => char.IsLetterOrDigit(c) || c == '-').ToArray());
        if (string.IsNullOrWhiteSpace(sanitized))
        {
            sanitized = "customer";
        }

        return $"meeting-with-{sanitized}.ics";
    }

    private async Task TriggerFileDownloadAsync(string fileName, string content)
    {
        var base64 = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(content));
        var base64Json = JsonSerializer.Serialize(base64);
        var fileNameJson = JsonSerializer.Serialize(fileName);
        var script = $@"
            (function() {{
                const data = {base64Json};
                const fileName = {fileNameJson};
                const link = document.createElement('a');
                link.href = 'data:text/calendar;base64,' + data;
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }})();
        ";

        await JSRuntime.InvokeVoidAsync("eval", script);
    }
}