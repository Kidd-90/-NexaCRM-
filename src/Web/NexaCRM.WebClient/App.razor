@using System
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using NexaCRM.WebClient.Shared
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            @if (IsLandingRoute(NavigationManager.ToBaseRelativePath(NavigationManager.Uri)))
            {
                <RedirectToLogin />
            }
            else
            {
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <Authorizing>
                        <RedirectToLogin />
                    </Authorizing>
                    <NotAuthorized>
                        <RedirectToLogin />
                    </NotAuthorized>
                </AuthorizeRouteView>
            }
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <AuthorizeView Context="authContext">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
                <Authorized>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p role="alert">Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </Authorized>
            </AuthorizeView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private static readonly HashSet<string> LandingRoutes = new(StringComparer.OrdinalIgnoreCase)
    {
        string.Empty,
        "index",
        "index.html"
    };

    private static bool IsLandingRoute(string? path)
    {
        if (string.IsNullOrWhiteSpace(path))
        {
            return true;
        }

        var normalized = path.Trim('/');
        return LandingRoutes.Contains(normalized);
    }
}
