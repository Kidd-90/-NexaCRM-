@page "/reports-page"
@using Microsoft.Extensions.Localization
@using NexaCRM.WebClient.Models
@using NexaCRM.WebClient.Services.Interfaces
@inject IStringLocalizer<ReportsPage> Localizer
@inject IReportService ReportService

<h1 class="text-2xl font-bold mb-4">@Localizer["ReportsTitle"]</h1>

<EditForm Model="currentDefinition">
    <InputText @bind-Value="currentDefinition.Name" placeholder='@Localizer["ReportName"]' class="form-input mb-2" />
    <div class="report-form-row mb-2">
        <InputText @bind-Value="newField" placeholder='@Localizer["Field"]' class="form-input flex-1" />
        <button type="button" class="px-2 py-1 bg-[#e7ecf3] rounded" @onclick="AddField">@Localizer["Add"]</button>
    </div>
    <ul class="mb-2">
        @foreach (var field in currentDefinition.SelectedFields)
        {
            <li>@field</li>
        }
    </ul>
    <div class="report-form-row mb-2">
        <InputText @bind-Value="filterKey" placeholder='@Localizer["FilterKey"]' class="form-input flex-1" />
        <InputText @bind-Value="filterValue" placeholder='@Localizer["FilterValue"]' class="form-input flex-1" />
        <button type="button" class="px-2 py-1 bg-[#e7ecf3] rounded" @onclick="AddFilter">@Localizer["Add"]</button>
    </div>
    <ul class="mb-2">
        @foreach (var filter in currentDefinition.Filters)
        {
            <li>@filter.Key: @filter.Value</li>
        }
    </ul>
    <div class="report-actions mb-4">
        <button type="button" class="px-3 py-1 bg-[#e7ecf3] rounded" @onclick="SaveDefinition">@Localizer["SaveDefinition"]</button>
        <button type="button" class="px-3 py-1 bg-[#e7ecf3] rounded" @onclick="GenerateReport">@Localizer["GenerateReport"]</button>
    </div>
</EditForm>

<h2 class="text-xl font-bold mb-2">@Localizer["SavedReports"]</h2>
<ul class="mb-4">
    @foreach (var def in savedDefinitions)
    {
        <li><button class="underline" @onclick="() => LoadDefinition(def)">@def.Name</button></li>
    }
</ul>

<h2 class="text-xl font-bold mb-2">@Localizer["Preview"]</h2>
@if (preview != null)
{
    <div class="report-preview">
        <h3 class="font-bold mb-2">@preview.Title</h3>
        <div class="report-table-container">
            <table class="table-auto border-collapse w-full">
                <thead>
                    <tr><th class="border px-2">Field</th><th class="border px-2">Value</th></tr>
                </thead>
                <tbody>
                    @foreach (var item in preview.Data)
                    {
                        <tr><td class="border px-2">@item.Key</td><td class="border px-2">@item.Value</td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private ReportDefinition currentDefinition = new();
    private List<ReportDefinition> savedDefinitions = new();
    private ReportData? preview;
    private string? newField;
    private string? filterKey;
    private string? filterValue;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        savedDefinitions = (await ReportService.GetReportDefinitionsAsync()).ToList();
    }

    private void AddField()
    {
        if (!string.IsNullOrWhiteSpace(newField))
        {
            currentDefinition.SelectedFields.Add(newField);
            newField = string.Empty;
        }
    }

    private void AddFilter()
    {
        if (!string.IsNullOrWhiteSpace(filterKey) && filterValue is not null)
        {
            currentDefinition.Filters[filterKey] = filterValue;
            filterKey = filterValue = string.Empty;
        }
    }

    private async System.Threading.Tasks.Task SaveDefinition()
    {
        await ReportService.SaveReportDefinitionAsync(currentDefinition);
        savedDefinitions = (await ReportService.GetReportDefinitionsAsync()).ToList();
        currentDefinition = new ReportDefinition();
    }

    private async System.Threading.Tasks.Task LoadDefinition(ReportDefinition def)
    {
        currentDefinition = def;
        await GenerateReport();
    }

    private async System.Threading.Tasks.Task GenerateReport()
    {
        preview = await ReportService.GenerateReportAsync(currentDefinition);
    }
}
