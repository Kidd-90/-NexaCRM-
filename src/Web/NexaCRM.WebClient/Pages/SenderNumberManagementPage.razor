@page "/sms/senders"
@using Microsoft.AspNetCore.Components.Forms
@using NexaCRM.WebClient.Services.Interfaces
@inject ISmsService SmsService

<ResponsivePage>
    <h3>Sender Number Management</h3>
    <p>Register and manage sender phone numbers.</p>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isError ? "alert-danger" : "alert-success")" role="alert">
            @statusMessage
        </div>
    }

    <button class="btn btn-primary mb-3 add-btn" @onclick="OpenDialog">Add Number</button>

    <div class="d-none d-md-block">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (senderNumbers.Count == 0)
                    {
                        <tr>
                            <td colspan="2">No sender numbers registered.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var num in senderNumbers)
                        {
                            <tr>
                                <td>@num</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveNumber(num)">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="d-md-none">
        <ul class="list-group">
            @if (senderNumbers.Count == 0)
            {
                <li class="list-group-item">No sender numbers registered.</li>
            }
            else
            {
                @foreach (var num in senderNumbers)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@num</span>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveNumber(num)">Remove</button>
                    </li>
                }
            }
        </ul>
    </div>

    @if (isDialogOpen)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color:rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Sender Number</h5>
                        <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm OnValidSubmit="SubmitNumber">
                            <div class="mb-3">
                                <label for="sender" class="form-label">Number</label>
                                <InputText id="sender" class="form-control" @bind-Value="newSender" />
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</ResponsivePage>

@code {
    private List<string> senderNumbers = new();
    private bool isDialogOpen = false;
    private string newSender = string.Empty;
    private string? statusMessage;
    private bool isError;

    protected override async Task OnInitializedAsync()
    {
        await LoadNumbersAsync();
    }

    private async Task LoadNumbersAsync()
    {
        senderNumbers = (await SmsService.GetSenderNumbersAsync()).ToList();
    }

    private void OpenDialog() => isDialogOpen = true;

    private void CloseDialog()
    {
        isDialogOpen = false;
        newSender = string.Empty;
    }

    private async Task SubmitNumber()
    {
        try
        {
            await SmsService.SaveSenderNumberAsync(newSender);
            statusMessage = "Number saved successfully.";
            isError = false;
            await LoadNumbersAsync();
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to save number: {ex.Message}";
            isError = true;
        }
        CloseDialog();
    }

    private async Task RemoveNumber(string number)
    {
        try
        {
            await SmsService.DeleteSenderNumberAsync(number);
            statusMessage = "Number removed successfully.";
            isError = false;
            await LoadNumbersAsync();
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to remove number: {ex.Message}";
            isError = true;
        }
    }
}
