@page "/login"
@layout LoginLayout
@attribute [AllowAnonymous]
@using NexaCRM.WebClient.Services
@using System.Linq
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject IStringLocalizer<LoginPage> Localizer
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div
      class="relative flex size-full min-h-screen flex-col group/design-root overflow-x-hidden overflow-y-auto login-container"
      style="--checkbox-tick-svg: url('data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27rgb(248,250,252)%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e'); font-family: Inter, &quot;Noto Sans&quot;, sans-serif;"
    >
      <div class="layout-container flex h-full grow flex-col">
        <!-- 완전한 화면 중앙 정렬을 위한 컨테이너 -->
        <div class="flex flex-1 items-center justify-center py-8 px-4">
          <div class="w-full max-w-md mx-auto">
            <!-- 통합된 로그인 카드 -->
            <div class="login-card rounded-2xl overflow-hidden border shadow-lg backdrop-blur-md">
              <!-- 상단 이미지 섹션 -->
              <div
                class="w-full bg-center bg-no-repeat bg-cover image-div-login-page min-h-[180px] relative"
                style='background-image: url("https://lh3.googleusercontent.com/aida-public/AB6AXuAfaynYSIMyWSA0KAFt_F_0xbeEywahjPH6dXL7wfRm4aWKQTJPoGB_HZxp84Z__2mS2F2ZdqQpfAcc88i6ayJKktBU574T6a8WZQAUVqfblTYgNw6sKhbnKYmqNLZbI-9w41kt0_FPlVm7B0FgCsmx4jc0i9FBdko0SFT-P4C4Q68UTWM6pAhSE7iwRPIAso3lizthXAugbRD3gqQmrottH8RGjjF_tRxV8w53STiPSwDa7xyJ6tDSIm9BIlAHNZMXZ4kmJjOjuSd7");'>
                <!-- 부드러운 그라데이션 오버레이 -->
                <div class="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-white/10"></div>
              </div>
              
              <!-- 텍스트와 폼이 통합된 콘텐츠 영역 -->
              <div class="px-8 pb-8 pt-6">
                <!-- 헤더 텍스트 -->
                <div class="text-center mb-8">
                  <h2 class="login-header tracking-light text-[22px] sm:text-[28px] font-bold leading-tight mb-2 whitespace-nowrap">@Localizer["WelcomeBack"]</h2>
                  <p class="login-subheader text-base font-medium mb-4">@Localizer["SignInToYourAccount"]</p>
                  <div class="w-12 h-0.5 bg-gradient-to-r from-[var(--primary-color)] to-[var(--secondary-color)] rounded-full mx-auto"></div>
                </div>
                
                <!-- 로그인 폼 필드들 -->
              <!-- Username 필드 -->
              <div class="mb-4">
                <label class="flex flex-col">
                  <p class="login-form-label text-base font-medium leading-normal pb-2">@Localizer["Username"]</p>
                  <input @bind="username"
                    placeholder="@Localizer["EnterYourUsername"]"
                    autocomplete="username"
                    class="login-form-input flex w-full resize-none overflow-hidden rounded-lg focus:outline-0 focus:ring-0 border h-12 px-4 text-base font-normal leading-normal"
                  />
                </label>
              </div>
              
              <!-- Password 필드 -->
              <div class="mb-4">
                <label class="flex flex-col">
                  <p class="login-form-label text-base font-medium leading-normal pb-2">@Localizer["Password"]</p>
                  <input @bind="password" type="password"
                    placeholder="@Localizer["EnterYourPassword"]"
                    autocomplete="current-password"
                    class="login-form-input flex w-full resize-none overflow-hidden rounded-lg focus:outline-0 focus:ring-0 border h-12 px-4 text-base font-normal leading-normal"
                  />
                </label>
              </div>
              
              <!-- Remember me 체크박스 -->
              <div class="flex items-center gap-3 mb-6">
                <div class="shrink-0">
                  <div class="flex items-center justify-center">
                    <input
                      type="checkbox"
                      class="login-checkbox rounded border-2 focus:ring-0 focus:ring-offset-0 focus:outline-none"
                      style="accent-color: var(--primary-color);"
                    />
                  </div>
                </div>
                <p class="login-checkbox-label text-sm font-normal leading-normal">@Localizer["RememberMe"]</p>
              </div>
              
              <!-- 에러 메시지 표시 -->
              @if (!string.IsNullOrEmpty(errorMessage))
              {
                  <div class="login-error-message border px-4 py-3 rounded relative mb-4" role="alert">
                      <span class="block sm:inline">@errorMessage</span>
                  </div>
              }

              <!-- 로그인 버튼 -->
              <div class="mb-4">
                <button @onclick="Login" type="button" disabled="@isLoading"
                  class="login-button flex w-full cursor-pointer items-center justify-center overflow-hidden rounded-lg h-12 disabled:opacity-50 disabled:cursor-not-allowed text-white text-base font-semibold leading-normal"
                >
                  @if (isLoading)
                  {
                    <!-- Loading Animation -->
                    <div class="flex items-center gap-2">
                      <div class="loading-spinner">
                        <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </div>
                      <span class="truncate">@Localizer["LoggingIn"]</span>
                    </div>
                  }
                  else
                  {
                    <span class="truncate">@Localizer["LogIn"]</span>
                  }
                </button>
              </div>
              
              <!-- Helper links -->
              <div class="login-helper-links flex justify-center items-center gap-2 text-sm mb-6">
                <a href="/find-id-page" class="login-link hover:underline">@Localizer["FindId"]</a>
                <span class="text-gray-400">|</span>
                <a href="/password-reset-page" class="login-link hover:underline">@Localizer["ResetPassword"]</a>
                <span class="text-gray-400">|</span>
                <a href="/user-registration-page" class="login-link hover:underline">@Localizer["SignUp"]</a>
              </div>
              
              <!-- 구분선 -->
              <div class="relative mb-6">
                <div class="absolute inset-0 flex items-center">
                  <div class="w-full border-t" style="border-color: var(--border-color);"></div>
                </div>
                <div class="relative flex justify-center text-sm">
                  <span class="login-divider-text px-4 font-medium" style="background-color: var(--surface-color);">@Localizer["OrLogInWith"]</span>
                </div>
              </div>
              
              <!-- 소셜 로그인 버튼들 -->
              <div class="flex gap-3 sm:gap-3 gap-2">
                <button
                  class="social-login-btn google-btn flex flex-1 cursor-pointer items-center justify-center gap-2 sm:gap-3 overflow-hidden rounded-lg h-12 px-2 sm:px-4 text-sm font-medium leading-normal"
                >
                  <!-- Google Icon -->
                  <svg class="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  <span class="font-medium text-xs sm:text-sm whitespace-nowrap overflow-hidden text-ellipsis">@Localizer["Google"]</span>
                </button>
                <button
                  class="social-login-btn microsoft-btn flex flex-1 cursor-pointer items-center justify-center gap-2 sm:gap-3 overflow-hidden rounded-lg h-12 px-2 sm:px-4 text-sm font-medium leading-normal"
                >
                  <!-- Microsoft Icon -->
                  <svg class="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="#f25022" d="M1 1h10v10H1z"/>
                    <path fill="#00a4ef" d="M13 1h10v10H13z"/>
                    <path fill="#7fba00" d="M1 13h10v10H1z"/>
                    <path fill="#ffb900" d="M13 13h10v10H13z"/>
                  </svg>
                  <span class="font-medium text-xs sm:text-sm whitespace-nowrap overflow-hidden text-ellipsis">@Localizer["Microsoft"]</span>
                </button>
              </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckExistingAuthentication();
    }

    private async Task CheckExistingAuthentication()
    {
        try
        {
            // 이미 인증된 사용자인지 확인
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User already authenticated, redirecting from login page");
                
                // 사용자 역할에 따라 적절한 대시보드로 리다이렉션
                if (user.IsInRole("Manager"))
                {
                    NavigationManager.NavigateTo("/sales-manager-dashboard");
                }
                else if (user.IsInRole("Sales"))
                {
                    NavigationManager.NavigateTo("/main-dashboard");
                }
                else
                {
                    NavigationManager.NavigateTo("/main-dashboard");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error checking authentication: {ex.Message}");
        }
    }

    private async Task Login()
    {
        errorMessage = null; // Reset error message on new login attempt
        isLoading = true; // Start loading animation
        StateHasChanged(); // Update UI to show loading state
        
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Login button clicked!");
            await JSRuntime.InvokeVoidAsync("console.log", $"Username: {username}, Password: {password}");
            
            // Simulate some processing time for better UX
            await Task.Delay(800); // Reasonable delay to show loading animation
            
            if (username == "sales" && password == "sales")
            {
                var roles = new[] { "Sales" };
                await JSRuntime.InvokeVoidAsync("console.log", "Setting Sales role...");
                AuthProvider.UpdateAuthenticationState(username, roles);
                await JSRuntime.InvokeVoidAsync("console.log", "Navigating to main dashboard");
                
                // 약간의 지연을 두고 네비게이션
                await Task.Delay(100);
                NavigationManager.NavigateTo("/main-dashboard");
            }
            else if (username == "manager" && password == "manager")
            {
                var roles = new[] { "Manager" };
                await JSRuntime.InvokeVoidAsync("console.log", "Setting Manager role...");
                AuthProvider.UpdateAuthenticationState(username, roles);
                await JSRuntime.InvokeVoidAsync("console.log", "Navigating to sales manager dashboard");
                
                // 약간의 지연을 두고 네비게이션
                await Task.Delay(100);
                NavigationManager.NavigateTo("/sales-manager-dashboard");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Invalid credentials");
                errorMessage = "사용자 이름 또는 비밀번호가 잘못되었습니다.";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error during login: {ex.Message}");
            errorMessage = "로그인 중 오류가 발생했습니다. 다시 시도해주세요.";
        }
        finally
        {
            isLoading = false; // Stop loading animation
            StateHasChanged(); // Update UI to hide loading state
        }
    }
}

<style>
/* Light mode (default) */
.login-container {
    background-color: #ffffff;
    color: #0e131b;
}

/* Dark mode styles */
[data-theme="dark"] .login-container {
    background-color: #1a1a1a;
    color: #ffffff;
}

[data-theme="dark"] .login-container .bg-white {
    background-color: #2d2d2d !important;
    border-color: #444444 !important;
}

[data-theme="dark"] .login-container .text-\[\#0e131b\] {
    color: #ffffff !important;
}

[data-theme="dark"] .login-container .text-\[\#4d6a99\] {
    color: #b0b0b0 !important;
}

[data-theme="dark"] .login-container .border-\[\#e5e7eb\] {
    border-color: #444444 !important;
}

[data-theme="dark"] .login-container .bg-slate-50 {
    background-color: #333333 !important;
    border-color: #555555 !important;
}

[data-theme="dark"] .login-container .focus\:border-\[\#2a74ea\]:focus {
    border-color: #3b82f6 !important;
}

[data-theme="dark"] .login-container .bg-\[\#2a74ea\] {
    background-color: #3b82f6 !important;
}

[data-theme="dark"] .login-container .hover\:bg-\[\#1e5db8\]:hover {
    background-color: #2563eb !important;
}

[data-theme="dark"] .login-container .border-\[\#d0d9e7\] {
    border-color: #555555 !important;
}

[data-theme="dark"] .login-container .checked\:bg-\[\#2a74ea\]:checked {
    background-color: #3b82f6 !important;
    border-color: #3b82f6 !important;
}

[data-theme="dark"] .login-container .text-\[\#2a74ea\] {
    color: #60a5fa !important;
}

[data-theme="dark"] .login-container .social-login-btn {
    background-color: #333333 !important;
    border-color: #555555 !important;
    color: #ffffff !important;
}

[data-theme="dark"] .login-container .social-login-btn:hover {
    background-color: #444444 !important;
}

.login-card {
    background-color: rgba(255, 255, 255, 0.8);
}

[data-theme="dark"] .login-card {
    background-color: rgba(45, 45, 45, 0.8);
}

.login-button {
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    transition: filter 0.2s ease;
}

.login-button:hover {
    filter: brightness(1.1);
}


.login-checkbox {
    width: 20px;
    height: 20px;
}

@@media (max-width: 640px) {
    .login-header {
        font-size: 24px;
        letter-spacing: -0.02em;
    }
    .login-subheader,
    .login-form-label,
    .login-checkbox-label {
        font-size: 16px;
        letter-spacing: -0.01em;
    }
    .login-form-input,
    .login-button {
        height: 48px;
        font-size: 16px;
    }
    .login-checkbox {
        width: 16px;
        height: 16px;
    }
    .login-helper-links a {
        font-size: 14px;
        letter-spacing: -0.01em;
    }
}
</style>
