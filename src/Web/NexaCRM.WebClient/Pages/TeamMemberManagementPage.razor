@page "/organization/team-members"
@attribute [Authorize(Roles = "Manager,Admin")]

@using System
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using NexaCRM.WebClient.Models.Teams
@using NexaCRM.WebClient.Services.Interfaces

@inject ITeamService TeamService

<ResponsivePage>
    <div class="team-member-page">
        <div class="card shadow-sm page-header">
            <div>
                <h2 class="mb-1">팀원 관리</h2>
                <p class="text-muted mb-0">팀원 계정과 권한을 손쉽게 조회하고 설정할 수 있습니다.</p>
            </div>
            <div class="summary-box">
                <span class="summary-label">TOTAL</span>
                <span class="summary-value">@_filteredMembers.Count</span>
            </div>
        </div>

        <div class="card shadow-sm filter-card">
            <EditForm Model="_memberFilter" OnValidSubmit="ApplyMemberFilter">
                <div class="row g-3 align-items-end">
                    <div class="col-lg-3 col-md-4">
                        <label class="form-label">팀 선택</label>
                        <InputSelect class="form-select" @bind-Value="_memberFilter.TeamId">
                            <option value="0">전체</option>
                            @foreach (var team in _teams)
                            {
                                <option value="@team.Id">@team.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-lg-4 col-md-5">
                        <label class="form-label">상세 검색</label>
                        <InputText class="form-control" @bind-Value="_memberFilter.Keyword" placeholder="이름, 아이디, 코드 검색" />
                    </div>
                    <div class="col-lg-5 col-md-12">
                        <label class="form-label">조회 기간</label>
                        <div class="d-flex gap-2 flex-wrap">
                            @foreach (var preset in _periodPresets)
                            {
                                <button type="button" class="btn btn-outline-secondary btn-sm @(IsPeriodSelected(preset.Value) ? "active" : null)" @onclick="() => SetPeriod(preset.Value)">
                                    @preset.Label
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-end gap-2 mt-3">
                    <button type="submit" class="btn btn-primary">조회</button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="ResetMemberFilter">초기화</button>
                </div>
            </EditForm>
        </div>

        <div class="action-bar">
            <button class="btn btn-success" @onclick="ToggleMemberForm">
                <i class="bi bi-plus-lg me-1"></i> 팀원 등록
            </button>
        </div>

        @if (_showMemberForm)
        {
            <div class="card shadow-sm new-member-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <strong>새 팀원 등록</strong>
                    <button class="btn btn-link text-decoration-none" @onclick="ToggleMemberForm">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="card-body">
                    <EditForm Model="_newMember" OnValidSubmit="CreateMemberAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">팀</label>
                                <InputSelect class="form-select" @bind-Value="_newMember.TeamId">
                                    <option value="">팀을 선택해 주세요</option>
                                    @foreach (var team in _teams)
                                    {
                                        <option value="@team.Id">@team.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">직책</label>
                                <InputText class="form-control" @bind-Value="_newMember.Role" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">사번/코드</label>
                                <InputText class="form-control" @bind-Value="_newMember.EmployeeCode" placeholder="자동 생성" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">아이디</label>
                                <InputText class="form-control" @bind-Value="_newMember.Username" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">이름</label>
                                <InputText class="form-control" @bind-Value="_newMember.FullName" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">엑셀 업로드 권한</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="memberUploadSwitch" @bind="_newMember.AllowExcelUpload" />
                                    <label class="form-check-label" for="memberUploadSwitch">@(_newMember.AllowExcelUpload ? "사용" : "미사용")</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">사용 여부</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="memberActiveSwitch" @bind="_newMember.IsActive" />
                                    <label class="form-check-label" for="memberActiveSwitch">@(_newMember.IsActive ? "사용" : "미사용")</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">등록일</label>
                                <InputDate class="form-control" @bind-Value="_newMember.RegisteredAt" />
                            </div>
                        </div>
                        <div class="text-end mt-4">
                            <button type="submit" class="btn btn-primary px-4">등록</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }

        <div class="card shadow-sm table-card">
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">NO</th>
                            <th scope="col">직책</th>
                            <th scope="col">팀명</th>
                            <th scope="col">코드</th>
                            <th scope="col">아이디</th>
                            <th scope="col">이름</th>
                            <th scope="col" class="text-center">엑셀 업로드</th>
                            <th scope="col" class="text-center">사용 여부</th>
                            <th scope="col">등록일자</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_filteredMembers.Count == 0)
                        {
                            <tr>
                                <td colspan="9" class="text-center text-muted py-4">조건에 맞는 팀원이 없습니다.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var (member, index) in _filteredMembers.Select((m, i) => (m, i + 1)))
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@member.Role</td>
                                    <td class="fw-semibold">@member.TeamName</td>
                                    <td>@member.EmployeeCode</td>
                                    <td>@member.Username</td>
                                    <td>@member.FullName</td>
                                    <td class="text-center">
                                        <div class="form-check form-switch justify-content-center d-inline-flex">
                                            <input class="form-check-input" id="@($"member-upload-{member.Id}")" type="checkbox" role="switch" checked="@member.AllowExcelUpload" @onchange="args => ToggleUploadAsync(member, args)" />
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <div class="form-check form-switch justify-content-center d-inline-flex">
                                            <input class="form-check-input" id="@($"member-active-{member.Id}")" type="checkbox" role="switch" checked="@member.IsActive" @onchange="args => ToggleMemberUsageAsync(member, args)" />
                                        </div>
                                    </td>
                                    <td>@member.RegisteredAt.ToString("yyyy-MM-dd")</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</ResponsivePage>

@code {
    private readonly List<TeamMemberInfo> _filteredMembers = new();
    private List<TeamInfo> _teams = new();
    private List<TeamMemberInfo> _members = new();
    private bool _showMemberForm;
    private TeamMemberFilterModel _memberFilter = new();
    private TeamMemberCreateModel _newMember = new();

    private readonly (string Label, string Value)[] _periodPresets =
    {
        ("전체", "All"),
        ("오늘", "Today"),
        ("7일", "7D"),
        ("1개월", "1M"),
        ("3개월", "3M")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        _newMember = new TeamMemberCreateModel();
        ApplyMemberFilter();
    }

    private async Task LoadDataAsync()
    {
        var teams = await TeamService.GetTeamsAsync();
        _teams = teams.OrderBy(t => t.Name).ToList();
        var members = await TeamService.GetTeamMembersAsync();
        _members = members.OrderByDescending(m => m.RegisteredAt).ToList();
    }

    private void ApplyMemberFilter()
    {
        var query = _members.AsEnumerable();

        if (_memberFilter.TeamId > 0)
        {
            query = query.Where(m => m.TeamId == _memberFilter.TeamId);
        }

        if (!string.IsNullOrWhiteSpace(_memberFilter.Keyword))
        {
            var keyword = _memberFilter.Keyword.Trim();
            query = query.Where(m =>
                (m.FullName?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (m.Username?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (m.EmployeeCode?.Contains(keyword, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        if (TryGetPeriodStart(_memberFilter.Period, out var startDate))
        {
            query = query.Where(m => m.RegisteredAt >= startDate);
        }

        _filteredMembers.Clear();
        _filteredMembers.AddRange(query.OrderByDescending(m => m.RegisteredAt));
    }

    private static bool TryGetPeriodStart(string period, out DateTime startDate)
    {
        startDate = default;
        var today = DateTime.Today;

        return period switch
        {
            "Today" => Assign(today, out startDate),
            "7D" => Assign(today.AddDays(-7), out startDate),
            "1M" => Assign(today.AddMonths(-1), out startDate),
            "3M" => Assign(today.AddMonths(-3), out startDate),
            _ => false
        };
    }

    private static bool Assign(DateTime value, out DateTime result)
    {
        result = value;
        return true;
    }

    private void ResetMemberFilter()
    {
        _memberFilter = new TeamMemberFilterModel();
        ApplyMemberFilter();
    }

    private void ToggleMemberForm()
    {
        _showMemberForm = !_showMemberForm;
        if (_showMemberForm)
        {
            _newMember = new TeamMemberCreateModel();
        }
    }

    private void SetPeriod(string value)
    {
        _memberFilter.Period = value;
        ApplyMemberFilter();
    }

    private bool IsPeriodSelected(string value) => string.Equals(_memberFilter.Period, value, StringComparison.OrdinalIgnoreCase);

    private async Task CreateMemberAsync()
    {
        if (_newMember.TeamId is null)
        {
            return;
        }

        var team = _teams.FirstOrDefault(t => t.Id == _newMember.TeamId);
        if (team is null)
        {
            return;
        }

        var member = new TeamMemberInfo
        {
            TeamId = team.Id,
            TeamName = team.Name,
            Role = _newMember.Role,
            EmployeeCode = _newMember.EmployeeCode,
            Username = _newMember.Username,
            FullName = _newMember.FullName,
            AllowExcelUpload = _newMember.AllowExcelUpload,
            IsActive = _newMember.IsActive,
            RegisteredAt = _newMember.RegisteredAt
        };

        var created = await TeamService.CreateTeamMemberAsync(member);
        _members.Add(created);
        ApplyMemberFilter();
        _showMemberForm = false;
        _newMember = new TeamMemberCreateModel();
    }

    private async Task ToggleMemberUsageAsync(TeamMemberInfo member, ChangeEventArgs args)
    {
        if (member is null)
        {
            return;
        }

        var value = args.Value is bool boolean
            ? boolean
            : bool.TryParse(args.Value?.ToString(), out var parsed) && parsed;

        await TeamService.UpdateTeamMemberStatusAsync(member.Id, value);

        var target = _members.FirstOrDefault(m => m.Id == member.Id);
        if (target is not null)
        {
            target.IsActive = value;
        }

        ApplyMemberFilter();
    }

    private async Task ToggleUploadAsync(TeamMemberInfo member, ChangeEventArgs args)
    {
        if (member is null)
        {
            return;
        }

        var value = args.Value is bool boolean
            ? boolean
            : bool.TryParse(args.Value?.ToString(), out var parsed) && parsed;

        await TeamService.UpdateTeamMemberUploadPermissionAsync(member.Id, value);

        var target = _members.FirstOrDefault(m => m.Id == member.Id);
        if (target is not null)
        {
            target.AllowExcelUpload = value;
        }

        ApplyMemberFilter();
    }

    private class TeamMemberFilterModel
    {
        public int TeamId { get; set; }
        public string Keyword { get; set; } = string.Empty;
        public string Period { get; set; } = "All";
    }

    private class TeamMemberCreateModel
    {
        [Required(ErrorMessage = "팀을 선택해 주세요.")]
        public int? TeamId { get; set; }

        [Required(ErrorMessage = "직책을 입력해 주세요.")]
        public string Role { get; set; } = string.Empty;

        public string EmployeeCode { get; set; } = string.Empty;

        [Required(ErrorMessage = "아이디를 입력해 주세요.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "이름을 입력해 주세요.")]
        public string FullName { get; set; } = string.Empty;

        public bool AllowExcelUpload { get; set; } = true;

        public bool IsActive { get; set; } = true;

        public DateTime RegisteredAt { get; set; } = DateTime.Today;
    }
}
