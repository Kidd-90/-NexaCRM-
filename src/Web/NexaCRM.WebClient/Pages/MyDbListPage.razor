@page "/db/customer/my-list"
@attribute [Authorize(Roles = "Manager, Sales")]

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using NexaCRM.WebClient.Models.Db
@using NexaCRM.WebClient.Services.Interfaces
@inject IDbDataService DbDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<DbStatus> StatusLocalizer

<div class="container-fluid mt-4">
    <h1 class="mb-4">내 DB 목록</h1>
    <p class="text-muted mb-4">나에게 할당된 모든 고객 DB 목록입니다.</p>

    @if (customers == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Desktop View -->
        <div class="table-responsive desktop-table-view">
            <table class="table table-striped table-hover">
                <thead class="table-light">
                    <tr>
                        <th>고객명</th>
                        <th>연락처</th>
                        <th>분배일</th>
                        <th>DB 상태</th>
                        <th>최종 컨택일</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr @onclick="() => NavigateToContact(customer.ContactId)">
                            <td>@customer.CustomerName</td>
                            <td>@customer.ContactNumber</td>
                            <td>@customer.AssignedDate.ToShortDateString()</td>
                            <td class="@GetStatusClass(customer.Status)">@StatusLocalizer[customer.Status.ToString()]</td>
                            <td>@customer.LastContactDate.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Mobile View -->
        <div class="mobile-card-view">
            @foreach (var customer in customers)
            {
                <div class="customer-card" @onclick="() => NavigateToContact(customer.ContactId)">
                    <h5>@customer.CustomerName</h5>
                    <div class="card-info-row">
                        <span class="card-info-label">연락처</span>
                        <span class="card-info-value">@customer.ContactNumber</span>
                    </div>
                    <div class="card-info-row">
                        <span class="card-info-label">분배일</span>
                        <span class="card-info-value">@customer.AssignedDate.ToShortDateString()</span>
                    </div>
                    <div class="card-info-row">
                        <span class="card-info-label">DB 상태</span>
                        <span class="card-info-value @GetStatusClass(customer.Status)">@StatusLocalizer[customer.Status.ToString()]</span>
                    </div>
                    <div class="card-info-row">
                        <span class="card-info-label">최종 컨택일</span>
                        <span class="card-info-value">@customer.LastContactDate.ToShortDateString()</span>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<DbCustomer> customers;
    private string agentName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // For the mock data, we need to decide which user to simulate
            if (user.IsInRole("Manager"))
            {
                agentName = "김관리";
            }
            else if (user.IsInRole("Sales"))
            {
                // We'll default to one of the sales agents for the mock
                agentName = "이영업";
            }

            if (!string.IsNullOrEmpty(agentName))
            {
                customers = await DbDataService.GetMyDbListAsync(agentName);
            }
        }
    }

    private void NavigateToContact(int contactId)
    {
        NavigationManager.NavigateTo($"/contacts/{contactId}");
    }

    private static string GetStatusClass(DbStatus status) => status switch
    {
        DbStatus.New => "status-text status-new",
        DbStatus.InProgress => "status-text status-inprogress",
        DbStatus.NoAnswer => "status-text status-noanswer",
        DbStatus.Completed => "status-text status-completed",
        DbStatus.OnHold => "status-text status-onhold",
        _ => "status-text"
    };
}
