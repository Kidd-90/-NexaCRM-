@page "/db/distribution/status"
@attribute [Authorize(Roles = "Manager")]

@using NexaCRM.WebClient.Models.Db
@using NexaCRM.WebClient.Services.Interfaces

@inject IDbDataService DbDataService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<DbDistributionStatusPage> Localizer
@inject IStringLocalizer<DbStatus> StatusLocalizer

<div class="container-fluid mt-4">
    <h1 class="mb-4">@Localizer["Title"]</h1>
    <p class="text-muted mb-4">@Localizer["Subtitle"]</p>

    @if (customers == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Chart Section -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">@Localizer["StatusSummaryTitle"]</h5>
                <div class="d-flex justify-content-around p-3">
                    @foreach (var status in statusCounts)
                    {
                        <div class="text-center">
                            <h6 class="mb-0">@StatusLocalizer[status.Key.ToString()]</h6>
                            <div class="fs-2 fw-bold">@status.Value</div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <h3 class="h5 mb-3">@Localizer["AllListTitle"]</h3>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-light">
                    <tr>
                        <th>@Localizer["CustomerName"]</th>
                        <th>@Localizer["Contact"]</th>
                        <th>@Localizer["AssignedTo"]</th>
                        <th>@Localizer["AssignedDate"]</th>
                        <th>@Localizer["Status"]</th>
                        <th>@Localizer["LastContact"]</th>
                        <th>@Localizer["Actions"]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>@customer.CustomerName</td>
                            <td>@customer.ContactNumber</td>
                            <td>@customer.AssignedTo</td>
                            <td>@customer.AssignedDate.ToShortDateString()</td>
                            <td>@StatusLocalizer[customer.Status.ToString()]</td>
                            <td>@customer.LastContactDate.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-secondary btn-sm me-1 action-btn" @onclick="() => Redistribute(customer.ContactId)">@Localizer["Redistribute"]</button>
                                <button class="btn btn-danger btn-sm action-btn" @onclick="() => Recall(customer.ContactId)">@Localizer["Recall"]</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private IEnumerable<DbCustomer> customers;
    private Dictionary<DbStatus, int> statusCounts = new Dictionary<DbStatus, int>();

    protected override async Task OnInitializedAsync()
    {
        customers = await DbDataService.GetDbDistributionStatusAsync();
        if (customers != null)
        {
            ProcessDataForChart();
        }
    }

    private void ProcessDataForChart()
    {
        statusCounts = customers
            .GroupBy(c => c.Status)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void Redistribute(int contactId)
    {
        NavigationManager.NavigateTo($"/db/distribution/assign/{contactId}");
    }

    private async Task Recall(int contactId)
    {
        await DbDataService.RecallDbAsync(contactId);
        customers = await DbDataService.GetDbDistributionStatusAsync();
        ProcessDataForChart();
    }
}
