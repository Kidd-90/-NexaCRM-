@page "/"
@layout LoginLayout
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject IStringLocalizer<Index> Localizer

@if (!_hasNavigated)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">@Localizer["Loading"]</span>
            </div>
            <p class="mt-3">@Localizer["LoadingApp"]</p>
        </div>
    </div>
}

@code {
    private bool _hasNavigated = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationAndRedirect();
    }

    private async Task CheckAuthenticationAndRedirect()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Index component initialized - checking authentication...");
            
            // 인증 상태 확인
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User is authenticated, redirecting to dashboard");
                
                _hasNavigated = true;
                
                // 사용자 역할에 따라 적절한 대시보드로 리다이렉션
                if (user.IsInRole("Manager"))
                {
                    NavigationManager.NavigateTo("/sales-manager-dashboard", replace: true);
                }
                else if (user.IsInRole("Sales"))
                {
                    NavigationManager.NavigateTo("/main-dashboard", replace: true);
                }
                else
                {
                    NavigationManager.NavigateTo("/main-dashboard", replace: true);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User is not authenticated, redirecting to login");
                _hasNavigated = true;
                NavigationManager.NavigateTo("/login", replace: true);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error during authentication check: {ex.Message}");
            _hasNavigated = true;
            NavigationManager.NavigateTo("/login", replace: true);
        }
    }
}
