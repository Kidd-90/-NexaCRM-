@page "/db/distribution/newly-assigned"
@attribute [Authorize(Roles = "Sales")]

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using NexaCRM.WebClient.Models.Db
@using NexaCRM.WebClient.Services.Interfaces
@inject IDbDataService DbDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<style>
    .table-hover tbody tr:hover {
        cursor: pointer;
    }

    .mobile-card-view {
        display: none;
    }

    .customer-card {
        background-color: #fff;
        border: 1px solid #e7ecf3;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .card-content {
        cursor: pointer;
    }

    .customer-card h5 {
        margin-bottom: 12px;
        font-weight: 600;
    }

    .card-info-row {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        margin-bottom: 8px;
    }

    .card-info-label {
        color: #6c757d;
    }

    .card-info-value {
        font-weight: 500;
    }

    .card-actions {
        margin-top: 16px;
        text-align: right;
    }


    /* Show card view on mobile, hide table */
    @media (max-width: 767.98px) {
        .desktop-table-view {
            display: none;
        }

        .mobile-card-view {
            display: block;
        }
    }
</style>

<div class="container-fluid mt-4">
    <h1 class="mb-4">신규 분배 DB</h1>
    <p class="text-muted mb-4">새로 할당받아 확인이 필요한 DB 목록입니다.</p>

    @if (customers == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Desktop View -->
        <div class="table-responsive desktop-table-view">
            <table class="table table-striped table-hover">
                <thead class="table-light">
                    <tr>
                        <th>고객명</th>
                        <th>연락처</th>
                        <th>분배일</th>
                        <th>전달자</th>
                        <th>액션</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr @onclick="() => NavigateToContact(customer.ContactId)">
                            <td>@customer.CustomerName</td>
                            <td>@customer.ContactNumber</td>
                            <td>@customer.AssignedDate.ToShortDateString()</td>
                            <td>@customer.Assigner</td>
                            <td>
                                <button class="btn btn-success btn-sm" @onclick:stopPropagation="true">확인</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Mobile View -->
        <div class="mobile-card-view">
            @foreach (var customer in customers)
            {
                <div class="customer-card">
                    <div class="card-content" @onclick="() => NavigateToContact(customer.ContactId)">
                        <h5>@customer.CustomerName</h5>
                        <div class="card-info-row">
                            <span class="card-info-label">연락처</span>
                            <span class="card-info-value">@customer.ContactNumber</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">분배일</span>
                            <span class="card-info-value">@customer.AssignedDate.ToShortDateString()</span>
                        </div>
                        <div class="card-info-row">
                            <span class="card-info-label">전달자</span>
                            <span class="card-info-value">@customer.Assigner</span>
                        </div>
                    </div>
                    <div class="card-actions">
                        <button class="btn btn-success btn-sm">확인</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<DbCustomer> customers;
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        // In a real app, you'd use user.Identity.Name, but for mock, we hardcode it.
        var agentName = "이영업";
        customers = await DbDataService.GetNewlyAssignedDbAsync(agentName);
    }

    private void NavigateToContact(int contactId)
    {
        NavigationManager.NavigateTo($"/contacts/{contactId}");
    }
}
