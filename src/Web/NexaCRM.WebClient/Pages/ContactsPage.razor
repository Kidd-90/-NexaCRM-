@page "/contacts"
@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<ContactsPage> Localizer
@using NexaCRM.WebClient.Models
@using NexaCRM.WebClient.Services.Interfaces
@inject IContactService ContactService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="relative flex size-full min-h-screen flex-col bg-slate-50 group/design-root overflow-x-hidden" style='font-family: Inter, "Noto Sans", sans-serif;'>
    <div class="layout-container flex h-full grow flex-col">
        <header class="contacts-header flex flex-wrap items-center justify-between gap-3 border-b border-solid border-b-[#e7ecf3] px-4 sm:px-6 md:px-10 py-3 md:flex-nowrap md:gap-0 md:whitespace-nowrap">
            <div class="flex items-center gap-4 sm:gap-8">
                <div class="flex items-center gap-4 text-[#0e131b]">
                    <div class="size-4">
                        <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M24 18.4228L42 11.475V34.3663C42 34.7796 41.7457 35.1504 41.3601 35.2992L24 42V18.4228Z" fill="currentColor"></path>
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M24 8.18819L33.4123 11.574L24 15.2071L14.5877 11.574L24 8.18819ZM9 15.8487L21 20.4805V37.6263L9 32.9945V15.8487ZM27 37.6263V20.4805L39 15.8487V32.9945L27 37.6263ZM25.354 2.29885C24.4788 1.98402 23.5212 1.98402 22.646 2.29885L4.98454 8.65208C3.7939 9.08038 3 10.2097 3 11.475V34.3663C3 36.0196 4.01719 37.5026 5.55962 38.098L22.9197 44.7987C23.6149 45.0671 24.3851 45.0671 25.0803 44.7987L42.4404 38.098C43.9828 37.5026 45 36.0196 45 34.3663V11.475C45 10.2097 44.2061 9.08038 43.0155 8.65208L25.354 2.29885Z" fill="currentColor"></path>
                        </svg>
                    </div>
                    <h2 class="text-[#0e131b] text-sm sm:text-lg font-bold leading-tight tracking-[-0.015em]">@Localizer["NexaCRM"]</h2>
                </div>
                <!-- Add navigation links for consistency with dashboard -->
                <div class="hidden md:flex items-center gap-6 lg:gap-9">
                    <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/main-dashboard">@Localizer["Dashboard"]</a>
                    <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/sales-pipeline-page">@Localizer["Deals"]</a>
                    <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/contacts">@Localizer["Contacts"]</a>
                    <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/reports-page">@Localizer["Reports"]</a>
                    <a class="text-[#0e131b] text-sm font-medium leading-normal" href="/tools">@Localizer["Tools"]</a>
                </div>
            </div>
            <!-- Right side controls -->
            <div class="header-controls flex w-full flex-1 flex-wrap items-center justify-start gap-2 sm:gap-4 md:gap-8 md:w-auto md:justify-end">
                <!-- Search functionality -->
                <label class="search-container flex w-full flex-col min-w-0 max-w-full md:w-auto md:min-w-40 md:max-w-64 md:!h-10">
                    <div class="flex w-full flex-1 items-stretch rounded-lg h-full">
                        <div class="text-[#4d6a99] flex border-none bg-[#e7ecf3] items-center justify-center pl-4 rounded-l-lg border-r-0"
                             data-icon="MagnifyingGlass" data-size="24px" data-weight="regular">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
                                <path d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path>
                            </svg>
                        </div>
                        <input placeholder='@Localizer["Search"]'
                               class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-lg text-[#0e131b] focus:outline-0 focus:ring-0 border-none bg-[#e7ecf3] focus:border-none h-full placeholder:text-[#4d6a99] px-4 rounded-l-none border-l-0 pl-2 text-base font-normal leading-normal"
                               @bind="searchQuery"
                               @oninput="OnSearchInput" />
                    </div>
                </label>
                <!-- Notifications button -->
                <button class="notifications-btn flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 bg-[#e7ecf3] text-[#0e131b] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5"
                        @onclick="ShowNotifications">
                    <div class="text-[#0e131b]" data-icon="Bell" data-size="20px" data-weight="regular">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
                            <path d="M221.8,175.94C216.25,166.38,208,139.33,208,104a80,80,0,1,0-160,0c0,35.34-8.26,62.38-13.81,71.94A16,16,0,0,0,48,200H88.81a40,40,0,0,0,78.38,0H208a16,16,0,0,0,13.8-24.06ZM128,216a24,24,0,0,1-22.62-16h45.24A24,24,0,0,1,128,216ZM48,184c7.7-13.24,16-43.92,16-80a64,64,0,1,1,128,0c0,36.05,8.28,66.73,16,80Z"></path>
                        </svg>
                    </div>
                </button>
                <!-- Mobile Menu Button -->
                <button class="contacts-mobile-menu-button md:hidden" @onclick="ToggleMobileMenu">
                    <svg class="w-6 h-6 text-[#0e131b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
                <!-- User profile avatar -->
                <div class="user-avatar bg-center bg-no-repeat aspect-square bg-cover rounded-full size-8 sm:size-10" 
                     style='background-image: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);'></div>
            </div>
        </header>
        
        <!-- Mobile Navigation Overlay for Contacts -->
        <div class="contacts-mobile-nav-overlay @(isMobileMenuOpen ? "active" : "")" @onclick="CloseMobileMenu"></div>
        
        <!-- Mobile Navigation Menu for Contacts -->
        <nav class="contacts-mobile-nav-menu @(isMobileMenuOpen ? "active" : "")">
            <button class="contacts-mobile-nav-close" @onclick="CloseMobileMenu">
                <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
            <ul class="contacts-mobile-nav-links">
                <li><a class="contacts-mobile-nav-link" href="/main-dashboard" @onclick="CloseMobileMenu">@Localizer["Dashboard"]</a></li>
                <li><a class="contacts-mobile-nav-link" href="/sales-pipeline-page" @onclick="CloseMobileMenu">@Localizer["Deals"]</a></li>
                <li><a class="contacts-mobile-nav-link" href="/contacts" @onclick="CloseMobileMenu">@Localizer["Contacts"]</a></li>
                <li><a class="contacts-mobile-nav-link" href="/reports-page" @onclick="CloseMobileMenu">@Localizer["Reports"]</a></li>
                <li><a class="contacts-mobile-nav-link" href="/tools" @onclick="CloseMobileMenu">@Localizer["Tools"]</a></li>
            </ul>
        </nav>
        <div class="px-4 sm:px-6 md:px-12 lg:px-40 flex flex-1 justify-center py-5">
            <div class="layout-content-container flex flex-col w-full max-w-none sm:max-w-full md:max-w-[960px] flex-1">
                <div class="contacts-header">
                    <h1 class="contacts-title text-2xl sm:text-3xl md:text-4xl font-bold mb-4 sm:mb-6">@Localizer["Contacts"]</h1>
                </div>
                @if (filteredContacts == null)
                {
                    <p class="contacts-loading text-center py-8"><em>@Localizer["Loading..."]</em></p>
                }
                else
                {
                    <!-- Desktop/Tablet Layout -->
                    <div class="contacts-desktop-layout">
                        <div class="contacts-table-stack">
                            <p class="sr-only" aria-live="polite">@LiveRegionText</p>
                            <div class="contacts-table-meta" role="status">
                                <span>@GetTableSummaryText()</span>
                                <button type="button"
                                        class="contacts-table-reset"
                                        @onclick="ResetSort"
                                        disabled="@(!HasCustomSort)">
                                    @Localizer["ResetSort"]
                                </button>
                            </div>
                            <div class="contacts-table-sort" role="group" aria-label="@Localizer["SortGroupLabel"]">
                                @foreach (var option in sortOptions)
                                {
                                    var isActive = option.Key == activeSortKey;
                                    <button type="button"
                                            class="@GetSortButtonClasses(option.Key)"
                                            aria-pressed="@(isActive ? "true" : "false")"
                                            @onclick="() => SetSort(option.Key)">
                                        <span class="contacts-table-sort__label">@Localizer[option.LabelResource]</span>
                                        <span class="contacts-table-sort__caption">@Localizer[option.DescriptionResource]</span>
                                        @if (isActive)
                                        {
                                            <span class="contacts-table-sort__direction">@Localizer[sortAscending ? "SortDirectionAscending" : "SortDirectionDescending"]</span>
                                        }
                                    </button>
                                }
                            </div>
                            <div class="contacts-table-scroll">
                                <table class="contacts-table" role="grid" aria-describedby="contacts-table-caption">
                                    <caption id="contacts-table-caption" class="sr-only">@Localizer["Contacts"]</caption>
                                    <thead>
                                        <tr>
                                            <th scope="col">@Localizer["Id"]</th>
                                            <th scope="col">@Localizer["FirstName"]</th>
                                            <th scope="col">@Localizer["LastName"]</th>
                                            <th scope="col">@Localizer["Email"]</th>
                                            <th scope="col">@Localizer["PhoneNumber"]</th>
                                            <th scope="col" class="contacts-table__actions-header">@Localizer["Actions"]</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var contact in filteredContacts)
                                        {
                                            <tr class="@GetRowClasses(contact)"
                                                tabindex="0"
                                                role="button"
                                                aria-label="@GetRowAriaLabel(contact)"
                                                data-selected="@(selectedContact?.Id == contact.Id ? "true" : "false")"
                                                @onclick="() => SelectContact(contact)"
                                                @onkeydown="args => HandleRowKeyDown(args, contact)">
                                                <td class="contacts-table__cell contacts-table__cell--id">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["Id"]</span>
                                                    <span class="contacts-table__value">@contact.Id</span>
                                                </td>
                                                <td class="contacts-table__cell">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["FirstName"]</span>
                                                    <span class="contacts-table__value">@contact.FirstName</span>
                                                </td>
                                                <td class="contacts-table__cell">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["LastName"]</span>
                                                    <span class="contacts-table__value">@contact.LastName</span>
                                                </td>
                                                <td class="contacts-table__cell contacts-table__cell--link">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["Email"]</span>
                                                    @if (!string.IsNullOrWhiteSpace(contact.Email))
                                                    {
                                                        <a href="mailto:@contact.Email">@contact.Email</a>
                                                    }
                                                    else
                                                    {
                                                        <span class="contacts-table__muted">@Localizer["ContactDetailsNoEmail"]</span>
                                                    }
                                                </td>
                                                <td class="contacts-table__cell contacts-table__cell--link">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["PhoneNumber"]</span>
                                                    @if (!string.IsNullOrWhiteSpace(contact.PhoneNumber))
                                                    {
                                                        <a href="tel:@contact.PhoneNumber">@contact.PhoneNumber</a>
                                                    }
                                                    else
                                                    {
                                                        <span class="contacts-table__muted">@Localizer["ContactDetailsNoPhone"]</span>
                                                    }
                                                </td>
                                                <td class="contacts-table__cell contacts-table__cell--actions">
                                                    <span class="contacts-table__label" aria-hidden="true">@Localizer["Actions"]</span>
                                                    <NexaCRM.WebClient.Components.UI.QuickActionsComponent
                                                        PhoneNumber="@contact.PhoneNumber"
                                                        Email="@contact.Email"
                                                        CustomerName="@($"{contact.FirstName} {contact.LastName}".Trim())"
                                                        CustomerId="@contact.Id.ToString()"
                                                        ShowLabels="false"
                                                        CssClass="inline"
                                                        OnActionCompleted="HandleQuickAction" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <aside class="contacts-detail-panel @(selectedContact is not null ? "is-active" : string.Empty)" aria-labelledby="contacts-detail-heading">
                            <h2 id="contacts-detail-heading">@Localizer["ContactDetailsHeading"]</h2>
                            @if (selectedContact is { } detail)
                            {
                                <article class="contacts-detail-card">
                                    <header class="contacts-detail-card__header">
                                        <div class="contacts-detail-avatar" aria-hidden="true">@GetContactInitials(detail)</div>
                                        <div class="contacts-detail-card__identity">
                                            <p class="contacts-detail-card__name">@GetContactDisplayName(detail)</p>
                                            <p class="contacts-detail-card__role">@Localizer["ContactDetailsPrimary"]</p>
                                        </div>
                                    </header>
                                    <dl class="contacts-detail-card__list">
                                        <div class="contacts-detail-card__item">
                                            <dt>@Localizer["ContactDetailsEmailLabel"]</dt>
                                            <dd>
                                                @if (!string.IsNullOrWhiteSpace(detail.Email))
                                                {
                                                    <a href="mailto:@detail.Email">@detail.Email</a>
                                                }
                                                else
                                                {
                                                    <span class="contacts-table__muted">@Localizer["ContactDetailsNoEmail"]</span>
                                                }
                                            </dd>
                                        </div>
                                        <div class="contacts-detail-card__item">
                                            <dt>@Localizer["ContactDetailsPhoneLabel"]</dt>
                                            <dd>
                                                @if (!string.IsNullOrWhiteSpace(detail.PhoneNumber))
                                                {
                                                    <a href="tel:@detail.PhoneNumber">@detail.PhoneNumber</a>
                                                }
                                                else
                                                {
                                                    <span class="contacts-table__muted">@Localizer["ContactDetailsNoPhone"]</span>
                                                }
                                            </dd>
                                        </div>
                                        <div class="contacts-detail-card__item">
                                            <dt>@Localizer["ContactDetailsCompanyLabel"]</dt>
                                            <dd>
                                                @if (!string.IsNullOrWhiteSpace(detail.Company))
                                                {
                                                    <span>@detail.Company</span>
                                                }
                                                else
                                                {
                                                    <span class="contacts-table__muted">@Localizer["ContactDetailsNoCompany"]</span>
                                                }
                                            </dd>
                                        </div>
                                        <div class="contacts-detail-card__item">
                                            <dt>@Localizer["ContactDetailsTitleLabel"]</dt>
                                            <dd>
                                                @if (!string.IsNullOrWhiteSpace(detail.Title))
                                                {
                                                    <span>@detail.Title</span>
                                                }
                                                else
                                                {
                                                    <span class="contacts-table__muted">@Localizer["ContactDetailsNoTitle"]</span>
                                                }
                                            </dd>
                                        </div>
                                    </dl>
                                    <footer class="contacts-detail-card__footer">
                                        <span class="contacts-detail-card__footer-label">@Localizer["ContactDetailsActions"]</span>
                                        <NexaCRM.WebClient.Components.UI.QuickActionsComponent
                                            PhoneNumber="@detail.PhoneNumber"
                                            Email="@detail.Email"
                                            CustomerName="@GetContactDisplayName(detail)"
                                            CustomerId="@detail.Id.ToString()"
                                            ShowLabels="true"
                                            CssClass="contacts-detail-actions"
                                            OnActionCompleted="HandleQuickAction" />
                                    </footer>
                                </article>
                            }
                            else
                            {
                                <div class="contacts-detail-panel__empty">@Localizer["ContactDetailsEmpty"]</div>
                            }
                        </aside>
                    </div>

                    <!-- Mobile Card View -->
                    <div class="contacts-mobile-view">
                        @foreach (var contact in filteredContacts)
                        {
                            <div class="contact-card">
                                <div class="contact-name">
                                    @if (!string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName))
                                    {
                                        @($"{contact.FirstName} {contact.LastName}".Trim())
                                    }
                                    else
                                    {
                                        <span class="text-gray-500">@Localizer["No Name"]</span>
                                    }
                                </div>
                                <div class="contact-id">ID: @contact.Id</div>
                                
                                <div class="contact-info">
                                    @if (!string.IsNullOrEmpty(contact.Email))
                                    {
                                        <div class="contact-info-item">
                                            <svg class="contact-info-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                                            </svg>
                                            <div class="contact-info-content">
                                                <div class="contact-info-label">@Localizer["Email"]</div>
                                                <div class="contact-info-value">
                                                    <a href="mailto:@contact.Email">@contact.Email</a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(contact.PhoneNumber))
                                    {
                                        <div class="contact-info-item">
                                            <svg class="contact-info-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                                            </svg>
                                            <div class="contact-info-content">
                                                <div class="contact-info-label">@Localizer["PhoneNumber"]</div>
                                                <div class="contact-info-value">
                                                    <a href="tel:@contact.PhoneNumber">@contact.PhoneNumber</a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                <!-- Quick Actions for Mobile -->
                                <div class="contact-actions">
                                    <NexaCRM.WebClient.Components.UI.QuickActionsComponent 
                                        PhoneNumber="@contact.PhoneNumber"
                                        Email="@contact.Email"
                                        CustomerName="@($"{contact.FirstName} {contact.LastName}".Trim())"
                                        CustomerId="@contact.Id.ToString()"
                                        ShowLabels="true"
                                        CssClass=""
                                        OnActionCompleted="HandleQuickAction" />
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Mobile Quick Actions Floating Button -->
    <NexaCRM.WebClient.Components.UI.FloatingActionButton 
        ShowCallAction="true" 
        ShowEmailAction="true" 
        ShowMeetingAction="true" 
        ShowAddAction="true"
        OnActionClicked="HandleFloatingAction" />
</div>

@code {
    private const string DefaultSortKey = "recent";
    private const bool DefaultSortAscending = false;

    private static readonly SortOption[] sortOptions =
    {
        new("recent", "SortByRecent", "SortByRecentDescription"),
        new("name", "SortByName", "SortByNameDescription"),
        new("email", "SortByEmail", "SortByEmailDescription")
    };

    private List<Contact>? contacts;
    private List<Contact>? filteredContacts;
    private Contact? selectedContact;
    private string searchQuery = string.Empty;
    private bool isMobileMenuOpen = false;
    private string activeSortKey = DefaultSortKey;
    private bool sortAscending = DefaultSortAscending;
    private string? liveAnnouncement;
    private bool announcementToggle;

    private string LiveRegionText => liveAnnouncement ?? string.Empty;
    private bool HasCustomSort => activeSortKey != DefaultSortKey || sortAscending != DefaultSortAscending;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var result = await ContactService.GetContactsAsync();
        contacts = result?.ToList();
        ApplyFiltersAndSort(announceSelection: false);
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort(announceSelection: true);
    }

    private void ApplyFiltersAndSort(bool announceSelection)
    {
        if (contacts is null)
        {
            filteredContacts = null;
            if (announceSelection && selectedContact is not null)
            {
                AnnounceCleared();
            }
            selectedContact = null;
            return;
        }

        IEnumerable<Contact> query = contacts;

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var term = searchQuery.Trim();
            query = query.Where(c =>
                (!string.IsNullOrEmpty(c.FirstName) && c.FirstName.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.LastName) && c.LastName.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Email) && c.Email.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.PhoneNumber) && c.PhoneNumber.Contains(term, StringComparison.OrdinalIgnoreCase))
            );
        }

        query = ApplySorting(query);

        filteredContacts = query.ToList();

        UpdateSelection(filteredContacts, announceSelection);
    }

    private IEnumerable<Contact> ApplySorting(IEnumerable<Contact> source)
    {
        return activeSortKey switch
        {
            "name" when sortAscending => source.OrderBy(GetNameKey, StringComparer.CurrentCultureIgnoreCase),
            "name" => source.OrderByDescending(GetNameKey, StringComparer.CurrentCultureIgnoreCase),
            "email" when sortAscending => source.OrderBy(GetEmailKey, StringComparer.CurrentCultureIgnoreCase),
            "email" => source.OrderByDescending(GetEmailKey, StringComparer.CurrentCultureIgnoreCase),
            "recent" when sortAscending => source.OrderBy(c => c.Id),
            _ => source.OrderByDescending(c => c.Id)
        };
    }

    private static string GetNameKey(Contact contact)
        => string.Join(' ', new[] { contact.FirstName, contact.LastName }.Where(s => !string.IsNullOrWhiteSpace(s)));

    private static string GetEmailKey(Contact contact)
        => contact.Email ?? string.Empty;

    private void ShowNotifications()
    {
        // Placeholder for notifications functionality
        // This can be implemented later with a notification service
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private void CloseMobileMenu()
    {
        isMobileMenuOpen = false;
    }

    private void SetSort(string key)
    {
        if (key == activeSortKey)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            activeSortKey = key;
            sortAscending = key == DefaultSortKey ? DefaultSortAscending : true;
        }

        ApplyFiltersAndSort(announceSelection: false);
    }

    private void ResetSort()
    {
        if (!HasCustomSort)
        {
            return;
        }

        activeSortKey = DefaultSortKey;
        sortAscending = DefaultSortAscending;
        ApplyFiltersAndSort(announceSelection: false);
    }

    private string GetSortButtonClasses(string key)
    {
        var classes = "contacts-table-sort__button";
        if (key == activeSortKey)
        {
            classes += " is-active";
        }

        return classes;
    }

    private void UpdateSelection(IReadOnlyList<Contact> results, bool announceSelection)
    {
        if (results.Count == 0)
        {
            if (announceSelection && selectedContact is not null)
            {
                AnnounceCleared();
            }

            selectedContact = null;
            return;
        }

        if (selectedContact is null)
        {
            selectedContact = results[0];
            if (announceSelection)
            {
                AnnounceSelection(results[0]);
            }
            return;
        }

        if (results.Any(c => c.Id == selectedContact.Id))
        {
            return;
        }

        selectedContact = results[0];
        if (announceSelection)
        {
            AnnounceSelection(results[0]);
        }
    }

    private void SelectContact(Contact contact)
    {
        if (selectedContact?.Id == contact.Id)
        {
            return;
        }

        selectedContact = contact;
        AnnounceSelection(contact);
    }

    private void HandleRowKeyDown(KeyboardEventArgs args, Contact contact)
    {
        if (args.Key is "Enter" or " " or "Spacebar")
        {
            SelectContact(contact);
        }
    }

    private string GetRowClasses(Contact contact)
        => selectedContact?.Id == contact.Id ? "contacts-table__row is-active" : "contacts-table__row";

    private string GetRowAriaLabel(Contact contact)
    {
        var label = Localizer["ContactRowLabel", GetContactDisplayName(contact)].Value;
        if (selectedContact?.Id == contact.Id)
        {
            label += " " + Localizer["ContactRowSelected", GetContactDisplayName(contact)].Value;
        }

        return label;
    }

    private string GetTableSummaryText()
    {
        if (filteredContacts is not { Count: > 0 })
        {
            return Localizer["ContactCountSummaryEmpty"];
        }

        return Localizer["ContactCountSummary", filteredContacts.Count];
    }

    private string GetContactDisplayName(Contact contact)
    {
        var parts = new[] { contact.FirstName, contact.LastName }
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => s!.Trim())
            .ToArray();

        if (parts.Length == 0)
        {
            return Localizer["ContactNameFallback", contact.Id];
        }

        return string.Join(' ', parts);
    }

    private string GetContactInitials(Contact contact)
    {
        var initials = new[] { contact.FirstName, contact.LastName }
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s => char.ToUpperInvariant(s![0]))
            .Take(2)
            .ToArray();

        if (initials.Length == 0)
        {
            return contact.Id.ToString("D2", CultureInfo.CurrentCulture);
        }

        return string.Concat(initials);
    }

    private void AnnounceSelection(Contact contact)
        => UpdateLiveAnnouncement(Localizer["ContactSelectedAnnouncement", GetContactDisplayName(contact)]);

    private void AnnounceCleared()
        => UpdateLiveAnnouncement(Localizer["ContactSelectionCleared"]);

    private void UpdateLiveAnnouncement(LocalizedString message)
    {
        var value = message.Value;
        announcementToggle = !announcementToggle;
        liveAnnouncement = announcementToggle ? value : value + "\u200B";
    }

    private async System.Threading.Tasks.Task HandleQuickAction(string action)
    {
        // This method is called when quick action buttons are clicked
        // The actual call/email/meeting functionality is handled within the QuickActionsComponent
        Console.WriteLine($"Quick action executed: {action}");
    }

    private Contact? GetPrimaryContact()
        => selectedContact ?? filteredContacts?.FirstOrDefault();

    private async System.Threading.Tasks.Task HandleFloatingAction(string action)
    {
        var contact = GetPrimaryContact();

        switch (action)
        {
            case "call":
                if (contact is not null && !string.IsNullOrWhiteSpace(contact.PhoneNumber))
                {
                    var name = GetContactDisplayName(contact);
                    await JSRuntime.InvokeVoidAsync("nexaActions.launchCall", contact.PhoneNumber, name);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("nexaActions.showToast", Localizer["ContactMissingPhone"]);
                }
                break;
            case "email":
                if (contact is not null && !string.IsNullOrWhiteSpace(contact.Email))
                {
                    var subject = Uri.EscapeDataString(Localizer["EmailSubjectDefault", GetContactDisplayName(contact)]);
                    var body = Uri.EscapeDataString(Localizer["EmailBodyDefault"]);
                    NavigationManager.NavigateTo($"mailto:{contact.Email}?subject={subject}&body={body}", forceLoad: true);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("nexaActions.showToast", Localizer["ContactMissingEmail"]);
                }
                break;
            case "meeting":
                NavigationManager.NavigateTo("/sales-calendar");
                break;
            case "add":
                await JSRuntime.InvokeVoidAsync("nexaActions.showToast", Localizer["AddContactHint"]);
                break;
        }
    }

    private sealed record SortOption(string Key, string LabelResource, string DescriptionResource);
}
