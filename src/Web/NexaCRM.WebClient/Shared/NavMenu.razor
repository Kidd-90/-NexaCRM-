@using NexaCRM.WebClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IStringLocalizer<NavMenu> Localizer
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<!-- 고정된 햄버거 버튼 -->
<button title="Navigation menu" class="floating-menu-toggle" @onclick="ToggleNavMenu">
    <span class="navbar-toggler-icon"></span>
</button> 

<div class="@NavMenuCssClass" @onclick:stopPropagation="true">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="main-dashboard" @onclick="CloseNavMenu">
                        <span class="oi oi-dashboard" aria-hidden="true"></span> @Localizer["Dashboard"]
                    </NavLink>
                </div>

                <AuthorizeView Roles="Admin" Context="adminContext">
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="admin-dashboard" @onclick="CloseNavMenu">
                                <span class="oi oi-cog" aria-hidden="true"></span> @Localizer["AdminDashboard"]
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="Manager" Context="managerContext">
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="sales-manager-dashboard" @onclick="CloseNavMenu">
                                <span class="oi oi-person" aria-hidden="true"></span> @Localizer["ManagerDashboard"]
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="reports" @onclick="CloseNavMenu">
                                <span class="oi oi-bar-chart" aria-hidden="true"></span> @Localizer["Reports"]
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="Sales" Context="salesContext">
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="sales-pipeline" @onclick="CloseNavMenu">
                                <span class="oi oi-list-rich" aria-hidden="true"></span> @Localizer["SalesPipeline"]
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="contacts" @onclick="CloseNavMenu">
                                <span class="oi oi-people" aria-hidden="true"></span> @Localizer["Contacts"]
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <div class="nav-item px-3 mt-auto">
                    <button class="nav-link btn btn-link" @onclick="Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> @Localizer["Logout"]
                    </button>
                </div>
            </Authorized>
            <NotAuthorized>
                 <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="CloseNavMenu">
                        <span class="oi oi-home" aria-hidden="true"></span> @Localizer["Home"]
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        // JavaScript 함수 호출하여 UI 업데이트
        await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu", collapseNavMenu);
    }

    private async Task CloseNavMenu()
    {
        collapseNavMenu = true;
        // JavaScript 함수 호출하여 메뉴 닫기
        await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu", collapseNavMenu);
    }

    private async Task Logout()
    {
        await CloseNavMenu(); // 로그아웃 시에도 메뉴 닫기
        
        // CustomAuthStateProvider로 캐스팅하여 Logout 메서드 호출
        if (AuthStateProvider is CustomAuthStateProvider customAuthProvider)
        {
            customAuthProvider.Logout();
        }
        
        // auth manager를 통한 완전한 로그아웃 처리
        await JSRuntime.InvokeVoidAsync("eval", @"
            if (window.authManager && window.authManager.logout) {
                window.authManager.logout('manual_logout');
            } else {
                localStorage.clear();
                sessionStorage.clear();
                window.location.href = '/login';
            }
        ");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 초기 렌더링 후 JavaScript 초기화
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.setupOverlayHandler");
            // 초기 상태를 확실히 설정 (메뉴 닫힌 상태)
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu", true);
        }
    }
}
