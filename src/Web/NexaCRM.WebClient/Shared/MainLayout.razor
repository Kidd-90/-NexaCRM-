@inherits LayoutComponentBase
@implements IDisposable
@using System
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@using System.Security.Claims
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using NexaCRM.WebClient.Models.Navigation
@using NexaCRM.WebClient.Services.Interfaces
@using NexaCRM.WebClient.Shared
@inject IDeviceService DeviceService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserFavoritesService UserFavoritesService

<div class="page @(isMobile ? "mobile-layout" : "desktop-layout")">
    @if (isMobile)
    {
        <header class="mobile-fixed-header" role="banner">
            <div class="header-left">
                @if (isDetailPage)
                {
                    <button class="nav-back-button" title="Go back" @onclick="NavigateBack">
                        <i class="bi bi-arrow-left" aria-hidden="true"></i>
                    </button>
                }
                else
                {
                    <button class="nav-menu-button" title="Navigation menu" @onclick="ToggleNavMenu">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                }
            </div>
            <div class="page-title" role="heading" aria-level="1">@currentPageTitle</div>
            <div class="header-right">
                @if (isHomePage)
                {
                    <AuthorizeView>
                        <Authorized>
                            <button class="user-chip" title="Open profile settings" @onclick="GoToProfile">
                                <span class="user-avatar" aria-hidden="true">@userInitials</span>
                                <span class="user-name">@userDisplayName</span>
                            </button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="user-chip" title="Sign in" @onclick="GoToProfile">
                                <span class="user-avatar"><i class="bi bi-person" aria-hidden="true"></i></span>
                            </button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
                else
                {
                    <button class="page-action-button" title="@headerActionLabel">
                        <i class="@headerActionIcon" aria-hidden="true"></i>
                    </button>
                }
            </div>
        </header>
    }

    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="mobile-overlay"></div>
    <main>
        <article class="content px-4 page-fade-enter">
            @Body
        </article>
    </main>

    @if (isMobile && favoriteShortcuts.Count > 0)
    {
        <footer class="mobile-fixed-footer" role="contentinfo">
            <nav class="favorites-nav" aria-label="Favourite shortcuts">
                @foreach (var shortcut in favoriteShortcuts)
                {
                    <button @key="shortcut.Id" class="favorite-button" style="@BuildFavoriteStyle(shortcut)" title="@shortcut.Label" @onclick="() => NavigateToFavorite(shortcut)">
                        <span class="favorite-icon">
                            <i class="@shortcut.IconCssClass" aria-hidden="true"></i>
                        </span>
                        <span class="favorite-label">@shortcut.Label</span>
                    </button>
                }
            </nav>
        </footer>
    }
</div>

@code {
    private static readonly string[] DetailRoutePrefixes =
    {
        "contacts/",
        "db/distribution/assign/",
        "email-template-builder/"
    };

    private static readonly Dictionary<string, string> DetailParentRoutes = new(StringComparer.OrdinalIgnoreCase)
    {
        ["contacts/"] = "/contacts",
        ["db/distribution/assign/"] = "/db/distribution/status",
        ["email-template-builder/"] = "/email-template-builder"
    };

    private static readonly Dictionary<string, string> PageTitleOverrides = new(StringComparer.OrdinalIgnoreCase)
    {
        [""] = "Home",
        ["main-dashboard"] = "Home",
        ["sales-manager-dashboard"] = "Manager Dashboard",
        ["statistics/dashboard"] = "Statistics",
        ["statistics"] = "Statistics",
        ["reports-page"] = "Reports",
        ["sales-pipeline-page"] = "Sales Pipeline",
        ["contacts"] = "Contacts",
        ["tasks-page"] = "Tasks",
        ["settings"] = "Settings",
        ["settings-page"] = "Theme Settings",
        ["profile-settings-page"] = "Profile",
        ["settings/company-info"] = "Company Info",
        ["settings/security"] = "Security",
        ["settings/sms"] = "SMS Settings",
        ["sms/senders"] = "Sender Numbers",
        ["notification-settings-page"] = "Notifications",
        ["organization/structure"] = "Organization Structure",
        ["organization/stats"] = "Organization Stats",
        ["organization/system-admin"] = "System Admin",
        ["db/customer/all"] = "All Customers",
        ["db/customer/new"] = "New Customers",
        ["db/customer/starred"] = "Starred Customers",
        ["db/customer/assigned-today"] = "Today's Assignments",
        ["db/distribution/unassigned"] = "Unassigned DB",
        ["db/distribution/newly-assigned"] = "Newly Assigned",
        ["db/distribution/status"] = "Distribution Status",
        ["db/distribution/my-history"] = "Assignment History",
        ["db/customer/team-status"] = "Team DB Status",
        ["db/advanced"] = "Advanced DB",
        ["db/customer/my-list"] = "My DB List",
        ["customer-support-dashboard"] = "Support Dashboard",
        ["customer-support-ticket-management-interface"] = "Support Tickets",
        ["customer-support-knowledge-base"] = "Support Knowledge Base",
        ["marketing-campaign-management-interface"] = "Marketing Campaigns",
        ["system/info"] = "System Info",
        ["email-template-builder"] = "Email Templates"
    };

    private static readonly Dictionary<string, string> HeaderIconOverrides = new(StringComparer.OrdinalIgnoreCase)
    {
        ["contacts"] = "bi bi-person-lines-fill",
        ["reports-page"] = "bi bi-bar-chart-line",
        ["statistics"] = "bi bi-graph-up",
        ["statistics/dashboard"] = "bi bi-graph-up",
        ["sales-pipeline-page"] = "bi bi-kanban",
        ["tasks-page"] = "bi bi-check2-square",
        ["settings"] = "bi bi-gear-wide-connected",
        ["settings-page"] = "bi bi-brightness-high",
        ["profile-settings-page"] = "bi bi-person-circle",
        ["organization"] = "bi bi-diagram-3",
        ["marketing-campaign-management-interface"] = "bi bi-bullseye",
        ["customer-support-dashboard"] = "bi bi-headset",
        ["customer-support-ticket-management-interface"] = "bi bi-card-checklist",
        ["system"] = "bi bi-hdd-network",
        ["sms"] = "bi bi-chat-dots",
        ["db"] = "bi bi-database",
        ["sales-manager-dashboard"] = "bi bi-speedometer2",
        ["email-template-builder"] = "bi bi-envelope-open"
    };

    private bool isMobile;
    private bool isDetailPage;
    private bool isHomePage;
    private string currentPageTitle = "Home";
    private string headerActionIcon = "bi bi-grid-3x3-gap";
    private string headerActionLabel = "Page actions";
    private string userDisplayName = "Guest";
    private string userInitials = "G";
    private string? parentPagePath;
    private IReadOnlyList<UserFavoriteShortcut> favoriteShortcuts = Array.Empty<UserFavoriteShortcut>();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UpdateUserInfo(authState.User);
        }
        catch
        {
            UpdateUserInfo(new ClaimsPrincipal(new ClaimsIdentity()));
        }

        try
        {
            favoriteShortcuts = await UserFavoritesService.GetFavoritesAsync();
        }
        catch
        {
            favoriteShortcuts = Array.Empty<UserFavoriteShortcut>();
        }

        UpdateLayoutState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.setupOverlayHandler");
            isMobile = await DeviceService.IsMobileAsync();
            UpdateLayoutState();
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu", isMobile);
            await JSRuntime.InvokeVoidAsync("updateMainThemeToggleIcon");
            if (isMobile)
            {
                await JSRuntime.InvokeVoidAsync("window.navigationHelper.syncMobileLayoutSpacing");
            }
            StateHasChanged();
        }

        if (!firstRender && isMobile)
        {
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.syncMobileLayoutSpacing");
        }
    }

    private async Task ToggleNavMenu()
    {
        await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu");
    }

    private void GoToProfile()
    {
        NavigationManager.NavigateTo("profile-settings-page");
    }

    private async Task NavigateBack()
    {
        if (!string.IsNullOrWhiteSpace(parentPagePath))
        {
            NavigationManager.NavigateTo(parentPagePath);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("history.back");
        }
    }

    private void NavigateToFavorite(UserFavoriteShortcut shortcut)
    {
        if (shortcut is null || !shortcut.HasTarget)
        {
            return;
        }

        NavigationManager.NavigateTo(shortcut.TargetUri);
    }

    private void UpdateLayoutState()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var normalized = NormalizePath(relativePath);

        isDetailPage = false;
        parentPagePath = null;

        foreach (var prefix in DetailRoutePrefixes)
        {
            if (normalized.StartsWith(prefix, StringComparison.OrdinalIgnoreCase) && normalized.Length > prefix.Length)
            {
                isDetailPage = true;
                if (DetailParentRoutes.TryGetValue(prefix, out var explicitParent))
                {
                    parentPagePath = explicitParent;
                }
                break;
            }
        }

        if (isDetailPage && string.IsNullOrEmpty(parentPagePath))
        {
            var lastSeparator = normalized.LastIndexOf('/');
            if (lastSeparator > 0)
            {
                parentPagePath = "/" + normalized[..lastSeparator];
            }
        }

        isHomePage = string.IsNullOrEmpty(normalized) ||
                     string.Equals(normalized, "main-dashboard", StringComparison.OrdinalIgnoreCase) ||
                     string.Equals(normalized, "sales-manager-dashboard", StringComparison.OrdinalIgnoreCase);

        currentPageTitle = ResolvePageTitle(normalized, isDetailPage);
        headerActionIcon = ResolveHeaderActionIcon(normalized);
        headerActionLabel = string.Format(CultureInfo.CurrentCulture, "{0} actions", currentPageTitle);
    }

    private static string NormalizePath(string? relativePath)
    {
        if (string.IsNullOrWhiteSpace(relativePath))
        {
            return string.Empty;
        }

        var trimmed = relativePath.Split('?', '#')[0];
        return trimmed.Trim('/');
    }

    private string ResolvePageTitle(string normalizedPath, bool treatAsDetail)
    {
        if (PageTitleOverrides.TryGetValue(normalizedPath, out var directTitle))
        {
            return directTitle;
        }

        if (string.IsNullOrEmpty(normalizedPath))
        {
            return "Home";
        }

        var segments = normalizedPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length == 0)
        {
            return "Home";
        }

        if (treatAsDetail && segments.Length > 1)
        {
            var detailBase = string.Join('/', segments[..^1]);
            if (PageTitleOverrides.TryGetValue(detailBase, out var detailTitle))
            {
                return detailTitle;
            }

            segments = segments[..^1];
        }

        var lastSegment = segments.Last();
        if (PageTitleOverrides.TryGetValue(lastSegment, out var segmentTitle))
        {
            return segmentTitle;
        }

        return ToTitleCase(lastSegment.Replace("-", " "));
    }

    private string ResolveHeaderActionIcon(string normalizedPath)
    {
        if (HeaderIconOverrides.TryGetValue(normalizedPath, out var icon))
        {
            return icon;
        }

        if (string.IsNullOrEmpty(normalizedPath))
        {
            return "bi bi-grid-3x3-gap";
        }

        var segments = normalizedPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        foreach (var segment in new[] { normalizedPath, segments.First(), segments.Last() })
        {
            if (HeaderIconOverrides.TryGetValue(segment, out icon))
            {
                return icon;
            }
        }

        return "bi bi-grid-3x3-gap";
    }

    private static string ToTitleCase(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "Home";
        }

        var lowerInvariant = value.ToLower(CultureInfo.CurrentCulture);
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(lowerInvariant);
    }

    private static string BuildFavoriteStyle(UserFavoriteShortcut shortcut)
    {
        var iconColor = string.IsNullOrWhiteSpace(shortcut.IconColor)
            ? "#2153C8"
            : shortcut.IconColor;

        var baseColor = TryParseColor(iconColor) ?? DefaultFavoriteColor;
        var background = BuildFavoriteBackground(shortcut.BackgroundColor, baseColor);

        var iconShadow = baseColor.ToRgba(0.3d);
        var border = baseColor.Lighten(0.6d).ToRgba(0.65d);
        var highlight = baseColor.Lighten(0.45d).ToRgba(0.35d);
        var glow = baseColor.Lighten(0.1d).ToRgba(0.4d);
        var chipBackground = baseColor.ToRgba(0.12d);

        return string.Join(' ',
            $"--favorite-background: {background};",
            $"--favorite-icon-color: {iconColor};",
            $"--favorite-icon-shadow: {iconShadow};",
            $"--favorite-border: {border};",
            $"--favorite-highlight: {highlight};",
            $"--favorite-icon-glow: {glow};",
            $"--favorite-chip-background: {chipBackground};");
    }

    private static string BuildFavoriteBackground(string? configuredBackground, RgbColor baseColor)
    {
        var gradient = FormattableString.Invariant(
            $"linear-gradient(135deg, {baseColor.Lighten(0.55d).ToRgba(0.95d)} 0%, {baseColor.Lighten(0.2d).ToRgba(0.92d)} 48%, {baseColor.Darken(0.1d).ToRgba(0.98d)} 100%)");

        if (string.IsNullOrWhiteSpace(configuredBackground) || string.Equals(configuredBackground, "transparent", StringComparison.OrdinalIgnoreCase))
        {
            return gradient;
        }

        if (configuredBackground.Contains("gradient", StringComparison.OrdinalIgnoreCase))
        {
            return configuredBackground;
        }

        var parsed = TryParseColor(configuredBackground);
        if (parsed is not null)
        {
            return FormattableString.Invariant(
                $"linear-gradient(135deg, {parsed.Value.Lighten(0.45d).ToRgba(0.95d)} 0%, {parsed.Value.Blend(baseColor, 0.35d).ToRgba(0.9d)} 55%, {baseColor.Darken(0.12d).ToRgba(0.98d)} 100%)");
        }

        return gradient;
    }

    private static RgbColor? TryParseColor(string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return null;
        }

        var trimmed = value.Trim();

        if (trimmed.StartsWith('#'))
        {
            var hex = trimmed[1..];
            if (hex.Length == 3)
            {
                hex = string.Concat(hex.Select(c => new string(c, 2)));
            }

            if (hex.Length == 6 &&
                int.TryParse(hex[..2], NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var r) &&
                int.TryParse(hex.Substring(2, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var g) &&
                int.TryParse(hex.Substring(4, 2), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out var b))
            {
                return new RgbColor(r, g, b);
            }
        }

        if (trimmed.StartsWith("rgb", StringComparison.OrdinalIgnoreCase))
        {
            var start = trimmed.IndexOf('(');
            var end = trimmed.IndexOf(')');
            if (start > -1 && end > start)
            {
                var segments = trimmed.Substring(start + 1, end - start - 1)
                    .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

                if (segments.Length >= 3 &&
                    double.TryParse(segments[0], NumberStyles.Number, CultureInfo.InvariantCulture, out var r) &&
                    double.TryParse(segments[1], NumberStyles.Number, CultureInfo.InvariantCulture, out var g) &&
                    double.TryParse(segments[2], NumberStyles.Number, CultureInfo.InvariantCulture, out var b))
                {
                    return new RgbColor(r, g, b);
                }
            }
        }

        return null;
    }

    private static readonly RgbColor DefaultFavoriteColor = new(33, 83, 200);

    private readonly record struct RgbColor(double R, double G, double B)
    {
        private static readonly RgbColor White = new(255, 255, 255);
        private static readonly RgbColor Black = new(0, 0, 0);

        public RgbColor Lighten(double amount) => Blend(White, amount);
        public RgbColor Darken(double amount) => Blend(Black, amount);

        public RgbColor Blend(RgbColor target, double amount)
        {
            var t = Math.Clamp(amount, 0d, 1d);
            return new RgbColor(
                R + ((target.R - R) * t),
                G + ((target.G - G) * t),
                B + ((target.B - B) * t));
        }

        public string ToRgba(double alpha = 1d)
        {
            var clampedAlpha = Math.Clamp(alpha, 0d, 1d);
            return FormattableString.Invariant(
                $"rgba({Math.Clamp((int)Math.Round(R), 0, 255)}, {Math.Clamp((int)Math.Round(G), 0, 255)}, {Math.Clamp((int)Math.Round(B), 0, 255)}, {clampedAlpha:0.##})");
        }
    }

    private void UpdateUserInfo(ClaimsPrincipal user)
    {
        if (user?.Identity?.IsAuthenticated == true)
        {
            userDisplayName = string.IsNullOrWhiteSpace(user.Identity?.Name) ? "User" : user.Identity!.Name!;

            userInitials = string.Join(string.Empty, userDisplayName
                .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Where(segment => segment.Length > 0)
                .Take(2)
                .Select(segment => char.ToUpperInvariant(segment[0])));

            if (string.IsNullOrWhiteSpace(userInitials))
            {
                var firstChar = userDisplayName.FirstOrDefault();
                userInitials = firstChar == default ? "U" : char.ToUpperInvariant(firstChar).ToString();
            }
        }
        else
        {
            userDisplayName = "Guest";
            userInitials = "G";
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            UpdateLayoutState();
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("window.navigationHelper.toggleMenu", true);
            if (isMobile)
            {
                await JSRuntime.InvokeVoidAsync("window.navigationHelper.syncMobileLayoutSpacing");
            }
        }
        catch (Exception ex)
        {
            Console.Error?.WriteLine($"Failed to update layout on navigation: {ex.Message}");
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

<script>
    // Update main theme toggle button icons based on current theme
    function updateMainThemeToggleIcon() {
        const themeToggle = document.querySelector('.theme-toggle-button');
        if (!themeToggle) return;
        
        const lightIcon = themeToggle.querySelector('.theme-light-icon');
        const darkIcon = themeToggle.querySelector('.theme-dark-icon');
        
        if (!lightIcon || !darkIcon) return;
        
        // Get current theme from document attribute or localStorage
        const currentTheme = document.documentElement.getAttribute('data-theme') || 
                           localStorage.getItem('nexacrm-theme-preference') || 
                           'light';
        
        // Get system theme if theme is set to auto
        let effectiveTheme = currentTheme;
        if (currentTheme === 'auto') {
            effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        
        // Update icon visibility based on effective theme
        if (effectiveTheme === 'dark') {
            lightIcon.style.display = 'inline';
            darkIcon.style.display = 'none';
            themeToggle.setAttribute('aria-label', 'Switch to light theme');
        } else {
            lightIcon.style.display = 'none';
            darkIcon.style.display = 'inline';
            themeToggle.setAttribute('aria-label', 'Switch to dark theme');
        }
        
        console.log('Main theme toggle icon updated for theme:', effectiveTheme);
    }

    // Ensure theme toggle works on main layout
    document.addEventListener('DOMContentLoaded', function() {
        // Immediately update theme icon
        updateMainThemeToggleIcon();
        
        // Wait a bit for all scripts to load, then setup listeners
        setTimeout(function() {
            if (window.themeManager && window.themeManager.setupThemeToggleListeners) {
                window.themeManager.setupThemeToggleListeners();
                console.log('Theme toggle listeners setup for main layout');
            }
            
            // Update icon again after theme manager is initialized
            setTimeout(updateMainThemeToggleIcon, 100);
        }, 500);
    });
    
    // Also setup on page show (for browser back/forward navigation)
    window.addEventListener('pageshow', function() {
        updateMainThemeToggleIcon();
        
        setTimeout(function() {
            if (window.themeManager && window.themeManager.setupThemeToggleListeners) {
                window.themeManager.setupThemeToggleListeners();
            }
            updateMainThemeToggleIcon();
        }, 100);
    });
    
    // Listen for theme changes to update icon
    window.addEventListener('themeChanged', function() {
        setTimeout(updateMainThemeToggleIcon, 50);
    });
    
    // Listen for system theme changes (for auto mode)
    if (window.matchMedia) {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function() {
            const currentTheme = localStorage.getItem('nexacrm-theme-preference') || 'auto';
            if (currentTheme === 'auto') {
                setTimeout(updateMainThemeToggleIcon, 50);
            }
        });
    }
    
    // Listen for Blazor navigation events to re-update theme toggle icons
    window.addEventListener('blazorNavigated', function() {
        setTimeout(updateMainThemeToggleIcon, 100);
    });
    
    // Make function globally available
    window.updateMainThemeToggleIcon = updateMainThemeToggleIcon;

    // Also make it available through theme manager
    if (window.themeManager) {
        window.themeManager.updateMainThemeToggleIcon = updateMainThemeToggleIcon;
    }
</script>
