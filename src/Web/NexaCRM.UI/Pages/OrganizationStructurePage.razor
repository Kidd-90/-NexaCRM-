@page "/organization/structure"
@inject IOrganizationService OrganizationService

<ResponsivePage>
    <h3>Organization Structure</h3>
    <p>Manage production companies, teams and members.</p>

    @if (_nodes is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ul class="organization-tree list-unstyled">
            @foreach (var node in _nodes)
            {
                <OrganizationTreeNode Node="node" AddChild="StartAdd" Edit="StartEdit" Delete="StartDelete" />
            }
        </ul>
    }

    @if (_showDialog)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@_dialogTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                    </div>
                    <div class="modal-body">
                        @if (_mode == DialogMode.Delete)
                        {
                            <p>Are you sure you want to delete '@_current?.Unit.Name'?</p>
                        }
                        else
                        {
                            <input class="form-control" @bind="_name" />
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                        <button class="btn btn-primary" @onclick="ConfirmAsync">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</ResponsivePage>

@code {
    private List<OrganizationNode>? _nodes;
    private bool _showDialog;
    private DialogMode _mode;
    private string _dialogTitle = string.Empty;
    private string _name = string.Empty;
    private OrganizationNode? _current;

    protected override async Task OnInitializedAsync()
    {
        var units = (await OrganizationService.GetOrganizationStructureAsync()).ToList();
        var lookup = units.ToLookup(u => u.ParentId);
        _nodes = BuildTree(null);

        List<OrganizationNode> BuildTree(int? parentId) =>
            lookup[parentId]
                .Select(u => new OrganizationNode { Unit = u, Children = BuildTree(u.Id) })
                .ToList();
    }

    private void StartAdd(OrganizationNode parent)
    {
        _mode = DialogMode.Create;
        _current = parent;
        _name = string.Empty;
        _dialogTitle = "Add Unit";
        _showDialog = true;
    }

    private void StartEdit(OrganizationNode node)
    {
        _mode = DialogMode.Edit;
        _current = node;
        _name = node.Unit.Name;
        _dialogTitle = "Edit Unit";
        _showDialog = true;
    }

    private void StartDelete(OrganizationNode node)
    {
        _mode = DialogMode.Delete;
        _current = node;
        _dialogTitle = "Delete Unit";
        _showDialog = true;
    }

    private void CloseDialog() => _showDialog = false;

    private async Task ConfirmAsync()
    {
        if (_current is null) return;

        switch (_mode)
        {
            case DialogMode.Create:
                var newUnit = new OrganizationUnit(0, _name, _current.Unit.Id);
                await OrganizationService.SaveOrganizationUnitAsync(newUnit);
                var newNode = new OrganizationNode { Unit = newUnit };
                _current.Children.Add(newNode);
                _current.IsExpanded = true;
                break;
            case DialogMode.Edit:
                var updated = _current.Unit with { Name = _name };
                await OrganizationService.SaveOrganizationUnitAsync(updated);
                _current.Unit = updated;
                break;
            case DialogMode.Delete:
                await OrganizationService.DeleteOrganizationUnitAsync(_current.Unit.Id);
                RemoveNode(_nodes!, _current);
                break;
        }

        _showDialog = false;
    }

    private void RemoveNode(List<OrganizationNode> list, OrganizationNode node)
    {
        if (list.Remove(node))
            return;

        foreach (var item in list)
        {
            RemoveNode(item.Children, node);
        }
    }

    private enum DialogMode
    {
        Create,
        Edit,
        Delete
    }
}
